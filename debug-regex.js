const { Client } = require('pg');
const config = require('./config');

async function debugRegex() {
    const client = new Client(config.dbConfig);
    try {
        await client.connect();
        
        // –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç ‚Ññ3
        const lot3 = await client.query(`
            SELECT coin_description 
            FROM auction_lots 
            WHERE auction_number = $1 AND lot_number = $2
        `, [967, '3']);
        
        if (lot3.rows.length === 0) {
            console.log('‚ùå –õ–æ—Ç ‚Ññ3 –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const description = lot3.rows[0].coin_description;
        console.log('üìù –û–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞ ‚Ññ3:');
        console.log(description);
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        const patterns = [
            /(\d+)\s*—Ä—É–±–ª–µ–π?/i,
            /15\s*—Ä—É–±–ª–µ–π?/i,
            /15\s*—Ä—É–±/i,
            /—Ä—É–±–ª–µ–π/i
        ];
        
        console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:');
        patterns.forEach((pattern, index) => {
            const match = description.match(pattern);
            console.log(`   ${index + 1}. ${pattern}: ${match ? `"${match[0]}"` : '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
        });
        
        // –ò—â–µ–º –≤—Å–µ –ª–æ—Ç—ã —Å "15" –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
        const lotsWith15 = await client.query(`
            SELECT lot_number, auction_number, coin_description
            FROM auction_lots 
            WHERE coin_description LIKE '%15%'
                AND winning_bid IS NOT NULL 
                AND winning_bid > 0
            LIMIT 10
        `);
        
        console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ ${lotsWith15.rows.length} –ª–æ—Ç–æ–≤ —Å "15" –≤ –æ–ø–∏—Å–∞–Ω–∏–∏:`);
        lotsWith15.rows.forEach((lot, index) => {
            console.log(`   ${index + 1}. –õ–æ—Ç ${lot.lot_number} (–ê—É–∫—Ü–∏–æ–Ω ${lot.auction_number}): ${lot.coin_description.substring(0, 100)}...`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await client.end();
    }
}

debugRegex();

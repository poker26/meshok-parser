const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function debugParserDescriptions() {
    const client = await pool.connect();
    
    try {
        console.log('üîç –ê–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä...\n');
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–π —Å –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–ª–ª–∞–º–∏
        const query = `
            SELECT id, coin_description, auction_number, lot_number
            FROM auction_lots
            WHERE (coin_description ILIKE '%Au%' OR coin_description ILIKE '%Ag%' OR coin_description ILIKE '%Pt%' OR coin_description ILIKE '%Pd%')
            AND coin_description IS NOT NULL 
            AND coin_description != ''
            ORDER BY id
            LIMIT 10;
        `;
        
        const result = await client.query(query);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤ —Å –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–ª–ª–∞–º–∏: ${result.rows.length}\n`);
        
        for (const [index, lot] of result.rows.entries()) {
            console.log(`--- –õ–æ—Ç ${index + 1} ---`);
            console.log(`ID: ${lot.id}, –ê—É–∫—Ü–∏–æ–Ω: ${lot.auction_number}, –õ–æ—Ç: ${lot.lot_number}`);
            console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${lot.coin_description}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Å–∞
            const hasWeight = lot.coin_description.match(/\b(–≤–µ—Å|–≥—Ä|oz|Au\s+\d+|Ag\s+\d+|Pt\s+\d+|Pd\s+\d+)\b/i);
            console.log(`–ï—Å—Ç—å –ª–∏ –≤–µ—Å: ${hasWeight ? '–î–ê' : '–ù–ï–¢'}`);
            if (hasWeight) {
                console.log(`–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–µ—Å–∞: ${hasWeight[0]}`);
            }
            console.log('');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ–ø–∏—Å–∞–Ω–∏–π:', error);
    } finally {
        client.release();
        await pool.end();
    }
}

debugParserDescriptions();





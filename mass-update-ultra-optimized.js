const { Client } = require('pg');
const puppeteer = require('puppeteer-core');
const fs = require('fs');

const dbConfig = {
    user: 'postgres.xkwgspqwebfeteoblayu',        
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',   
    password: 'Gopapopa326+',    
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    }
};

class UltraOptimizedUpdater {
    constructor() {
        this.dbClient = new Client(dbConfig);
        this.browser = null;
        this.page = null;
        this.updated = 0;
        this.errors = 0;
        this.skipped = 0;
        this.processed = 0;
        this.progressFile = 'ultra_optimized_progress.json';
        this.startTime = Date.now();
    }

    async init() {
        await this.dbClient.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
        
        this.browser = await puppeteer.launch({
            headless: true,
            executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
            args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
        });
        
        this.page = await this.browser.newPage();
        await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
        this.page.setDefaultTimeout(30000);
        this.page.setDefaultNavigationTimeout(30000);
        
        console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        this.loadProgress();
    }

    loadProgress() {
        try {
            if (fs.existsSync(this.progressFile)) {
                const progress = JSON.parse(fs.readFileSync(this.progressFile, 'utf8'));
                this.updated = progress.updated || 0;
                this.errors = progress.errors || 0;
                this.skipped = progress.skipped || 0;
                this.processed = progress.processed || 0;
                console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${this.updated}, –æ—à–∏–±–æ–∫ ${this.errors}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${this.skipped}`);
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è');
        }
    }

    saveProgress() {
        try {
            const progress = {
                updated: this.updated,
                errors: this.errors,
                skipped: this.skipped,
                processed: this.processed,
                timestamp: new Date().toISOString()
            };
            fs.writeFileSync(this.progressFile, JSON.stringify(progress, null, 2));
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error.message);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π
    extractConditionWithGrade(conditionText) {
        if (!conditionText) return null;
        return conditionText.replace(/\s+/g, '');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    async getLotsToUpdate() {
        console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ —Å –∫—Ä–∏—Ç–∏—á–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ—Ç—ã —Å –∫—Ä–∏—Ç–∏—á–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏: MS, PF, UNC, PL, PR, F, Proof, Gem, XX
        // –ò—Å–∫–ª—é—á–∞–µ–º VF, XF, AU - –¥–ª—è –Ω–∏—Ö –≥—Ä–∞–¥–∞—Ü–∏–∏ –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã
        const query = `
            SELECT id, lot_number, auction_number, condition, source_url
            FROM auction_lots 
            WHERE source_url IS NOT NULL 
            AND condition IN ('MS', 'PF', 'UNC', 'PL', 'PR', 'F', 'Proof', 'Gem', 'XX')
            ORDER BY auction_number DESC, lot_number;
        `;
        
        const result = await this.dbClient.query(query);
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ª–æ—Ç–æ–≤ —Å –∫—Ä–∏—Ç–∏—á–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
        
        return result.rows;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    async updateLotFromUrl(lotId, sourceUrl, lotNumber, auctionNumber) {
        console.log(`\nüîç [${this.processed + 1}] –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ—Ç ${lotNumber} (–ê—É–∫—Ü–∏–æ–Ω ${auctionNumber}) ID ${lotId}...`);
        
        let attempts = 0;
        const maxAttempts = 3;
        
        while (attempts < maxAttempts) {
            try {
                await this.page.goto(sourceUrl, { waitUntil: 'networkidle2', timeout: 30000 });
                await new Promise(resolve => setTimeout(resolve, 1500));
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                const lotData = await this.page.evaluate(() => {
                    const data = {};
                    
                    // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    const pageText = document.body.textContent || '';
                    const conditionMatch = pageText.match(/–°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å:\s*([^\n\r]+)/i);
                    if (conditionMatch) {
                        data.condition = conditionMatch[1].trim();
                    }
                    
                    return data;
                });
                
                if (lotData.condition) {
                    const newCondition = this.extractConditionWithGrade(lotData.condition);
                    
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –±–∞–∑—ã
                    const currentQuery = `
                        SELECT condition FROM auction_lots WHERE id = $1;
                    `;
                    const currentResult = await this.dbClient.query(currentQuery, [lotId]);
                    
                    if (currentResult.rows.length > 0) {
                        const oldCondition = currentResult.rows[0].condition;
                        if (oldCondition !== newCondition) {
                            const updateQuery = `
                                UPDATE auction_lots SET condition = $1 WHERE id = $2;
                            `;
                            await this.dbClient.query(updateQuery, [newCondition, lotId]);
                            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: "${oldCondition}" -> "${newCondition}"`);
                            this.updated++;
                        } else {
                            console.log(`‚è≠Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: "${oldCondition}"`);
                            this.skipped++;
                        }
                    } else {
                        console.log(`‚ö†Ô∏è –õ–æ—Ç ${lotId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);
                        this.skipped++;
                    }
                } else {
                    console.log(`‚è≠Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–ª—è –ª–æ—Ç–∞ ${lotId}.`);
                    this.skipped++;
                }
                
                this.processed++;
                return true; // –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                
            } catch (error) {
                attempts++;
                console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`);
                
                if (error.message.includes('detached') || error.message.includes('Frame')) {
                    console.log('üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
                    await this.recreateBrowser();
                } else if (error.message.includes('Connection terminated') || error.message.includes('ECONNRESET')) {
                    console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                    await this.reconnectDatabase();
                }
                
                if (attempts < maxAttempts) {
                    console.log(`‚è≥ –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
                    await new Promise(resolve => setTimeout(resolve, 3000));
                } else {
                    console.log(`‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è –ª–æ—Ç–∞ ${lotId}`);
                    this.errors++;
                    this.processed++;
                    return false;
                }
            }
        }
    }

    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    async recreateBrowser() {
        try {
            if (this.page && !this.page.isClosed()) {
                await this.page.close();
            }
            if (this.browser) {
                await this.browser.close();
            }
            
            this.browser = await puppeteer.launch({
                headless: true,
                executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
                args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']
            });
            
            this.page = await this.browser.newPage();
            await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
            this.page.setDefaultTimeout(30000);
            this.page.setDefaultNavigationTimeout(30000);
            
            console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
        }
    }

    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async reconnectDatabase() {
        try {
            await this.dbClient.end();
            this.dbClient = new Client(dbConfig);
            await this.dbClient.connect();
            console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î:', error.message);
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    async massUpdateUltraOptimized() {
        try {
            const lotsToUpdate = await this.getLotsToUpdate();
            
            if (lotsToUpdate.length === 0) {
                console.log('‚ùå –ù–µ—Ç –ª–æ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
                return;
            }
            
            console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –£–õ–¨–¢–†–ê-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${lotsToUpdate.length} –ª–æ—Ç–æ–≤...`);
            console.log('‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', new Date().toLocaleString());
            console.log('üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (MS, PF, UNC, PL, PR, F, Proof, Gem, XX)');
            console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: VF, XF, AU - –¥–ª—è –Ω–∏—Ö –≥—Ä–∞–¥–∞—Ü–∏–∏ –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã');
            
            for (let i = 0; i < lotsToUpdate.length; i++) {
                const lot = lotsToUpdate[i];
                
                try {
                    await this.updateLotFromUrl(lot.id, lot.source_url, lot.lot_number, lot.auction_number);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ª–æ—Ç–æ–≤
                    if ((i + 1) % 10 === 0) {
                        this.saveProgress();
                        this.printStats();
                    }
                    
                    // –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∫–∞–∂–¥—ã–µ 50 –ª–æ—Ç–æ–≤
                    if ((i + 1) % 50 === 0) {
                        console.log('üîÑ –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
                        await this.reconnectDatabase();
                        console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
                    }
                    
                    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                } catch (error) {
                    console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ—Ç–∞ ${lot.id}:`, error.message);
                    this.errors++;
                    this.processed++;
                }
            }
            
            console.log('\nüéâ –£–õ–¨–¢–†–ê-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
            this.printFinalStats();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error.message);
        }
    }

    printStats() {
        const elapsed = Math.round((Date.now() - this.startTime) / 1000);
        const rate = this.processed > 0 ? (this.processed / elapsed * 60).toFixed(1) : 0;
        
        console.log(`\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${this.processed} –ª–æ—Ç–æ–≤ | –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${this.updated} | –û—à–∏–±–æ–∫: ${this.errors} | –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.skipped} | –°–∫–æ—Ä–æ—Å—Ç—å: ${rate} –ª–æ—Ç–æ–≤/–º–∏–Ω`);
    }

    printFinalStats() {
        const elapsed = Math.round((Date.now() - this.startTime) / 1000);
        const hours = Math.floor(elapsed / 3600);
        const minutes = Math.floor((elapsed % 3600) / 60);
        const seconds = elapsed % 60;
        
        console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log('='.repeat(50));
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ª–æ—Ç–æ–≤: ${this.updated}`);
        console.log(`‚è≠Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${this.skipped}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.errors}`);
        console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.processed}`);
        console.log(`‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${hours}—á ${minutes}–º ${seconds}—Å`);
        
        if (this.processed > 0) {
            const rate = (this.processed / elapsed * 60).toFixed(1);
            console.log(`üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${rate} –ª–æ—Ç–æ–≤/–º–∏–Ω`);
        }
        
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        try {
            if (fs.existsSync(this.progressFile)) {
                fs.unlinkSync(this.progressFile);
                console.log('üóëÔ∏è –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
        }
    }

    async close() {
        try {
            if (this.dbClient) {
                await this.dbClient.end();
                console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î');
        }
        
        try {
            if (this.browser) {
                await this.browser.close();
                console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
            }
        } catch (error) {
            console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞');
        }
    }
}

async function massUpdateUltraOptimized() {
    const updater = new UltraOptimizedUpdater();
    
    try {
        await updater.init();
        await updater.massUpdateUltraOptimized();
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await updater.close();
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
    console.log('\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...');
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...');
    process.exit(0);
});

massUpdateUltraOptimized();

#!/bin/bash

# Wolmar Parser - Safe Deployment Script
# –ê–≤—Ç–æ—Ä: Wolmar Team
# –í–µ—Ä—Å–∏—è: 2.0.0

set -e

echo "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Wolmar Parser..."

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
create_backup() {
    echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..."
    BACKUP_DIR="backup/$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
    cp -r . "$BACKUP_DIR/" 2>/dev/null || true
    
    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
    tar -czf "${BACKUP_DIR}.tar.gz" "$BACKUP_DIR"
    rm -rf "$BACKUP_DIR"
    
    print_status 0 "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${BACKUP_DIR}.tar.gz"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
    
    PORT_3000=$(netstat -tlnp 2>/dev/null | grep :3000 | wc -l)
    PORT_3001=$(netstat -tlnp 2>/dev/null | grep :3001 | wc -l)
    
    if [ $PORT_3000 -gt 0 ]; then
        print_warning "–ü–æ—Ä—Ç 3000 –∑–∞–Ω—è—Ç:"
        netstat -tlnp | grep :3000
        echo "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N)"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            exit 1
        fi
    fi
    
    if [ $PORT_3001 -gt 0 ]; then
        print_warning "–ü–æ—Ä—Ç 3001 –∑–∞–Ω—è—Ç:"
        netstat -tlnp | grep :3001
        echo "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N)"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            echo "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
            exit 1
        fi
    fi
    
    print_status 0 "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
check_pm2() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    PM2_PROCESSES=$(pm2 list 2>/dev/null | grep -E "(wolmar|main|catalog)" | wc -l)
    
    if [ $PM2_PROCESSES -gt 0 ]; then
        print_warning "–ù–∞–π–¥–µ–Ω—ã PM2 –ø—Ä–æ—Ü–µ—Å—Å—ã:"
        pm2 list | grep -E "(wolmar|main|catalog)"
        echo "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö? (y/N)"
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            pm2 stop all 2>/dev/null || true
            pm2 delete all 2>/dev/null || true
            print_status 0 "PM2 –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        else
            print_warning "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
check_database() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    if [ ! -f config.js ]; then
        print_status 1 "–§–∞–π–ª config.js –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    node -e "
    const { Pool } = require('pg');
    const config = require('./config');
    const pool = new Pool(config.dbConfig);
    pool.query('SELECT 1').then(() => {
      console.log('‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK');
      process.exit(0);
    }).catch(err => {
      console.error('‚ùå –ë–î –æ—à–∏–±–∫–∞:', err.message);
      process.exit(1);
    });
    " && print_status 0 "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞" || {
        print_status 1 "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"
        exit 1
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∫–æ–ª–ª–µ–∫—Ü–∏–π
create_collection_tables() {
    echo "üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∫–æ–ª–ª–µ–∫—Ü–∏–π..."
    
    node -e "
    const { Pool } = require('pg');
    const config = require('./config');
    const pool = new Pool(config.dbConfig);
    
    async function createTables() {
      try {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–π
        await pool.query(\`
          CREATE TABLE IF NOT EXISTS collection_users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(50) UNIQUE NOT NULL,
            email VARCHAR(100) UNIQUE NOT NULL,
            password_hash VARCHAR(255) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          )
        \`);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π
        await pool.query(\`
          CREATE TABLE IF NOT EXISTS user_collections (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES collection_users(id),
            coin_id INTEGER NOT NULL,
            user_condition VARCHAR(10),
            purchase_price DECIMAL(12,2),
            purchase_date DATE,
            notes TEXT,
            predicted_price DECIMAL(12,2),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          )
        \`);
        
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω—ã');
        process.exit(0);
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', err.message);
        process.exit(1);
      }
    }
    
    createTables();
    " && print_status 0 "–¢–∞–±–ª–∏—Ü—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π —Å–æ–∑–¥–∞–Ω—ã" || {
        print_status 1 "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü"
        exit 1
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if [ ! -f package.json ]; then
        print_status 1 "package.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    npm install --production && print_status 0 "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" || {
        print_status 1 "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
        exit 1
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
start_application() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    mkdir -p logs catalog-images catalog-public backup
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º PM2
    pm2 start ecosystem.config.js && print_status 0 "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ" || {
        print_status 1 "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        exit 1
    }
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
    pm2 startup
    pm2 save
    
    print_status 0 "–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
verify_deployment() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    sleep 5
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å PM2
    pm2 status
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
    PORT_3000=$(netstat -tlnp 2>/dev/null | grep :3000 | wc -l)
    PORT_3001=$(netstat -tlnp 2>/dev/null | grep :3001 | wc -l)
    
    if [ $PORT_3000 -gt 0 ]; then
        print_status 0 "–ü–æ—Ä—Ç 3000 –∞–∫—Ç–∏–≤–µ–Ω"
    else
        print_status 1 "–ü–æ—Ä—Ç 3000 –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
    fi
    
    if [ $PORT_3001 -gt 0 ]; then
        print_status 0 "–ü–æ—Ä—Ç 3001 –∞–∫—Ç–∏–≤–µ–Ω"
    else
        print_status 1 "–ü–æ—Ä—Ç 3001 –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
    fi
    
    # –¢–µ—Å—Ç HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    echo "üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."
    
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:3001 | grep -q "200\|404"; then
        print_status 0 "–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç"
    else
        print_warning "–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep -q "200\|404"; then
        print_status 0 "–ö–∞—Ç–∞–ª–æ–≥ –æ—Ç–≤–µ—á–∞–µ—Ç"
    else
        print_warning "–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï WOLMAR PARSER"
    echo "========================================"
    echo ""
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    create_backup
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
    check_ports
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PM2
    check_pm2
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
    check_database
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    create_collection_tables
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    install_dependencies
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    start_application
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É
    verify_deployment
    
    echo ""
    echo "üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!"
    echo "=================================="
    echo ""
    echo "üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:"
    echo "   –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä: http://localhost:3001"
    echo "   –ö–∞—Ç–∞–ª–æ–≥: http://localhost:3000"
    echo ""
    echo "üìã –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "   pm2 status          - —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
    echo "   pm2 logs            - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo "   pm2 restart all     - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
    echo "   pm2 stop all         - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo ""
    echo "üîÑ –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:"
    echo "   ./git-update.sh"
    echo ""
    echo "‚è™ –î–ª—è –æ—Ç–∫–∞—Ç–∞:"
    echo "   ./git-rollback.sh"
    echo ""
    echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
    echo "   pm2 monit           - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "   tail -f logs/*.log  - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
}

# –ó–∞–ø—É—Å–∫
main "$@"

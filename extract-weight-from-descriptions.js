const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Å–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
function extractWeight(description, metal) {
    if (!description || !metal) return null;
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ—Å–∞ –ø–æ—Å–ª–µ –º–µ—Ç–∞–ª–ª–∞
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã: Au 7,78, Au 7.78, Au 7,78–≥, Au 7,78 –≥—Ä, Au 7,78–≥—Ä
    const weightPatterns = [
        new RegExp(`${metal}\\s+(\\d+[,.]\\d+)\\s*(?:–≥|–≥—Ä|–≥—Ä–∞–º–º)?`, 'i'),
        new RegExp(`${metal}\\s+(\\d+[,.]\\d+)`, 'i')
    ];
    
    for (const pattern of weightPatterns) {
        const match = description.match(pattern);
        if (match) {
            // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            const weightStr = match[1].replace(',', '.');
            const weight = parseFloat(weightStr);
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è: –≤–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–ª—è –º–æ–Ω–µ—Ç (0.1 - 1000 –≥—Ä–∞–º–º)
            if (weight >= 0.1 && weight <= 1000) {
                return weight;
            }
        }
    }
    
    return null;
}

async function extractWeightsFromDescriptions() {
    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Å–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π –ª–æ—Ç–æ–≤...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ—Ç—ã –∏–∑ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤ –±–µ–∑ –≤–µ—Å–∞
        const query = `
            SELECT id, coin_description, metal, lot_number, auction_number
            FROM auction_lots 
            WHERE metal IN ('Au', 'Ag', 'Pt', 'Pd')
            AND (weight IS NULL OR weight = 0)
            AND coin_description IS NOT NULL
            ORDER BY id
        `;
        
        const result = await pool.query(query);
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ª–æ—Ç–æ–≤ –∏–∑ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤ –±–µ–∑ –≤–µ—Å–∞`);
        
        let processedCount = 0;
        let updatedCount = 0;
        let errorCount = 0;
        
        for (const lot of result.rows) {
            try {
                const extractedWeight = extractWeight(lot.coin_description, lot.metal);
                
                if (extractedWeight) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    const updateQuery = `
                        UPDATE auction_lots 
                        SET weight = $1 
                        WHERE id = $2
                    `;
                    
                    await pool.query(updateQuery, [extractedWeight, lot.id]);
                    updatedCount++;
                    
                    console.log(`‚úÖ –õ–æ—Ç ${lot.lot_number} (–ê—É–∫—Ü–∏–æ–Ω ${lot.auction_number}): ${lot.metal} ${extractedWeight}–≥`);
                } else {
                    console.log(`‚ö†Ô∏è  –õ–æ—Ç ${lot.lot_number} (–ê—É–∫—Ü–∏–æ–Ω ${lot.auction_number}): –≤–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–∏`);
                }
                
                processedCount++;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –ª–æ—Ç–æ–≤
                if (processedCount % 50 === 0) {
                    console.log(`üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}/${result.rows.length}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedCount}`);
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–∞ ${lot.id}:`, error.message);
                errorCount++;
            }
        }
        
        console.log('\nüéâ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${processedCount}`);
        console.log(`   - –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å –≤–µ—Å–æ–º: ${updatedCount}`);
        console.log(`   - –û—à–∏–±–æ–∫: ${errorCount}`);
        console.log(`   - –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((updatedCount / processedCount) * 100).toFixed(1)}%`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤
        if (updatedCount > 0) {
            console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ª–æ—Ç–æ–≤:');
            const examplesQuery = `
                SELECT lot_number, auction_number, metal, weight, 
                       SUBSTRING(coin_description, 1, 100) as description_preview
                FROM auction_lots 
                WHERE weight IS NOT NULL 
                AND metal IN ('Au', 'Ag', 'Pt', 'Pd')
                ORDER BY id DESC 
                LIMIT 5
            `;
            
            const examples = await pool.query(examplesQuery);
            examples.rows.forEach(lot => {
                console.log(`   –õ–æ—Ç ${lot.lot_number} (–ê—É–∫—Ü–∏–æ–Ω ${lot.auction_number}): ${lot.metal} ${lot.weight}–≥`);
                console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${lot.description_preview}...`);
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –≤–µ—Å–∞:', error);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
extractWeightsFromDescriptions();

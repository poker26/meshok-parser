const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function checkCurrentAuction() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞...');
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–∫—Ü–∏–æ–Ω 2130
        const auction2130Query = `
            SELECT auction_number, COUNT(*) as total_lots
            FROM auction_lots 
            WHERE auction_number = '2130'
            GROUP BY auction_number
        `;
        const result2130 = await pool.query(auction2130Query);
        console.log(`\nüìä –ê—É–∫—Ü–∏–æ–Ω 2130: ${result2130.rows.length > 0 ? result2130.rows[0].total_lots + ' –ª–æ—Ç–æ–≤' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã (–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π)
        const activeAuctionQuery = `
            SELECT 
                auction_number,
                COUNT(*) as total_lots,
                COUNT(CASE WHEN winning_bid IS NULL THEN 1 END) as unsold_lots,
                COUNT(CASE WHEN winning_bid IS NOT NULL THEN 1 END) as sold_lots
            FROM auction_lots 
            WHERE auction_end_date > NOW()
            GROUP BY auction_number
            ORDER BY auction_number DESC
        `;
        const activeResult = await pool.query(activeAuctionQuery);
        console.log(`\nüìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã (–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è > NOW()):`);
        activeResult.rows.forEach(row => {
            console.log(`   –ê—É–∫—Ü–∏–æ–Ω ${row.auction_number}: ${row.total_lots} –ª–æ—Ç–æ–≤ (${row.unsold_lots} –Ω–µ –ø—Ä–æ–¥–∞–Ω–æ, ${row.sold_lots} –ø—Ä–æ–¥–∞–Ω–æ)`);
        });
        
        // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–∫—Ü–∏–æ–Ω 968
        const auction968Query = `
            SELECT 
                auction_number,
                COUNT(*) as total_lots,
                COUNT(CASE WHEN winning_bid IS NULL THEN 1 END) as unsold_lots,
                COUNT(CASE WHEN winning_bid IS NOT NULL THEN 1 END) as sold_lots,
                MIN(auction_end_date) as min_end_date,
                MAX(auction_end_date) as max_end_date
            FROM auction_lots 
            WHERE auction_number = '968'
            GROUP BY auction_number
        `;
        const result968 = await pool.query(auction968Query);
        if (result968.rows.length > 0) {
            const row = result968.rows[0];
            console.log(`\nüìä –ê—É–∫—Ü–∏–æ–Ω 968:`);
            console.log(`   –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: ${row.total_lots}`);
            console.log(`   –ù–µ –ø—Ä–æ–¥–∞–Ω–æ: ${row.unsold_lots}`);
            console.log(`   –ü—Ä–æ–¥–∞–Ω–æ: ${row.sold_lots}`);
            console.log(`   –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${row.min_end_date} - ${row.max_end_date}`);
        }
        
        // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π –∞—É–∫—Ü–∏–æ–Ω
        const latestAuctionQuery = `
            SELECT 
                auction_number,
                COUNT(*) as total_lots,
                COUNT(CASE WHEN winning_bid IS NULL THEN 1 END) as unsold_lots,
                COUNT(CASE WHEN winning_bid IS NOT NULL THEN 1 END) as sold_lots
            FROM auction_lots 
            GROUP BY auction_number
            ORDER BY auction_number DESC
            LIMIT 3
        `;
        const latestResult = await pool.query(latestAuctionQuery);
        console.log(`\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∞—É–∫—Ü–∏–æ–Ω–∞:`);
        latestResult.rows.forEach(row => {
            console.log(`   –ê—É–∫—Ü–∏–æ–Ω ${row.auction_number}: ${row.total_lots} –ª–æ—Ç–æ–≤ (${row.unsold_lots} –Ω–µ –ø—Ä–æ–¥–∞–Ω–æ, ${row.sold_lots} –ø—Ä–æ–¥–∞–Ω–æ)`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    } finally {
        await pool.end();
    }
}

checkCurrentAuction();

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FinalPricePredictor —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏, —á—Ç–æ –∏ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–¥–µ
 */

const FinalPricePredictor = require('./final-price-predictor');

async function testFinalPredictor() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º FinalPricePredictor...');
    
    try {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞
        const predictor = new FinalPricePredictor();
        await predictor.init();
        await predictor.calibrateModel();
        
        console.log('‚úÖ FinalPricePredictor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–µ—Ç—ã 15 —Ä—É–±–ª–µ–π 1897 –≥–æ–¥–∞
        const testLot = {
            metal: 'Au',
            weight: 12.9,
            condition: 'MS63',
            year: 1897,
            letters: '–ê–†',
            coin_description: '15 —Ä—É–±–ª–µ–π 1897 –≥–æ–¥–∞'
        };
        
        console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', testLot);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        const prediction = await predictor.predictPrice(testLot);
        
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log(`  predictedPrice: ${prediction.predictedPrice}`);
        console.log(`  metalValue: ${prediction.metalValue}`);
        console.log(`  numismaticPremium: ${prediction.numismaticPremium}`);
        console.log(`  conditionMultiplier: ${prediction.conditionMultiplier}`);
        console.log(`  confidence: ${prediction.confidence}`);
        console.log(`  method: ${prediction.method}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        console.log('\nüîç –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:');
        const calibrationKey = `${testLot.condition}_${testLot.metal}`;
        console.log(`  –ö–ª—é—á –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: ${calibrationKey}`);
        console.log(`  –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞:`, predictor.calibrationTable[calibrationKey]);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        console.log('\nüìà –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏:');
        Object.keys(predictor.calibrationTable).forEach(key => {
            const cal = predictor.calibrationTable[key];
            console.log(`  ${key}: sampleSize=${cal.sampleSize}, medianPrice=${cal.medianPrice}`);
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    }
}

testFinalPredictor();

const CatalogParser = require('./catalog-parser.js');
const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function processWeightedLots() {
    const parser = new CatalogParser();
    const client = await pool.connect();
    
    try {
        await parser.init();
        
        console.log('üîç –ü–æ–∏—Å–∫ –ª–æ—Ç–æ–≤ —Å –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–ª–ª–∞–º–∏ –∏ —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Å–∞...\n');

        // –ò—â–µ–º –ª–æ—Ç—ã —Å –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–ª–ª–∞–º–∏ –∏ –≤–µ—Å–æ–º
        const query = `
            SELECT id, coin_description, auction_number, lot_number
            FROM auction_lots 
            WHERE (coin_description ILIKE '%Au%' OR coin_description ILIKE '%Ag%' OR coin_description ILIKE '%Pt%' OR coin_description ILIKE '%Pd%')
            AND (coin_description ILIKE '%–≥—Ä%' OR coin_description ILIKE '%oz%' OR coin_description ILIKE '%–≤–µ—Å%')
            ORDER BY id DESC
            LIMIT 10
        `;
        
        const result = await client.query(query);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤ —Å –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–ª–ª–∞–º–∏ –∏ –≤–µ—Å–æ–º: ${result.rows.length}\n`);
        
        for (const [index, row] of result.rows.entries()) {
            console.log(`\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ—Ç–∞ ${index + 1} ---`);
            console.log(`ID: ${row.id}, –ê—É–∫—Ü–∏–æ–Ω: ${row.auction_number}, –õ–æ—Ç: ${row.lot_number}`);
            console.log(`–û–ø–∏—Å–∞–Ω–∏–µ: ${row.coin_description.substring(0, 100)}...`);
            
            // –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
            const parsedData = parser.parseLotDescription(row.coin_description);
            
            console.log(`\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:`);
            console.log(`  - –ú–µ—Ç–∞–ª–ª: ${parsedData.metal || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
            console.log(`  - –í–µ—Å –º–æ–Ω–µ—Ç—ã: ${parsedData.coin_weight || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}–≥`);
            console.log(`  - –ü—Ä–æ–±–∞: ${parsedData.fineness || '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
            console.log(`  - –ß–∏—Å—Ç—ã–π –º–µ—Ç–∞–ª–ª: ${parsedData.pure_metal_weight || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}–≥`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–µ—Å
            if (parsedData.coin_weight) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –≤–µ—Å: ${parsedData.coin_weight}–≥`);
            } else {
                console.log(`‚ùå –í–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ—Ç–æ–≤:', error);
    } finally {
        client.release();
        await pool.end();
        await parser.close();
    }
}

processWeightedLots();



#!/bin/bash

# –ë—ã—Å—Ç—Ä–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã

echo "üîß –ë–´–°–¢–†–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –û–°–ù–û–í–ù–û–ì–û –°–ê–ô–¢–ê..."
echo "========================================="

cd /var/www/wolmar-parser

echo "üìä –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ server.js..."
echo "======================================="

echo "üìã –ü–æ–∏—Å–∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –≤ server.js:"
grep -n "app.get.*api" server.js || echo "API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

echo ""
echo "üìä –≠–¢–ê–ü 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤..."
echo "================================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
if ! grep -q "app.get.*api.*auctions" server.js; then
    echo "‚ùå API –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º"
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
    cat > temp_api_endpoints.js << 'EOF'
// API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞
app.get('/api/auctions', async (req, res) => {
    try {
        console.log('üìä API: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤');
        const query = `
            SELECT 
                auction_number,
                COUNT(*) as lots_count,
                MIN(auction_end_date) as start_date,
                MAX(auction_end_date) as end_date,
                SUM(winning_bid) as total_value,
                AVG(winning_bid) as avg_bid,
                MAX(winning_bid) as max_bid,
                MIN(winning_bid) as min_bid
            FROM auction_lots 
            WHERE auction_number IS NOT NULL
            GROUP BY auction_number
            ORDER BY auction_number DESC
        `;
        
        const result = await pool.query(query);
        console.log(`üìä API: –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –∞—É–∫—Ü–∏–æ–Ω–æ–≤`);
        res.json(result.rows);
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—É–∫—Ü–∏–æ–Ω–∞—Ö' });
    }
});

app.get('/api/auctions/:auctionNumber/lots', async (req, res) => {
    try {
        const { auctionNumber } = req.params;
        const { page = 1, limit = 20, search, metal, condition, year, minPrice, maxPrice } = req.query;
        
        console.log(`üìä API: –ó–∞–ø—Ä–æ—Å –ª–æ—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        
        const offset = (page - 1) * limit;
        let whereClause = 'WHERE auction_number = $1';
        const queryParams = [auctionNumber];
        let paramCount = 1;
        
        if (search) {
            paramCount++;
            whereClause += ` AND coin_description ILIKE $${paramCount}`;
            queryParams.push(`%${search}%`);
        }
        
        if (metal) {
            paramCount++;
            whereClause += ` AND metal = $${paramCount}`;
            queryParams.push(metal);
        }
        
        if (condition) {
            paramCount++;
            whereClause += ` AND condition = $${paramCount}`;
            queryParams.push(condition);
        }
        
        if (year) {
            paramCount++;
            whereClause += ` AND year = $${paramCount}`;
            queryParams.push(year);
        }
        
        if (minPrice) {
            paramCount++;
            whereClause += ` AND winning_bid >= $${paramCount}`;
            queryParams.push(parseFloat(minPrice));
        }
        
        if (maxPrice) {
            paramCount++;
            whereClause += ` AND winning_bid <= $${paramCount}`;
            queryParams.push(parseFloat(maxPrice));
        }
        
        const query = `
            SELECT 
                id, lot_number, coin_description, avers_image_url, revers_image_url,
                winner_login, winning_bid, auction_end_date, bids_count,
                metal, condition, year
            FROM auction_lots 
            ${whereClause}
            ORDER BY lot_number::int
            LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}
        `;
        
        queryParams.push(parseInt(limit), offset);
        
        const result = await pool.query(query, queryParams);
        console.log(`üìä API: –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ª–æ—Ç–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        res.json(result.rows);
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–∞—Ö' });
    }
});

app.get('/api/lots/:id', async (req, res) => {
    try {
        const { id } = req.params;
        console.log(`üìä API: –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞ ${id}`);
        const query = `
            SELECT 
                id, lot_number, auction_number, coin_description,
                avers_image_url, revers_image_url, winner_login,
                winning_bid, auction_end_date, bids_count,
                metal, condition, year
            FROM auction_lots 
            WHERE id = $1
        `;
        
        const result = await pool.query(query, [id]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(result.rows[0]);
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–µ' });
    }
});

app.get('/api/auctions/:auctionNumber/stats', async (req, res) => {
    try {
        const { auctionNumber } = req.params;
        console.log(`üìä API: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        const query = `
            SELECT 
                COUNT(*) as total_lots,
                SUM(winning_bid) as total_value,
                AVG(winning_bid) as avg_bid,
                MAX(winning_bid) as max_bid,
                MIN(winning_bid) as min_bid,
                COUNT(DISTINCT winner_login) as unique_winners,
                COUNT(DISTINCT metal) as unique_metals,
                COUNT(DISTINCT condition) as unique_conditions
            FROM auction_lots 
            WHERE auction_number = $1
        `;
        
        const result = await pool.query(query, [auctionNumber]);
        res.json(result.rows[0]);
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞' });
    }
});

app.get('/api/filters', async (req, res) => {
    try {
        const { auctionNumber } = req.query;
        console.log(`üìä API: –ó–∞–ø—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber || '–≤—Å–µ—Ö'}`);
        let whereClause = '';
        const queryParams = [];
        
        if (auctionNumber) {
            whereClause = 'WHERE auction_number = $1';
            queryParams.push(auctionNumber);
        }
        
        const query = `
            SELECT 
                metal,
                condition,
                year
            FROM auction_lots 
            ${whereClause}
            GROUP BY metal, condition, year
            ORDER BY metal, condition, year
        `;
        
        const result = await pool.query(query, queryParams);
        
        const filters = {
            metals: [...new Set(result.rows.map(row => row.metal).filter(Boolean))],
            conditions: [...new Set(result.rows.map(row => row.condition).filter(Boolean))],
            years: [...new Set(result.rows.map(row => row.year).filter(Boolean))].sort()
        };
        
        res.json(filters);
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤' });
    }
});
EOF

    echo "‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã"
else
    echo "‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
fi

echo ""
echo "üìä –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ API –≤ server.js..."
echo "================================================"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ server.js
if ! grep -q "app.get.*api.*auctions" server.js; then
    echo "‚ùå API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ server.js"
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    cp server.js server.js.backup
    
    # –î–æ–±–∞–≤–ª—è–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –ø–µ—Ä–µ–¥ catch-all route
    echo "üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –≤ server.js..."
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å catch-all route
    CATCH_ALL_LINE=$(grep -n "app.get('*'" server.js | head -1 | cut -d: -f1)
    
    if [ -n "$CATCH_ALL_LINE" ]; then
        echo "üìã –ù–∞–π–¥–µ–Ω–∞ catch-all route –Ω–∞ —Å—Ç—Ä–æ–∫–µ $CATCH_ALL_LINE"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π server.js —Å API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
        head -n $((CATCH_ALL_LINE - 1)) server.js > temp_server.js
        cat temp_api_endpoints.js >> temp_server.js
        tail -n +$CATCH_ALL_LINE server.js >> temp_server.js
        
        mv temp_server.js server.js
        echo "‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ server.js"
    else
        echo "‚ùå Catch-all route –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
else
    echo "‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ server.js"
fi

echo ""
echo "üìä –≠–¢–ê–ü 4: –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
echo "===================================="

rm -f temp_api_endpoints.js

echo "‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã"

echo ""
echo "üìä –≠–¢–ê–ü 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ server.js..."
echo "======================================="

echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ server.js:"
node -c server.js 2>&1

if [ $? -eq 0 ]; then
    echo "‚úÖ server.js —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ server.js"
    echo "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
    cp server.js.backup server.js
    exit 1
fi

echo ""
echo "üìä –≠–¢–ê–ü 6: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞..."
echo "====================================="

pm2 restart wolmar-parser

if [ $? -eq 0 ]; then
    echo "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞"
    exit 1
fi

echo ""
echo "‚è≥ –≠–¢–ê–ü 7: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
echo "============================="

sleep 5

echo ""
echo "üìä –≠–¢–ê–ü 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã API..."
echo "=============================="

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞—É–∫—Ü–∏–æ–Ω–æ–≤:"
curl -s http://localhost:3001/api/auctions | jq '.[0:3]' 2>/dev/null || curl -s http://localhost:3001/api/auctions | head -20

echo ""
echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ñ–∏–ª—å—Ç—Ä–æ–≤:"
curl -s http://localhost:3001/api/filters | jq . 2>/dev/null || curl -s http://localhost:3001/api/filters

echo ""
echo "üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞:"
curl -s http://46.173.19.68:3001/api/auctions | jq '.[0:3]' 2>/dev/null || curl -s http://46.173.19.68:3001/api/auctions | head -20

echo ""
echo "üìã –õ–æ–≥–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞:"
pm2 logs wolmar-parser --lines 10

echo ""
echo "‚úÖ –ë–´–°–¢–†–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –û–°–ù–û–í–ù–û–ì–û –°–ê–ô–¢–ê –ó–ê–í–ï–†–®–ï–ù–û!"
echo "================================================="
echo "üåê –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç: http://46.173.19.68:3001"
echo "üåê –ö–∞—Ç–∞–ª–æ–≥ –º–æ–Ω–µ—Ç: http://46.173.19.68:3000"
echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: pm2 status"
echo "üìã –õ–æ–≥–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞: pm2 logs wolmar-parser"

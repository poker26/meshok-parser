const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
const config = require('./config');

const pool = new Pool(config.dbConfig);

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
function getProgressFilePath(auctionNumber) {
    return path.join(__dirname, `predictions_progress_${auctionNumber}.json`);
}

function saveProgress(auctionNumber, currentIndex, totalLots, processedCount, errorCount) {
    const progress = {
        auctionNumber,
        currentIndex,
        totalLots,
        processedCount,
        errorCount,
        lastUpdate: new Date().toISOString()
    };
    
    const filePath = getProgressFilePath(auctionNumber);
    fs.writeFileSync(filePath, JSON.stringify(progress, null, 2));
    console.log(`üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${currentIndex}/${totalLots} (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}, –æ—à–∏–±–æ–∫: ${errorCount})`);
}

function loadProgress(auctionNumber) {
    const filePath = getProgressFilePath(auctionNumber);
    
    if (!fs.existsSync(filePath)) {
        return null;
    }
    
    try {
        const data = fs.readFileSync(filePath, 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        return null;
    }
}

function clearProgress(auctionNumber) {
    const filePath = getProgressFilePath(auctionNumber);
    
    if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log('üóëÔ∏è –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω');
    }
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
const ImprovedPredictionsGenerator = require('./improved-predictions-generator');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
async function generatePredictionsWithProgress(auctionNumber, startFromIndex = null) {
    console.log(`üîÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
    let progress = null;
    if (startFromIndex === null) {
        progress = loadProgress(auctionNumber);
        if (progress) {
            startFromIndex = progress.currentIndex;
            console.log(`üìÇ –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏: ${startFromIndex}`);
        }
    }

    const generator = new ImprovedPredictionsGenerator();
    
    try {
        await generator.init();
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–∞
        const lotsResult = await pool.query(`
            SELECT id, lot_number, condition, metal, weight, year, letters, winning_bid, coin_description, auction_number
            FROM auction_lots 
            WHERE auction_number = $1
            ORDER BY lot_number
        `, [auctionNumber]);
        
        const lots = lotsResult.rows;
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${lots.length} –ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è`);
        
        if (lots.length === 0) {
            console.log('‚ùå –õ–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        const startIndex = startFromIndex || 0;
        const totalLots = lots.length;
        let processedCount = 0;
        let errorCount = 0;
        
        console.log(`üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞: ${startIndex}`);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ—Ç—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        for (let i = startIndex; i < totalLots; i++) {
            const lot = lots[i];
            console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ—Ç ${i + 1}/${totalLots}: ${lot.lot_number}`);
            
            try {
                const prediction = await generator.predictPrice(lot);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await pool.query(`
                    INSERT INTO lot_price_predictions (lot_id, predicted_price, metal_value, numismatic_premium, confidence_score, prediction_method, sample_size)
                    VALUES ($1, $2, $3, $4, $5, $6, $7)
                    ON CONFLICT (lot_id) DO UPDATE SET
                        predicted_price = EXCLUDED.predicted_price,
                        metal_value = EXCLUDED.metal_value,
                        numismatic_premium = EXCLUDED.numismatic_premium,
                        confidence_score = EXCLUDED.confidence_score,
                        prediction_method = EXCLUDED.prediction_method,
                        sample_size = EXCLUDED.sample_size,
                        created_at = NOW();
                `, [
                    prediction.lot_id,
                    prediction.predicted_price,
                    prediction.metal_value,
                    prediction.numismatic_premium,
                    prediction.confidence_score,
                    prediction.prediction_method,
                    prediction.sample_size
                ]);
                
                processedCount++;
                console.log(`‚úÖ –õ–æ—Ç ${lot.lot_number}: –ø—Ä–æ–≥–Ω–æ–∑ ${prediction.predicted_price || '–Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω'}`);
                
            } catch (error) {
                errorCount++;
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ—Ç–∞ ${lot.lot_number}:`, error.message);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ª–æ—Ç–æ–≤
            if ((i + 1) % 10 === 0 || i === totalLots - 1) {
                saveProgress(auctionNumber, i + 1, totalLots, processedCount, errorCount);
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        console.log(`üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
        console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedCount}, –û—à–∏–±–æ–∫: ${errorCount}`);
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        clearProgress(auctionNumber);
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', error);
    } finally {
        await generator.close();
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...');

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        const args = process.argv.slice(2);
        let auctionNumber, startFromIndex = null;
        
        if (args.length > 0) {
            auctionNumber = parseInt(args[0]);
            if (isNaN(auctionNumber)) {
                console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node generate-predictions-with-progress.js [–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞] [—Å—Ç–∞—Ä—Ç–æ–≤—ã–π_–∏–Ω–¥–µ–∫—Å]');
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç (—Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å)
            if (args.length > 1) {
                startFromIndex = parseInt(args[1]);
                if (isNaN(startFromIndex)) {
                    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ');
                    return;
                }
                console.log(`üéØ –ó–∞–ø—É—Å–∫ —Å –∏–Ω–¥–µ–∫—Å–∞: ${startFromIndex}`);
            }
        } else {
            console.log('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞');
            console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node generate-predictions-with-progress.js [–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞] [—Å—Ç–∞—Ä—Ç–æ–≤—ã–π_–∏–Ω–¥–µ–∫—Å]');
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
        await generatePredictionsWithProgress(auctionNumber, startFromIndex);
        
        console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main();
}

module.exports = {
    generatePredictionsWithProgress,
    getProgressFilePath,
    loadProgress,
    clearProgress
};

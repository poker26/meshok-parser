const RobustPredictionsGenerator = require('./robust-predictions-generator');

async function testPredictionLogic() {
    const generator = new RobustPredictionsGenerator();
    try {
        await generator.init();
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ—Ç 9
        const testLot = {
            id: 57505,
            lot_number: '9',
            condition: 'MS61',
            metal: 'Au',
            year: '1897',
            letters: '–ê–ì',
            coin_description: '15 —Ä—É–±–ª–µ–π. –°–° 1897–≥. –ê–ì. Au. R | –í —Å–ª–∞–±–µ NRG.',
            auction_number: '968',
            weight: null
        };
        
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ—Ç–∞ 9...');
        console.log(`üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${testLot.condition}, ${testLot.metal}, ${testLot.year}, ${testLot.letters}`);
        
        const prediction = await generator.predictPrice(testLot);
        
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:');
        console.log(`  predicted_price (raw): ${prediction.predicted_price}`);
        console.log(`  predicted_price (type): ${typeof prediction.predicted_price}`);
        console.log(`  predicted_price (isNaN): ${isNaN(prediction.predicted_price)}`);
        console.log(`  predicted_price (isFinite): ${isFinite(prediction.predicted_price)}`);
        
        const price = (prediction.predicted_price && !isNaN(parseFloat(prediction.predicted_price))) ? parseFloat(prediction.predicted_price).toFixed(2) + '‚ÇΩ' : '–ù–µ—Ç';
        console.log(`  –ü—Ä–æ–≥–Ω–æ–∑: ${price}`);
        console.log(`  –ú–µ—Ç–æ–¥: ${prediction.prediction_method}`);
        console.log(`  –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏: ${prediction.sample_size}`);
        console.log(`  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(prediction.confidence_score * 100).toFixed(1)}%`);
        console.log(`  –°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ç–∞–ª–ª–∞: ${prediction.metal_value.toFixed(2)}‚ÇΩ`);
        console.log(`  –ù—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–µ–º–∏—è: ${prediction.numismatic_premium ? prediction.numismatic_premium.toFixed(2) + '‚ÇΩ' : 'N/A'}`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    } finally {
        await generator.close();
    }
}

testPredictionLogic();

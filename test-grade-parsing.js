const { Client } = require('pg');

const dbConfig = {
    user: 'postgres.xkwgspqwebfeteoblayu',        
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',   
    password: 'Gopapopa326+',    
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π (–∫–∞–∫ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –ø–∞—Ä—Å–µ—Ä–µ)
function extractConditionWithGrade(conditionText) {
    if (!conditionText) return null;
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    let condition = conditionText.trim();
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –≥—Ä–∞–¥–∞—Ü–∏–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä "MS 64"), –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö
    const spaceMatch = condition.match(/^([A-Z]{2,3})\s+([0-9]{2,3})$/);
    if (spaceMatch) {
        condition = spaceMatch[1] + spaceMatch[2]; // "MS 64" -> "MS64"
    }
    
    return condition;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
const testConditions = [
    'MS 61',    // –° –ø—Ä–æ–±–µ–ª–æ–º
    'MS 64',    // –° –ø—Ä–æ–±–µ–ª–æ–º
    'XF 45',    // –° –ø—Ä–æ–±–µ–ª–æ–º
    'AU 58',    // –° –ø—Ä–æ–±–µ–ª–æ–º
    'MS61',     // –ë–µ–∑ –ø—Ä–æ–±–µ–ª–∞
    'MS64',     // –ë–µ–∑ –ø—Ä–æ–±–µ–ª–∞
    'XF45',     // –ë–µ–∑ –ø—Ä–æ–±–µ–ª–∞
    'MS',       // –¢–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    'AU',       // –¢–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    'UNC',      // –¢–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    'MS 64RB',  // –° –ø—Ä–æ–±–µ–ª–æ–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    'XF 45BN',  // –° –ø—Ä–æ–±–µ–ª–æ–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    'MS64RB',   // –ë–µ–∑ –ø—Ä–æ–±–µ–ª–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    'AU/UNC',   // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    'VF/XF',    // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    'XF+',      // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø–ª—é—Å–æ–º
    'VF-',      // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å –º–∏–Ω—É—Å–æ–º
];

async function testGradeParsing() {
    const client = new Client(dbConfig);
    
    try {
        await client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
        
        console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π...');
        console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:');
        
        testConditions.forEach((testCondition, index) => {
            const result = extractConditionWithGrade(testCondition);
            console.log(`${index + 1}. "${testCondition}" -> "${result}"`);
        });
        
        // –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
        console.log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ª–æ—Ç–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const testLotsQuery = `
            SELECT id, lot_number, auction_number, condition, metal, year, coin_description
            FROM auction_lots 
            WHERE metal = 'Au' 
            AND year = 1897
            AND coin_description ILIKE '%15 —Ä—É–±–ª–µ–π%'
            ORDER BY auction_number DESC, lot_number
            LIMIT 5;
        `;
        const testLotsResult = await client.query(testLotsQuery);
        
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${testLotsResult.rows.length} –ª–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
        
        testLotsResult.rows.forEach((lot, index) => {
            console.log(`\n${index + 1}. –õ–æ—Ç ${lot.lot_number} (–ê—É–∫—Ü–∏–æ–Ω ${lot.auction_number}):`);
            console.log(`   –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: "${lot.condition}"`);
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏
            const simulatedConditions = [
                lot.condition + ' 61',  // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∞—Ü–∏—é —Å –ø—Ä–æ–±–µ–ª–æ–º
                lot.condition + ' 64',  // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∞—Ü–∏—é —Å –ø—Ä–æ–±–µ–ª–æ–º
                lot.condition + '61',   // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∞—Ü–∏—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞
                lot.condition + '64',   // –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∞—Ü–∏—é –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞
            ];
            
            simulatedConditions.forEach(simCondition => {
                const processed = extractConditionWithGrade(simCondition);
                console.log(`   "${simCondition}" -> "${processed}"`);
            });
        });
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
        console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏
        const testUpdates = [
            { id: testLotsResult.rows[0]?.id, oldCondition: 'MS', newCondition: 'MS 61' },
            { id: testLotsResult.rows[1]?.id, oldCondition: 'AU', newCondition: 'AU 58' },
        ];
        
        for (const update of testUpdates) {
            if (update.id) {
                console.log(`\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞ ID ${update.id}:`);
                console.log(`   –ë—ã–ª–æ: "${update.oldCondition}"`);
                console.log(`   –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${update.newCondition}"`);
                
                const processed = extractConditionWithGrade(update.newCondition);
                console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: "${processed}"`);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É
                console.log(`   –ë—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: "${processed}"`);
            }
        }
        
        console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        console.log('\nüìä –í—ã–≤–æ–¥—ã:');
        console.log('1. –§—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –≥—Ä–∞–¥–∞—Ü–∏–µ–π');
        console.log('2. –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        console.log('3. –§—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (AU/UNC, XF+ –∏ —Ç.–¥.)');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    } finally {
        await client.end();
        console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    }
}

testGradeParsing();

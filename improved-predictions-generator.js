const { Client } = require('pg');
const config = require('./config');

class ImprovedPredictionsGenerator {
    constructor() {
        this.dbClient = null;
        this.preciousMetalPrices = {
            'Au': 7500, // –ó–æ–ª–æ—Ç–æ –∑–∞ –≥—Ä–∞–º–º
            'Ag': 100,  // –°–µ—Ä–µ–±—Ä–æ –∑–∞ –≥—Ä–∞–º–º
            'Pt': 3000, // –ü–ª–∞—Ç–∏–Ω–∞ –∑–∞ –≥—Ä–∞–º–º
            'Pd': 2000  // –ü–∞–ª–ª–∞–¥–∏–π –∑–∞ –≥—Ä–∞–º–º
        };
        this.metalPurities = {
            'Au': 0.9,  // 90% –¥–ª—è –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç
            'Ag': 0.9,  // 90% –¥–ª—è —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –º–æ–Ω–µ—Ç
            'Pt': 0.95, // 95% –¥–ª—è –ø–ª–∞—Ç–∏–Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç
            'Pd': 0.95  // 95% –¥–ª—è –ø–∞–ª–ª–∞–¥–∏–µ–≤—ã—Ö –º–æ–Ω–µ—Ç
        };
    }

    async init() {
        this.dbClient = new Client(config.dbConfig);
        await this.dbClient.connect();
        console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    async close() {
        if (this.dbClient) {
            await this.dbClient.end();
            console.log('üßπ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
        }
    }

    // –ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ª–æ—Ç–æ–≤
    async findSimilarLots(lot) {
        const { condition, metal, year, letters, coin_description } = lot;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–∏–Ω–∞–ª –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–Ω–µ—Ç—ã
        const denominationMatch = coin_description.match(/(\d+)\s*—Ä—É–±–ª–µ–π?/i);
        const currentDenomination = denominationMatch ? denominationMatch[1] : null;
        
        // –ò—â–µ–º –ª–æ—Ç—ã —Å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ + –Ω–æ–º–∏–Ω–∞–ª
        let query = `
            SELECT 
                id,
                lot_number,
                auction_number,
                winning_bid,
                weight,
                coin_description,
                auction_end_date
            FROM auction_lots 
            WHERE condition = $1 
                AND metal = $2 
                AND year = $3 
                AND letters = $4
                AND winning_bid IS NOT NULL 
                AND winning_bid > 0
                AND id != $5
        `;
        
        const params = [condition, metal, year, letters, lot.id];
        
        // –ï—Å–ª–∏ –Ω–æ–º–∏–Ω–∞–ª –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —É—Å–ª–æ–≤–∏–µ –ø–æ–∏—Å–∫–∞
        if (currentDenomination) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —Å–ª–æ–≤
            query += ` AND coin_description ~ $${params.length + 1}`;
            params.push(`\\m${currentDenomination}\\s*—Ä—É–±–ª–µ–π?\\M`);
        }
        
        query += ` ORDER BY auction_end_date DESC`;
        
        const result = await this.dbClient.query(query, params);
        
        return result.rows;
    }

    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–µ—Ç–∞–ª–ª–∞ –Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    calculateMetalValue(metal, weight) {
        if (!weight || weight <= 0 || !this.preciousMetalPrices[metal]) {
            return 0;
        }
        const pricePerGram = this.preciousMetalPrices[metal];
        const purity = this.metalPurities[metal] || 1;
        return pricePerGram * weight * purity;
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    async predictPrice(lot) {
        const similarLots = await this.findSimilarLots(lot);
        
        console.log(`üîç –õ–æ—Ç ${lot.lot_number}: –Ω–∞–π–¥–µ–Ω–æ ${similarLots.length} –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ª–æ—Ç–æ–≤`);
        
        // –°–ª—É—á–∞–π 1: –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –ª–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        if (similarLots.length === 0) {
            console.log(`   ‚ùå –ê–Ω–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è`);
            return {
                predicted_price: null,
                metal_value: this.calculateMetalValue(lot.metal, lot.weight),
                numismatic_premium: null,
                confidence_score: 0,
                prediction_method: 'no_similar_lots',
                sample_size: 0
            };
        }
        
        // –°–ª—É—á–∞–π 2: –ù–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –ª–æ—Ç
        if (similarLots.length === 1) {
            const similarLot = similarLots[0];
            const currentMetalValue = this.calculateMetalValue(lot.metal, lot.weight);
            const similarMetalValue = this.calculateMetalValue(similarLot.metal, similarLot.weight);
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É –≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–µ—Ç–∞–ª–ª–∞
            let predictedPrice = similarLot.winning_bid;
            if (currentMetalValue > 0 && similarMetalValue > 0) {
                const metalValueDifference = currentMetalValue - similarMetalValue;
                predictedPrice = similarLot.winning_bid + metalValueDifference;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
                if (isNaN(predictedPrice) || !isFinite(predictedPrice)) {
                    predictedPrice = similarLot.winning_bid; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∞–Ω–∞–ª–æ–≥–∞ –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                    console.log(`   ‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–µ—Ç–∞–ª–ª–∞ –ø—Ä–∏–≤–µ–ª–∞ –∫ NaN, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∞–Ω–∞–ª–æ–≥–∞: ${similarLot.winning_bid}`);
                } else {
                    console.log(`   üìä –û–¥–∏–Ω –∞–Ω–∞–ª–æ–≥: ${similarLot.winning_bid} ‚Üí ${predictedPrice} (–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–µ—Ç–∞–ª–ª–∞: ${metalValueDifference.toFixed(0)})`);
                }
            } else {
                console.log(`   üìä –û–¥–∏–Ω –∞–Ω–∞–ª–æ–≥: ${similarLot.winning_bid} ‚Üí ${predictedPrice} (–±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –º–µ—Ç–∞–ª–ª–∞)`);
            }
            
            return {
                predicted_price: Math.round(predictedPrice),
                metal_value: currentMetalValue,
                numismatic_premium: Math.round(predictedPrice - currentMetalValue),
                confidence_score: 0.6, // –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–Ω–∞–ª–æ–≥–∞
                prediction_method: 'single_similar_lot',
                sample_size: 1
            };
        }
        
        // –°–ª—É—á–∞–π 3: –ù–∞–π–¥–µ–Ω–æ –¥–≤–∞ –∏ –±–æ–ª–µ–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ª–æ—Ç–æ–≤
        console.log(`   üìà –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏ (${similarLots.length}) - –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å`);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const prices = similarLots.map(lot => lot.winning_bid);
        const mean = prices.reduce((sum, price) => sum + price, 0) / prices.length;
        const median = prices.sort((a, b) => a - b)[Math.floor(prices.length / 2)];
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞–Ω—É –∫–∞–∫ –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤—É—é –∫ –≤—ã–±—Ä–æ—Å–∞–º
        let predictedPrice = median;
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ç–∞–ª–ª–∞ –¥–ª—è –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–ª–ª–æ–≤
        if (this.preciousMetalPrices[lot.metal] && lot.weight) {
            const currentMetalValue = this.calculateMetalValue(lot.metal, lot.weight);
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ç–∞–ª–ª–∞ –¥–ª—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ª–æ—Ç–æ–≤
            const avgSimilarMetalValue = similarLots.reduce((sum, similarLot) => {
                return sum + this.calculateMetalValue(similarLot.metal, similarLot.weight);
            }, 0) / similarLots.length;
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É –≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–µ—Ç–∞–ª–ª–∞
            const metalValueDifference = currentMetalValue - avgSimilarMetalValue;
            predictedPrice = median + metalValueDifference;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
            if (isNaN(predictedPrice) || !isFinite(predictedPrice)) {
                predictedPrice = median; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞–Ω—É –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                console.log(`   ‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–µ—Ç–∞–ª–ª–∞ –ø—Ä–∏–≤–µ–ª–∞ –∫ NaN, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞–Ω—É: ${median}`);
            } else {
                console.log(`   üîß –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–µ—Ç–∞–ª–ª–∞: ${metalValueDifference.toFixed(0)}`);
            }
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏ –∏ —Ä–∞–∑–±—Ä–æ—Å–∞ —Ü–µ–Ω
        const variance = prices.reduce((sum, price) => sum + Math.pow(price - mean, 2), 0) / prices.length;
        const coefficientOfVariation = Math.sqrt(variance) / mean;
        
        let confidence = Math.min(0.95, 0.5 + (similarLots.length / 20)); // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if (coefficientOfVariation > 0.5) {
            confidence *= 0.8; // –°–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –±–æ–ª—å—à–æ–º —Ä–∞–∑–±—Ä–æ—Å–µ
        }
        
        console.log(`   üìä –ú–µ–¥–∏–∞–Ω–∞: ${median}, –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: ${predictedPrice}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(confidence * 100).toFixed(1)}%`);
        
        return {
            predicted_price: Math.round(predictedPrice),
            metal_value: this.calculateMetalValue(lot.metal, lot.weight),
            numismatic_premium: Math.round(predictedPrice - this.calculateMetalValue(lot.metal, lot.weight)),
            confidence_score: confidence,
            prediction_method: 'statistical_model',
            sample_size: similarLots.length
        };
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞
    async generatePredictionsForAuction(auctionNumber) {
        console.log(`\nüèÜ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}:`);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ—Ç—ã –∞—É–∫—Ü–∏–æ–Ω–∞
        const lotsResult = await this.dbClient.query(`
            SELECT id, lot_number, condition, metal, weight, year, letters, winning_bid, coin_description
            FROM auction_lots 
            WHERE auction_number = $1
            ORDER BY lot_number
        `, [auctionNumber]);
        
        const lots = lotsResult.rows;
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${lots.length} –ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è`);
        
        const predictions = [];
        let processedCount = 0;
        
        for (const lot of lots) {
            try {
                const prediction = await this.predictPrice(lot);
                predictions.push({
                    lot_id: lot.id,
                    ...prediction
                });
                
                processedCount++;
                if (processedCount % 10 === 0) {
                    console.log(`   ‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount}/${lots.length} –ª–æ—Ç–æ–≤`);
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ª–æ—Ç–∞ ${lot.lot_number}:`, error.message);
            }
        }
        
        console.log(`\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${predictions.length} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
        for (const prediction of predictions) {
            try {
                await this.dbClient.query(`
                    INSERT INTO lot_price_predictions (lot_id, predicted_price, metal_value, numismatic_premium, confidence_score, prediction_method, sample_size)
                    VALUES ($1, $2, $3, $4, $5, $6, $7)
                    ON CONFLICT (lot_id) DO UPDATE SET
                        predicted_price = EXCLUDED.predicted_price,
                        metal_value = EXCLUDED.metal_value,
                        numismatic_premium = EXCLUDED.numismatic_premium,
                        confidence_score = EXCLUDED.confidence_score,
                        prediction_method = EXCLUDED.prediction_method,
                        sample_size = EXCLUDED.sample_size,
                        created_at = NOW();
                `, [
                    prediction.lot_id,
                    prediction.predicted_price,
                    prediction.metal_value,
                    prediction.numismatic_premium,
                    prediction.confidence_score,
                    prediction.prediction_method,
                    prediction.sample_size
                ]);
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –ª–æ—Ç–∞ ${prediction.lot_id}:`, error.message);
            }
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const withPredictions = predictions.filter(p => p.predicted_price !== null).length;
        const withoutPredictions = predictions.filter(p => p.predicted_price === null).length;
        
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${predictions.length} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        console.log(`   üìä –° –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏: ${withPredictions}, –ë–µ–∑ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: ${withoutPredictions}`);
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    async generatePredictions() {
        console.log('üîÆ –ì–ï–ù–ï–†–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ù–´–• –ü–†–û–ì–ù–û–ó–û–í');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π (—Å–∞–º—ã–π –Ω–æ–≤—ã–π) –∞—É–∫—Ü–∏–æ–Ω
        const currentAuction = await this.dbClient.query(`
            SELECT DISTINCT auction_number
            FROM auction_lots
            ORDER BY auction_number DESC
            LIMIT 1
        `);
        
        if (currentAuction.rows.length === 0) {
            console.log('‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }
        
        const auctionNumber = currentAuction.rows[0].auction_number;
        console.log(`üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        
        await this.generatePredictionsForAuction(auctionNumber);
        
        console.log('\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    }
}

// –ó–∞–ø—É—Å–∫
async function main() {
    const generator = new ImprovedPredictionsGenerator();
    try {
        await generator.init();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        const args = process.argv.slice(2);
        if (args.length > 0) {
            const auctionNumber = args[0];
            console.log(`üéØ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
            await generator.generatePredictionsForAuction(auctionNumber);
        } else {
            await generator.generatePredictions();
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:', error);
    } finally {
        await generator.close();
    }
}

if (require.main === module) {
    main();
}

module.exports = ImprovedPredictionsGenerator;

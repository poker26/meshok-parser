/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ 961 (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä 2117)
 */

const { Client } = require('pg');
const puppeteer = require('puppeteer-core');
const config = require('./config');

class TestFixedUpdater {
    constructor() {
        this.dbConfig = config.dbConfig;
        this.dbClient = new Client(this.dbConfig);
        this.browser = null;
        this.page = null;
        
        this.stats = {
            processed: 0,
            updated: 0,
            skipped: 0,
            errors: 0
        };
    }

    async init() {
        try {
            await this.dbClient.connect();
            console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            
            await this.initBrowser();
            console.log('üåê –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
            throw error;
        }
    }

    async initBrowser() {
        try {
            this.browser = await puppeteer.launch({
                executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
                headless: true,
                args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            this.page = await this.browser.newPage();
            await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
            throw error;
        }
    }

    extractConditionWithGrade(conditionText) {
        if (!conditionText) return null;
        return conditionText.replace(/\s+/g, '');
    }

    async testSpecificLot() {
        console.log('\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –ö–û–ù–ö–†–ï–¢–ù–´–ô –õ–û–¢ 7478027:');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ
        const currentState = await this.dbClient.query(`
            SELECT id, lot_number, auction_number, condition, source_url
            FROM auction_lots 
            WHERE source_url LIKE '%7478027%';
        `);
        
        if (currentState.rows.length > 0) {
            const lot = currentState.rows[0];
            console.log(`üìã –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –±–∞–∑–µ:`);
            console.log(`  –õ–æ—Ç ${lot.lot_number} (–ê—É–∫—Ü–∏–æ–Ω ${lot.auction_number})`);
            console.log(`  –°–æ—Å—Ç–æ—è–Ω–∏–µ: "${lot.condition}"`);
            console.log(`  URL: ${lot.source_url}`);
            
            // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ—Ç–∞
            console.log(`\nüîç –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ—Ç–∞: ${lot.source_url}`);
            await this.page.goto(lot.source_url, { waitUntil: 'networkidle2', timeout: 30000 });
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            const pageData = await this.page.evaluate(() => {
                const pageText = document.body.textContent || '';
                const conditionMatch = pageText.match(/–°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å:\s*([^\n\r]+)/i);
                return conditionMatch ? conditionMatch[1].trim() : null;
            });
            
            if (pageData) {
                const newCondition = this.extractConditionWithGrade(pageData);
                console.log(`üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ: "${pageData}" -> "${newCondition}"`);
                
                if (lot.condition !== newCondition) {
                    console.log(`‚úÖ –ù–£–ñ–ù–û –û–ë–ù–û–í–ò–¢–¨: "${lot.condition}" -> "${newCondition}"`);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º
                    await this.dbClient.query(`
                        UPDATE auction_lots 
                        SET condition = $1 
                        WHERE id = $2;
                    `, [newCondition, lot.id]);
                    
                    console.log(`üéâ –õ–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!`);
                    this.stats.updated++;
                } else {
                    console.log(`‚è≠Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
                    this.stats.skipped++;
                }
            } else {
                console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã`);
                this.stats.errors++;
            }
        } else {
            console.log(`‚ùå –õ–æ—Ç 7478027 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
        }
        
        this.stats.processed++;
    }

    async testAuctionPage() {
        console.log('\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –ü–ê–†–°–ò–ù–ì –û–ë–©–ï–ô –°–¢–†–ê–ù–ò–¶–´ –ê–£–ö–¶–ò–û–ù–ê 2117:');
        
        const auctionUrl = 'https://www.wolmar.ru/auction/2117';
        console.log(`üìÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞: ${auctionUrl}`);
        
        await this.page.goto(auctionUrl, { waitUntil: 'networkidle2', timeout: 30000 });
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const lotsData = await this.page.evaluate(() => {
            const lots = [];
            const tables = document.querySelectorAll('table');
            
            tables.forEach(table => {
                const rows = table.querySelectorAll('tr');
                
                rows.forEach(row => {
                    const cells = row.querySelectorAll('td, th');
                    
                    if (cells.length >= 10) {
                        const lotLink = row.querySelector('a[href*="/auction/"]');
                        
                        if (lotLink) {
                            const lotUrl = lotLink.href;
                            const lotNumberMatch = lotUrl.match(/\/auction\/\d+\/(\d+)/);
                            const lotNumber = lotNumberMatch ? lotNumberMatch[1] : null;
                            
                            const conditionCell = cells[5];
                            const condition = conditionCell ? conditionCell.textContent.trim() : null;
                            
                            if (lotNumber && condition && condition.match(/^(MS|PF|AU|UNC|XF|VF|VG|F|G|PR|PL|Proof|Gem)/i)) {
                                lots.push({
                                    lotNumber: lotNumber,
                                    lotUrl: lotUrl,
                                    condition: condition
                                });
                            }
                        }
                    }
                });
            });
            
            return lots;
        });
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${lotsData.length} –ª–æ—Ç–æ–≤ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏`);
        
        // –ò—â–µ–º –ª–æ—Ç 7478027 –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        const targetLot = lotsData.find(lot => lot.lotNumber === '7478027');
        if (targetLot) {
            console.log(`üéØ –ù–∞–π–¥–µ–Ω —Ü–µ–ª–µ–≤–æ–π –ª–æ—Ç:`);
            console.log(`  –ù–æ–º–µ—Ä: ${targetLot.lotNumber}`);
            console.log(`  –°–æ—Å—Ç–æ—è–Ω–∏–µ: "${targetLot.condition}"`);
            console.log(`  URL: ${targetLot.lotUrl}`);
        } else {
            console.log(`‚ùå –õ–æ—Ç 7478027 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞`);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ª–æ—Ç–æ–≤
        console.log(`\nüìã –ü–µ—Ä–≤—ã–µ 5 –ª–æ—Ç–æ–≤:`);
        lotsData.slice(0, 5).forEach((lot, index) => {
            console.log(`  ${index + 1}. –õ–æ—Ç ${lot.lotNumber}: "${lot.condition}"`);
        });
    }

    async run() {
        try {
            await this.init();
            
            console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –°–ö–†–ò–ü–¢–ê');
            console.log('üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ 961 (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä 2117)');
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–æ—Ç
            await this.testSpecificLot();
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await this.testAuctionPage();
            
            console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
            console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.stats.processed}`);
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${this.stats.updated}`);
            console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.stats.skipped}`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${this.stats.errors}`);
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        } finally {
            await this.cleanup();
        }
    }

    async cleanup() {
        if (this.browser) {
            await this.browser.close();
        }
        if (this.dbClient) {
            await this.dbClient.end();
        }
        console.log('üßπ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã');
    }
}

async function main() {
    const tester = new TestFixedUpdater();
    await tester.run();
}

main();

const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function checkImagesInDb() {
    const client = await pool.connect();
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ë–î...\n');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const totalResult = await client.query('SELECT COUNT(*) FROM coin_catalog');
        console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: ${totalResult.rows[0].count}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        const imagesResult = await client.query(`
            SELECT COUNT(*) 
            FROM coin_catalog 
            WHERE avers_image_data IS NOT NULL OR revers_image_data IS NOT NULL
        `);
        console.log(`üñºÔ∏è –ó–∞–ø–∏—Å–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${imagesResult.rows[0].count}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å –∞–≤–µ—Ä—Å–æ–º
        const aversResult = await client.query(`
            SELECT COUNT(*) 
            FROM coin_catalog 
            WHERE avers_image_data IS NOT NULL
        `);
        console.log(`üñºÔ∏è –ó–∞–ø–∏—Å–µ–π —Å –∞–≤–µ—Ä—Å–æ–º: ${aversResult.rows[0].count}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —Å —Ä–µ–≤–µ—Ä—Å–æ–º
        const reversResult = await client.query(`
            SELECT COUNT(*) 
            FROM coin_catalog 
            WHERE revers_image_data IS NOT NULL
        `);
        console.log(`üñºÔ∏è –ó–∞–ø–∏—Å–µ–π —Å —Ä–µ–≤–µ—Ä—Å–æ–º: ${reversResult.rows[0].count}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:');
        const examplesResult = await client.query(`
            SELECT id, coin_name, 
                   CASE WHEN avers_image_data IS NOT NULL THEN '–ï—Å—Ç—å' ELSE '–ù–µ—Ç' END as has_avers,
                   CASE WHEN revers_image_data IS NOT NULL THEN '–ï—Å—Ç—å' ELSE '–ù–µ—Ç' END as has_revers,
                   LENGTH(avers_image_data) as avers_size,
                   LENGTH(revers_image_data) as revers_size
            FROM coin_catalog 
            WHERE avers_image_data IS NOT NULL OR revers_image_data IS NOT NULL
            LIMIT 5
        `);
        
        examplesResult.rows.forEach((row, index) => {
            console.log(`\n${index + 1}. ID: ${row.id}`);
            console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${row.coin_name}`);
            console.log(`   –ê–≤–µ—Ä—Å: ${row.has_avers} (${row.avers_size} –±–∞–π—Ç)`);
            console.log(`   –†–µ–≤–µ—Ä—Å: ${row.has_revers} (${row.revers_size} –±–∞–π—Ç)`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const noImagesResult = await client.query(`
            SELECT COUNT(*) 
            FROM coin_catalog 
            WHERE avers_image_data IS NULL AND revers_image_data IS NULL
        `);
        console.log(`\n‚ùå –ó–∞–ø–∏—Å–µ–π –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${noImagesResult.rows[0].count}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
    } finally {
        client.release();
        await pool.end();
    }
}

checkImagesInDb();







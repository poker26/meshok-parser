/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */

const fs = require('fs');

function monitorProgress() {
    const progressFile = 'working_mass_update_progress.json';
    
    if (!fs.existsSync(progressFile)) {
        console.log('‚ùå –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫—Ä–∏–ø—Ç –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É.');
        return;
    }
    
    try {
        const data = JSON.parse(fs.readFileSync(progressFile, 'utf8'));
        const stats = data.stats;
        const timestamp = new Date(data.timestamp);
        
        console.log('üìä –ü–†–û–ì–†–ï–°–° –†–ê–ë–û–ß–ï–ô –í–ï–†–°–ò–ò –ú–ê–°–°–û–í–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø:');
        console.log(`‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${timestamp.toLocaleString('ru-RU')}`);
        console.log(`üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${stats.processed}`);
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${stats.updated}`);
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${stats.skipped}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${stats.errors}`);
        console.log(`üèÜ –ê—É–∫—Ü–∏–æ–Ω–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.auctionsProcessed}`);
        console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.pagesProcessed}`);
        
        if (stats.startTime) {
            const startTime = new Date(stats.startTime);
            const elapsed = Math.floor((new Date() - startTime) / 1000);
            const rate = stats.processed > 0 ? (stats.processed / elapsed * 60).toFixed(1) : 0;
            
            console.log(`‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.floor(elapsed / 60)}–º ${elapsed % 60}—Å`);
            console.log(`üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: ${rate} –ª–æ—Ç–æ–≤/–º–∏–Ω`);
            
            // –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if (stats.processed > 0 && rate > 0) {
                const estimatedTotal = 20000; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                const remaining = estimatedTotal - stats.processed;
                const etaMinutes = Math.floor(remaining / rate);
                const etaHours = Math.floor(etaMinutes / 60);
                const etaMins = etaMinutes % 60;
                
                console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${((stats.processed / estimatedTotal) * 100).toFixed(1)}%`);
                console.log(`‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ~${etaHours}—á ${etaMins}–º`);
            }
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
monitorProgress();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(monitorProgress, 30000);

// –£–ª—É—á—à–µ–Ω–∏–µ wolmar-parser4.js –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏
// —Å –æ–±—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∞—É–∫—Ü–∏–æ–Ω–æ–≤

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –æ–±—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
async function getAllLotUrlsWithConditions(auctionUrl, testMode = false) {
    console.log('üîç –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –ª–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏...');
    const allLotsData = new Map(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
        await this.ensurePageActive();

        await this.page.goto(auctionUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
        await this.delay(2000);

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        const paginationInfo = await this.page.evaluate(() => {
            // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ª–æ—Ç–æ–≤ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü
            const totalLotsElement = document.querySelector('.disabled[style*="float: right"]');
            const totalLots = totalLotsElement ? totalLotsElement.textContent.match(/(\d+)\s*–ª–æ—Ç/)?.[1] : null;
            
            // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            const paginationLinks = document.querySelectorAll('.paginator li a');
            let maxPage = 1;
            paginationLinks.forEach(link => {
                const pageNum = parseInt(link.textContent);
                if (pageNum && pageNum > maxPage) {
                    maxPage = pageNum;
                }
            });

            return {
                totalLots: totalLots ? parseInt(totalLots) : null,
                maxPage: maxPage
            };
        });

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤: ${paginationInfo.totalLots}`);
        console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: ${paginationInfo.maxPage}`);

        // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const pagesToProcess = testMode ? 1 : paginationInfo.maxPage;
        console.log(`üìã –†–µ–∂–∏–º: ${testMode ? '–¢–ï–°–¢ (—Ç–æ–ª—å–∫–æ 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)' : '–ü–û–õ–ù–´–ô'} - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${pagesToProcess} —Å—Ç—Ä–∞–Ω–∏—Ü`);

        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        for (let page = 1; page <= pagesToProcess; page++) {
            console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}/${pagesToProcess}...`);
            
            const pageUrl = page === 1 ? auctionUrl : `${auctionUrl}?page=${page}`;
            
            try {
                await this.page.goto(pageUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
                await this.delay(1000);

                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                const pageLotsData = await this.page.evaluate(() => {
                    const lots = [];
                    
                    // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
                    const lotLinks = document.querySelectorAll('a.title.lot[href*="/auction/"]');
                    
                    lotLinks.forEach(link => {
                        if (link.href && link.href.includes('/auction/')) {
                            const lotData = {
                                url: link.href
                            };
                            
                            // –ò—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã
                            const parentRow = link.closest('tr');
                            if (parentRow) {
                                const cells = parentRow.querySelectorAll('td');
                                cells.forEach(cell => {
                                    const cellText = cell.textContent.trim();
                                    // –ò—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∏–ø–∞ MS, AU, XF, VF, UNC —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏
                                    if (cellText.match(/^(MS|AU|XF|VF|UNC|PL)[\s\d\-\+\/]*$/i)) {
                                        lotData.condition = cellText;
                                    }
                                });
                            }
                            
                            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —è—á–µ–π–∫–∞—Ö, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∫–∏
                            if (!lotData.condition && parentRow) {
                                const rowText = parentRow.textContent;
                                const conditionMatch = rowText.match(/(MS|AU|XF|VF|UNC|PL)[\s\d\-\+\/]*/i);
                                if (conditionMatch) {
                                    lotData.condition = conditionMatch[0].trim();
                                }
                            }
                            
                            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            if (lotData.condition) {
                                lots.push(lotData);
                            }
                        }
                    });

                    return lots;
                });

                // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—â—É—é –∫–∞—Ä—Ç—É (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ URL)
                pageLotsData.forEach(lotData => {
                    allLotsData.set(lotData.url, lotData);
                });
                
                console.log(`   ‚úì –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${pageLotsData.length} (–≤—Å–µ–≥–æ: ${allLotsData.size})`);

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                await this.delay(500);

            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}:`, error.message);
                
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å detached frame, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                if (error.message.includes('detached') || error.message.includes('Frame')) {
                    console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ detached frame –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...`);
                    await this.recreatePage();
                    // –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º
                    await this.delay(3000);
                }
                
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                if (error.message.includes('Connection terminated') || error.message.includes('connection')) {
                    console.log(`üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...`);
                    try {
                        await this.dbClient.end();
                        await this.dbClient.connect();
                        console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
                    } catch (reconnectError) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', reconnectError.message);
                    }
                }
                
                continue;
            }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–∞—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if (allLotsData.size > 0) {
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ ${allLotsData.size} –ª–æ—Ç–∞—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`);
            await this.saveLotUrlsWithConditionsToDatabase(Array.from(allLotsData.values()));
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ URL –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
        return Array.from(allLotsData.keys());

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Å—ã–ª–æ–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π:', error.message);
        return [];
    }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–∞—Ö —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function saveLotUrlsWithConditionsToDatabase(lotsData) {
    try {
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–∞—Ö —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        const createTableQuery = `
            CREATE TABLE IF NOT EXISTS auction_lots_conditions (
                id SERIAL PRIMARY KEY,
                auction_number VARCHAR(10) NOT NULL,
                lot_url TEXT NOT NULL,
                condition_text TEXT,
                extracted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(auction_number, lot_url)
            );
        `;
        
        await this.dbClient.query(createTableQuery);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ—Ç–∞—Ö
        for (const lotData of lotsData) {
            try {
                const insertQuery = `
                    INSERT INTO auction_lots_conditions (auction_number, lot_url, condition_text)
                    VALUES ($1, $2, $3)
                    ON CONFLICT (auction_number, lot_url) 
                    DO UPDATE SET 
                        condition_text = EXCLUDED.condition_text,
                        extracted_at = CURRENT_TIMESTAMP;
                `;
                
                await this.dbClient.query(insertQuery, [
                    this.auctionNumber,
                    lotData.url,
                    lotData.condition
                ]);
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ—Ç–∞ ${lotData.url}:`, error.message);
            }
        }
        
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${lotsData.length} –∑–∞–ø–∏—Å–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –ª–æ—Ç–æ–≤`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function extractConditionWithGrade(conditionText) {
    if (!conditionText) return null;
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
    return conditionText.replace(/\s+/g, '');
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è parseLotPage –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
async function parseLotPageWithSavedCondition(url, auctionEndDate = null) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
        await this.ensurePageActive();
        await this.page.goto(url, { waitUntil: 'domcontentloaded', timeout: 30000 });
        await this.delay(2000);

        const lotData = await this.page.evaluate(() => {
            const data = {};

            // –ù–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞ - –∏–∑ —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
            const breadcrumbAuction = document.querySelector('ol[typeof="BreadcrumbList"] li:nth-child(2) span[property="name"]');
            if (breadcrumbAuction) {
                const match = breadcrumbAuction.textContent.match(/‚Ññ\s*(\d+)/);
                if (match) {
                    data.auctionNumber = match[1];
                }
            }

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ breadcrumb, –∏—â–µ–º –≤ h1
            if (!data.auctionNumber) {
                const h1 = document.querySelector('h1');
                if (h1) {
                    const match = h1.textContent.match(/‚Ññ\s*(\d+)/);
                    if (match) {
                        data.auctionNumber = match[1];
                    }
                }
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ URL –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
            if (!data.auctionNumber) {
                const urlMatch = window.location.href.match(/\/auction\/(\d+)\//);
                if (urlMatch) {
                    data.auctionNumber = urlMatch[1];
                }
            }

            // –ù–æ–º–µ—Ä –ª–æ—Ç–∞ - –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ h5
            const lotTitle = document.querySelector('h5');
            if (lotTitle) {
                const match = lotTitle.textContent.match(/–õ–æ—Ç\s*‚Ññ?\s*(\d+)/);
                if (match) {
                    data.lotNumber = match[1];
                }
            }

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ h5, –∏—â–µ–º –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
            if (!data.lotNumber) {
                const lotElements = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
                for (const element of lotElements) {
                    const match = element.textContent.match(/–õ–æ—Ç\s*‚Ññ?\s*(\d+)/);
                    if (match) {
                        data.lotNumber = match[1];
                        break;
                    }
                }
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ URL –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
            if (!data.lotNumber) {
                const urlMatch = window.location.href.match(/\/auction\/\d+\/(\d+)/);
                if (urlMatch) {
                    data.lotNumber = urlMatch[1];
                }
            }

            // –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã
            const descriptionElement = document.querySelector('.lot-description, .description, .lot-info');
            if (descriptionElement) {
                data.coinDescription = descriptionElement.textContent.trim();
            }

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (!data.coinDescription) {
                const pageText = document.body.textContent;
                const descriptionMatch = pageText.match(/–û–ø–∏—Å–∞–Ω–∏–µ[:\s]*([^\n\r]+)/i);
                if (descriptionMatch) {
                    data.coinDescription = descriptionMatch[1].trim();
                }
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π
            const valuesText = document.body.textContent;
            
            // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥—Ä–∞–¥–∞—Ü–∏–π
            const conditionMatch = valuesText.match(/–°–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å:\s*([\w\-\+\/\s]+)/);
            if (conditionMatch) {
                // –£–±–∏—Ä–∞–µ–º –í–°–ï –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
                data.condition = conditionMatch[1].replace(/\s+/g, '');
            }

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
            if (!data.condition) {
                const conditionCells = document.querySelectorAll('td, .condition, .grade');
                for (const cell of conditionCells) {
                    const cellText = cell.textContent.trim();
                    if (cellText.match(/^(MS|AU|XF|VF|UNC|PL)[\s\d\-\+\/]*$/i)) {
                        data.condition = cellText.replace(/\s+/g, '');
                        break;
                    }
                }
            }

            // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è (–≥–æ–¥, –º–µ—Ç–∞–ª–ª, –≤–µ—Å –∏ —Ç.–¥.) - –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
            const yearMatch = valuesText.match(/–ì–æ–¥[:\s]*(\d{4})/);
            if (yearMatch) {
                data.year = yearMatch[1];
            }

            const metalMatch = valuesText.match(/–ú–µ—Ç–∞–ª–ª[:\s]*([^\n\r]+)/i);
            if (metalMatch) {
                data.metal = metalMatch[1].trim();
            }

            const weightMatch = valuesText.match(/–í–µ—Å[:\s]*([\d,\.]+)\s*–≥/i);
            if (weightMatch) {
                data.weight = parseFloat(weightMatch[1].replace(',', '.'));
            }

            const lettersMatch = valuesText.match(/–ë—É–∫–≤—ã[:\s]*([^\n\r]+)/i);
            if (lettersMatch) {
                data.letters = lettersMatch[1].trim();
            }

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–∞—Ö
            const winnerMatch = valuesText.match(/–ü–æ–±–µ–¥–∏—Ç–µ–ª—å[:\s]*([^\n\r]+)/i);
            if (winnerMatch) {
                data.winnerLogin = winnerMatch[1].trim();
            }

            const bidMatch = valuesText.match(/–¶–µ–Ω–∞[:\s]*([\d\s]+)\s*—Ä—É–±/i);
            if (bidMatch) {
                data.winningBid = parseInt(bidMatch[1].replace(/\s/g, ''));
            }

            const bidsMatch = valuesText.match(/–°—Ç–∞–≤–æ–∫[:\s]*(\d+)/i);
            if (bidsMatch) {
                data.bidsCount = parseInt(bidsMatch[1]);
            }

            const statusMatch = valuesText.match(/–°—Ç–∞—Ç—É—Å[:\s]*([^\n\r]+)/i);
            if (statusMatch) {
                data.lotStatus = statusMatch[1].trim();
            }

            // URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            data.sourceUrl = window.location.href;

            return data;
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–∫—Ä—ã—Ç–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞
        if (auctionEndDate) {
            lotData.auctionEndDate = auctionEndDate;
        }

        return lotData;

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ª–æ—Ç–∞:', error.message);
        return null;
    }
}

module.exports = {
    getAllLotUrlsWithConditions,
    saveLotUrlsWithConditionsToDatabase,
    extractConditionWithGrade,
    parseLotPageWithSavedCondition
};

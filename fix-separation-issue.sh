#!/bin/bash

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –∏ –∫–∞—Ç–∞–ª–æ–≥–∞
# –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3001, –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞ –ø–æ—Ä—Ç—É 3000

echo "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ó–î–ï–õ–ï–ù–ò–Ø –°–ê–ô–¢–û–í..."
echo "================================="

echo "üìä –≠–¢–ê–ü 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è..."
echo "======================================"

echo "üîç –°—Ç–∞—Ç—É—Å PM2:"
pm2 status

echo ""
echo "üìä –≠–¢–ê–ü 2: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
echo "==================================="

pm2 stop all 2>/dev/null || true
pm2 delete all 2>/dev/null || true

echo "‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

echo ""
echo "üìä –≠–¢–ê–ü 3: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞..."
echo "=========================================="

cd /var/www/wolmar-parser

echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ server.js:"
if [ -f "server.js" ]; then
    echo "‚úÖ server.js –Ω–∞–π–¥–µ–Ω"
    echo "üìã –†–∞–∑–º–µ—Ä: $(wc -l < server.js) —Å—Ç—Ä–æ–∫"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    if grep -q "app.get.*api.*auctions" server.js; then
        echo "‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º server.js"
    else
        echo "‚ùå API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º server.js"
        echo "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤..."
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        cp server.js server.js.backup
        
        # –î–æ–±–∞–≤–ª—è–µ–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        cat > temp_api_endpoints.js << 'EOF'
// API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞
app.get('/api/auctions', async (req, res) => {
    try {
        console.log('üìä API: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤');
        const query = `
            SELECT 
                auction_number,
                COUNT(*) as lots_count,
                MIN(auction_end_date) as start_date,
                MAX(auction_end_date) as end_date,
                SUM(winning_bid) as total_value,
                AVG(winning_bid) as avg_bid,
                MAX(winning_bid) as max_bid,
                MIN(winning_bid) as min_bid
            FROM auction_lots 
            WHERE auction_number IS NOT NULL
            GROUP BY auction_number
            ORDER BY auction_number DESC
        `;
        
        const result = await pool.query(query);
        console.log(`üìä API: –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –∞—É–∫—Ü–∏–æ–Ω–æ–≤`);
        res.json(result.rows);
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—É–∫—Ü–∏–æ–Ω–∞—Ö' });
    }
});

app.get('/api/auctions/:auctionNumber/lots', async (req, res) => {
    try {
        const { auctionNumber } = req.params;
        const { page = 1, limit = 20, search, metal, condition, year, minPrice, maxPrice } = req.query;
        
        console.log(`üìä API: –ó–∞–ø—Ä–æ—Å –ª–æ—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        
        const offset = (page - 1) * limit;
        let whereClause = 'WHERE auction_number = $1';
        const queryParams = [auctionNumber];
        let paramCount = 1;
        
        if (search) {
            paramCount++;
            whereClause += ` AND coin_description ILIKE $${paramCount}`;
            queryParams.push(`%${search}%`);
        }
        
        if (metal) {
            paramCount++;
            whereClause += ` AND metal = $${paramCount}`;
            queryParams.push(metal);
        }
        
        if (condition) {
            paramCount++;
            whereClause += ` AND condition = $${paramCount}`;
            queryParams.push(condition);
        }
        
        if (year) {
            paramCount++;
            whereClause += ` AND year = $${paramCount}`;
            queryParams.push(year);
        }
        
        if (minPrice) {
            paramCount++;
            whereClause += ` AND winning_bid >= $${paramCount}`;
            queryParams.push(parseFloat(minPrice));
        }
        
        if (maxPrice) {
            paramCount++;
            whereClause += ` AND winning_bid <= $${paramCount}`;
            queryParams.push(parseFloat(maxPrice));
        }
        
        const query = `
            SELECT 
                id, lot_number, coin_description, avers_image_url, revers_image_url,
                winner_login, winning_bid, auction_end_date, bids_count,
                metal, condition, year
            FROM auction_lots 
            ${whereClause}
            ORDER BY lot_number::int
            LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}
        `;
        
        queryParams.push(parseInt(limit), offset);
        
        const result = await pool.query(query, queryParams);
        console.log(`üìä API: –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ª–æ—Ç–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        res.json(result.rows);
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–∞—Ö' });
    }
});

app.get('/api/lots/:id', async (req, res) => {
    try {
        const { id } = req.params;
        console.log(`üìä API: –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞ ${id}`);
        const query = `
            SELECT 
                id, lot_number, auction_number, coin_description,
                avers_image_url, revers_image_url, winner_login,
                winning_bid, auction_end_date, bids_count,
                metal, condition, year
            FROM auction_lots 
            WHERE id = $1
        `;
        
        const result = await pool.query(query, [id]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(result.rows[0]);
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–µ' });
    }
});

app.get('/api/auctions/:auctionNumber/stats', async (req, res) => {
    try {
        const { auctionNumber } = req.params;
        console.log(`üìä API: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        const query = `
            SELECT 
                COUNT(*) as total_lots,
                SUM(winning_bid) as total_value,
                AVG(winning_bid) as avg_bid,
                MAX(winning_bid) as max_bid,
                MIN(winning_bid) as min_bid,
                COUNT(DISTINCT winner_login) as unique_winners,
                COUNT(DISTINCT metal) as unique_metals,
                COUNT(DISTINCT condition) as unique_conditions
            FROM auction_lots 
            WHERE auction_number = $1
        `;
        
        const result = await pool.query(query, [auctionNumber]);
        res.json(result.rows[0]);
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞' });
    }
});

app.get('/api/filters', async (req, res) => {
    try {
        const { auctionNumber } = req.query;
        console.log(`üìä API: –ó–∞–ø—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber || '–≤—Å–µ—Ö'}`);
        let whereClause = '';
        const queryParams = [];
        
        if (auctionNumber) {
            whereClause = 'WHERE auction_number = $1';
            queryParams.push(auctionNumber);
        }
        
        const query = `
            SELECT 
                metal,
                condition,
                year
            FROM auction_lots 
            ${whereClause}
            GROUP BY metal, condition, year
            ORDER BY metal, condition, year
        `;
        
        const result = await pool.query(query, queryParams);
        
        const filters = {
            metals: [...new Set(result.rows.map(row => row.metal).filter(Boolean))],
            conditions: [...new Set(result.rows.map(row => row.condition).filter(Boolean))],
            years: [...new Set(result.rows.map(row => row.year).filter(Boolean))].sort()
        };
        
        res.json(filters);
    } catch (error) {
        console.error('‚ùå API: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤' });
    }
});
EOF
        
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å catch-all route
        CATCH_ALL_LINE=$(grep -n "app.get('*'" server.js | head -1 | cut -d: -f1)
        
        if [ -n "$CATCH_ALL_LINE" ]; then
            echo "üìã –ù–∞–π–¥–µ–Ω–∞ catch-all route –Ω–∞ —Å—Ç—Ä–æ–∫–µ $CATCH_ALL_LINE"
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π server.js —Å API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
            head -n $((CATCH_ALL_LINE - 1)) server.js > temp_server.js
            cat temp_api_endpoints.js >> temp_server.js
            tail -n +$CATCH_ALL_LINE server.js >> temp_server.js
            
            mv temp_server.js server.js
            echo "‚úÖ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π server.js"
        else
            echo "‚ùå Catch-all route –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        
        rm -f temp_api_endpoints.js
    fi
else
    echo "‚ùå server.js –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

echo ""
echo "üìä –≠–¢–ê–ü 4: –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É 3001..."
echo "================================================"

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É 3001
pm2 start server.js --name "wolmar-parser" -- --port 3001

if [ $? -eq 0 ]; then
    echo "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3001"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞"
    exit 1
fi

echo ""
echo "üìä –≠–¢–ê–ü 5: –ó–∞–ø—É—Å–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞ –ø–æ—Ä—Ç—É 3000..."
echo "=========================================="

cd /var/www/catalog-interface

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–∞–ª–æ–≥
if [ -f "server.js" ]; then
    echo "‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –Ω–∞–π–¥–µ–Ω"
    
    # –ó–∞–ø—É—Å–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞ –ø–æ—Ä—Ç—É 3000
    pm2 start server.js --name "catalog-interface"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"
    fi
else
    echo "‚ùå –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    echo "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞..."
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    mkdir -p /var/www/catalog-interface
    cd /var/www/catalog-interface
    
    # –°–æ–∑–¥–∞–µ–º package.json –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    cat > package.json << 'EOF'
{
  "name": "catalog-interface",
  "version": "1.0.0",
  "description": "–ö–∞—Ç–∞–ª–æ–≥ –º–æ–Ω–µ—Ç Wolmar",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "pg": "^8.11.3"
  }
}
EOF
    
    # –°–æ–∑–¥–∞–µ–º server.js –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
    cat > server.js << 'EOF'
const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
    user: 'postgres.xkwgspqwebfeteoblayu',
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',
    password: 'Gopapopa326+',
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    }
};

const app = express();
const PORT = 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool(dbConfig);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
pool.on('connect', () => {
    console.log('üóÑÔ∏è –ö–ê–¢–ê–õ–û–ì: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

pool.on('error', (err) => {
    console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
});

// –¢–µ—Å—Ç–æ–≤—ã–π API
app.get('/api/test', (req, res) => {
    console.log('üß™ –ö–ê–¢–ê–õ–û–ì: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
    res.json({ 
        message: '–ö–∞—Ç–∞–ª–æ–≥ –º–æ–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
        timestamp: new Date().toISOString(),
        port: PORT,
        status: 'ok'
    });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
app.get('/api/auctions', async (req, res) => {
    try {
        console.log('üìä –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤');
        const query = `
            SELECT 
                auction_number,
                COUNT(*) as lots_count,
                MIN(auction_end_date) as start_date,
                MAX(auction_end_date) as end_date,
                SUM(winning_bid) as total_value,
                AVG(winning_bid) as avg_bid,
                MAX(winning_bid) as max_bid,
                MIN(winning_bid) as min_bid
            FROM auction_lots 
            WHERE auction_number IS NOT NULL
            GROUP BY auction_number
            ORDER BY auction_number DESC
        `;
        
        const result = await pool.query(query);
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –∞—É–∫—Ü–∏–æ–Ω–æ–≤`);
        res.json(result.rows);
    } catch (error) {
        console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—É–∫—Ü–∏–æ–Ω–∞—Ö' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞
app.get('/api/auctions/:auctionNumber/lots', async (req, res) => {
    try {
        const { auctionNumber } = req.params;
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å –ª–æ—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        
        const query = `
            SELECT 
                id, lot_number, coin_description, avers_image_url, revers_image_url,
                winner_login, winning_bid, auction_end_date, bids_count,
                metal, condition, year
            FROM auction_lots 
            WHERE auction_number = $1
            ORDER BY lot_number::int
        `;
        
        const result = await pool.query(query, [auctionNumber]);
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ª–æ—Ç–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        res.json(result.rows);
    } catch (error) {
        console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–∞—Ö' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞
app.get('/api/lots/:id', async (req, res) => {
    try {
        const { id } = req.params;
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞ ${id}`);
        
        const query = `
            SELECT 
                id, lot_number, auction_number, coin_description,
                avers_image_url, revers_image_url, winner_login,
                winning_bid, auction_end_date, bids_count,
                metal, condition, year
            FROM auction_lots 
            WHERE id = $1
        `;
        
        const result = await pool.query(query, [id]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(result.rows[0]);
    } catch (error) {
        console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–µ' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞
app.get('/api/auctions/:auctionNumber/stats', async (req, res) => {
    try {
        const { auctionNumber } = req.params;
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        
        const query = `
            SELECT 
                COUNT(*) as total_lots,
                SUM(winning_bid) as total_value,
                AVG(winning_bid) as avg_bid,
                MAX(winning_bid) as max_bid,
                MIN(winning_bid) as min_bid,
                COUNT(DISTINCT winner_login) as unique_winners,
                COUNT(DISTINCT metal) as unique_metals,
                COUNT(DISTINCT condition) as unique_conditions
            FROM auction_lots 
            WHERE auction_number = $1
        `;
        
        const result = await pool.query(query, [auctionNumber]);
        res.json(result.rows[0]);
    } catch (error) {
        console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
app.get('/api/filters', async (req, res) => {
    try {
        const { auctionNumber } = req.query;
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber || '–≤—Å–µ—Ö'}`);
        
        let whereClause = '';
        const queryParams = [];
        
        if (auctionNumber) {
            whereClause = 'WHERE auction_number = $1';
            queryParams.push(auctionNumber);
        }
        
        const query = `
            SELECT 
                metal,
                condition,
                year
            FROM auction_lots 
            ${whereClause}
            GROUP BY metal, condition, year
            ORDER BY metal, condition, year
        `;
        
        const result = await pool.query(query, queryParams);
        
        const filters = {
            metals: [...new Set(result.rows.map(row => row.metal).filter(Boolean))],
            conditions: [...new Set(result.rows.map(row => row.condition).filter(Boolean))],
            years: [...new Set(result.rows.map(row => row.year).filter(Boolean))].sort()
        };
        
        res.json(filters);
    } catch (error) {
        console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤' });
    }
});

// Catch-all handler –¥–ª—è SPA
app.get('*', (req, res) => {
    console.log(`üåê –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${req.path}`);
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –ö–ê–¢–ê–õ–û–ì –ú–û–ù–ï–¢ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä API –∫–∞—Ç–∞–ª–æ–≥–∞: http://localhost:${PORT}/api`);
    console.log(`üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞—Ç–∞–ª–æ–≥–∞: http://localhost:${PORT}`);
    console.log(`üîó –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø: http://46.173.19.68:${PORT}`);
    console.log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π API: http://localhost:${PORT}/api/test`);
});
EOF
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    npm install
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
    pm2 start server.js --name "catalog-interface"
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞"
    fi
fi

echo ""
echo "‚è≥ –≠–¢–ê–ü 6: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
echo "============================="

sleep 5

echo ""
echo "üìä –≠–¢–ê–ü 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –æ–±–æ–∏—Ö —Å–∞–π—Ç–æ–≤..."
echo "======================================="

echo "üîç –°—Ç–∞—Ç—É—Å PM2:"
pm2 status

echo ""
echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞:"
curl -s http://localhost:3001/api/health > /dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3001"
else
    echo "‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3001"
fi

echo ""
echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞:"
curl -s http://localhost:3000/api/test > /dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3000"
else
    echo "‚ùå –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3000"
fi

echo ""
echo "üìä –≠–¢–ê–ü 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞..."
echo "========================================"

echo "üåê –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç:"
curl -s http://46.173.19.68:3001/api/health > /dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: http://46.173.19.68:3001"
else
    echo "‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

echo ""
echo "üåê –ö–∞—Ç–∞–ª–æ–≥:"
curl -s http://46.173.19.68:3000/api/test > /dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–µ–Ω: http://46.173.19.68:3000"
else
    echo "‚ùå –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

echo ""
echo "üìä –≠–¢–ê–ü 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
echo "==========================="

echo "üìã –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞—Ö 3000-3001:"
netstat -tlnp | grep -E ":300[01]" || echo "–ü–æ—Ä—Ç—ã 3000-3001 –Ω–µ –∑–∞–Ω—è—Ç—ã"

echo ""
echo "üìä –≠–¢–ê–ü 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤..."
echo "==========================="

echo "üìã –õ–æ–≥–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞:"
pm2 logs wolmar-parser --lines 5

echo ""
echo "üìã –õ–æ–≥–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:"
pm2 logs catalog-interface --lines 5

echo ""
echo "‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ó–î–ï–õ–ï–ù–ò–Ø –°–ê–ô–¢–û–í –ó–ê–í–ï–†–®–ï–ù–û!"
echo "========================================="
echo "üåê –û—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç: http://46.173.19.68:3001"
echo "üåê –ö–∞—Ç–∞–ª–æ–≥ –º–æ–Ω–µ—Ç: http://46.173.19.68:3000"
echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: pm2 status"
echo "üìã –õ–æ–≥–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞: pm2 logs wolmar-parser"
echo "üìã –õ–æ–≥–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: pm2 logs catalog-interface"

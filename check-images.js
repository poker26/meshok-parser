const { Pool } = require('pg');
const config = require('./config');
const fs = require('fs');

async function checkImages() {
    const pool = new Pool(config.dbConfig);
    const client = await pool.connect();
    
    try {
        const result = await client.query('SELECT COUNT(*) as count FROM coin_catalog WHERE avers_image_path IS NOT NULL');
        console.log('üìä –ó–∞–ø–∏—Å–µ–π —Å –ø—É—Ç—è–º–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∞–≤–µ—Ä—Å–∞:', result.rows[0].count);
        
        const result2 = await client.query('SELECT COUNT(*) as count FROM coin_catalog WHERE revers_image_path IS NOT NULL');
        console.log('üìä –ó–∞–ø–∏—Å–µ–π —Å –ø—É—Ç—è–º–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —Ä–µ–≤–µ—Ä—Å–∞:', result.rows[0].count);
        
        const result3 = await client.query('SELECT avers_image_path, revers_image_path FROM coin_catalog WHERE avers_image_path IS NOT NULL LIMIT 5');
        console.log('\nüîç –ü—Ä–∏–º–µ—Ä—ã –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º:');
        result3.rows.forEach((row, index) => {
            console.log(`${index + 1}. –ê–≤–µ—Ä—Å: ${row.avers_image_path}`);
            console.log(`   –†–µ–≤–µ—Ä—Å: ${row.revers_image_path}`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ñ–∞–π–ª—ã
        console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:');
        const result4 = await client.query('SELECT avers_image_path FROM coin_catalog WHERE avers_image_path IS NOT NULL LIMIT 3');
        for (const row of result4.rows) {
            const exists = fs.existsSync(row.avers_image_path);
            console.log(`${row.avers_image_path}: ${exists ? '‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        }
        
    } finally {
        client.release();
        await pool.end();
    }
}

checkImages().catch(console.error);

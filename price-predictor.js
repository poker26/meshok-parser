/**
 * –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –ª–æ—Ç–æ–≤
 * –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */

const { Client } = require('pg');
const config = require('./config');

class PricePredictor {
    constructor() {
        this.dbConfig = config.dbConfig;
        this.dbClient = new Client(this.dbConfig);
        
        // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        this.conditionMultipliers = {
            'MS64': 4.4,    // 329,205‚ÇΩ / 74,655‚ÇΩ (–±–∞–∑–æ–≤–∞—è MS)
            'MS61': 3.1,    // 227,977‚ÇΩ / 74,655‚ÇΩ
            'AU55': 3.0,    // 224,180‚ÇΩ / 74,655‚ÇΩ
            'AU58': 2.7,    // 203,554‚ÇΩ / 74,655‚ÇΩ
            'MS62': 2.7,    // 200,186‚ÇΩ / 74,655‚ÇΩ
            'MS65': 2.4,    // 177,910‚ÇΩ / 74,655‚ÇΩ
            'MS63': 2.2,    // 164,086‚ÇΩ / 74,655‚ÇΩ
            'MS60': 1.7,    // 126,346‚ÇΩ / 74,655‚ÇΩ
            'MS66': 1.2,    // 86,419‚ÇΩ / 74,655‚ÇΩ
            'MS': 1.0,      // –ë–∞–∑–æ–≤–∞—è MS
            'AU/UNC': 0.43, // 32,331‚ÇΩ / 74,655‚ÇΩ
            'XF+/AU': 0.40, // 30,095‚ÇΩ / 74,655‚ÇΩ
            'AU': 0.37,     // 27,575‚ÇΩ / 74,655‚ÇΩ
            'UNC': 0.30,    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            'XF': 0.25,     // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            'VF': 0.15,     // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            'F': 0.10,      // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            'G': 0.05       // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        };
        
        // –¶–µ–Ω—ã –º–µ—Ç–∞–ª–ª–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å)
        this.metalPrices = {
            'Au': 5000,     // ‚ÇΩ/–≥ –∑–∞ —á–∏—Å—Ç–æ–µ –∑–æ–ª–æ—Ç–æ
            'Ag': 80,       // ‚ÇΩ/–≥ –∑–∞ —á–∏—Å—Ç–æ–µ —Å–µ—Ä–µ–±—Ä–æ
            'Pt': 3000,     // ‚ÇΩ/–≥ –∑–∞ –ø–ª–∞—Ç–∏–Ω—É
            'Cu': 5,        // ‚ÇΩ/–≥ –∑–∞ –º–µ–¥—å
            'Ni': 10        // ‚ÇΩ/–≥ –∑–∞ –Ω–∏–∫–µ–ª—å
        };
        
        // –ü—Ä–æ–±—ã –º–µ—Ç–∞–ª–ª–æ–≤
        this.metalPurities = {
            'Au': 0.9,      // 900 –ø—Ä–æ–±–∞
            'Ag': 0.9,      // 900 –ø—Ä–æ–±–∞
            'Pt': 0.95,     // 950 –ø—Ä–æ–±–∞
            'Cu': 1.0,      // –ß–∏—Å—Ç–∞—è –º–µ–¥—å
            'Ni': 1.0       // –ß–∏—Å—Ç—ã–π –Ω–∏–∫–µ–ª—å
        };
    }

    async init() {
        await this.dbClient.connect();
        console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    // –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–µ—Ç–∞–ª–ª–∞
    calculateMetalValue(metal, weight) {
        if (!metal || !weight) return 0;
        
        const metalPrice = this.metalPrices[metal] || 0;
        const purity = this.metalPurities[metal] || 1.0;
        
        return weight * purity * metalPrice;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    getConditionMultiplier(condition) {
        if (!condition) return 0.1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        
        // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (this.conditionMultipliers[condition]) {
            return this.conditionMultipliers[condition];
        }
        
        // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for (const [key, value] of Object.entries(this.conditionMultipliers)) {
            if (condition.includes(key) || key.includes(condition)) {
                return value;
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
        if (condition.includes('MS')) return 1.0;
        if (condition.includes('AU')) return 0.4;
        if (condition.includes('UNC')) return 0.3;
        if (condition.includes('XF')) return 0.25;
        if (condition.includes('VF')) return 0.15;
        if (condition.includes('F')) return 0.1;
        
        return 0.1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    predictPrice(lot) {
        const { metal, weight, condition, year, letters } = lot;
        
        // 1. –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ç–∞–ª–ª–∞
        const metalValue = this.calculateMetalValue(metal, weight);
        
        // 2. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const conditionMultiplier = this.getConditionMultiplier(condition);
        
        // 3. –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        let predictedPrice = metalValue * conditionMultiplier;
        
        // 4. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≥–æ–¥ (—Å—Ç–∞—Ä—ã–µ –º–æ–Ω–µ—Ç—ã –¥–æ—Ä–æ–∂–µ)
        if (year && !isNaN(year)) {
            const yearNum = parseInt(year);
            if (yearNum < 1900) {
                predictedPrice *= 1.5; // +50% –∑–∞ –¥–æ—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ
            } else if (yearNum < 1950) {
                predictedPrice *= 1.2; // +20% –∑–∞ —Å–æ–≤–µ—Ç—Å–∫–∏–µ –¥–æ 1950
            }
        }
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ä–µ–¥–∫–æ—Å—Ç—å (–ø–æ –±—É–∫–≤–∞–º)
        if (letters && letters.length > 0) {
            // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±—É–∫–≤—ã –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ä–µ–¥–∫–æ—Å—Ç—å
            if (letters.includes('–ê–†') || letters.includes('–°–ü–ë')) {
                predictedPrice *= 1.3; // +30% –∑–∞ —Å—Ç–æ–ª–∏—á–Ω—ã–µ –º–æ–Ω–µ—Ç–Ω—ã–µ –¥–≤–æ—Ä—ã
            }
        }
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        predictedPrice = Math.max(predictedPrice, 100);
        
        return {
            predictedPrice: Math.round(predictedPrice),
            metalValue: Math.round(metalValue),
            numismaticPremium: Math.round(predictedPrice - metalValue),
            conditionMultiplier: conditionMultiplier,
            confidence: this.calculateConfidence(lot)
        };
    }

    // –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ
    calculateConfidence(lot) {
        let confidence = 0.5; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (lot.metal && lot.weight) confidence += 0.2;
        if (lot.condition) confidence += 0.2;
        if (lot.year) confidence += 0.1;
        
        // –£–º–µ–Ω—å—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–¥–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        const condition = lot.condition;
        if (condition && this.conditionMultipliers[condition]) {
            confidence += 0.1; // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        } else if (condition) {
            confidence -= 0.1; // –ù–µ—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        }
        
        return Math.max(0.1, Math.min(1.0, confidence));
    }

    // –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
    async predictCurrentAuctionPrices(auctionNumber) {
        console.log(`\nüîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}:`);
        
        // –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
        const lots = await this.dbClient.query(`
            SELECT 
                id, lot_number, condition, metal, weight, year, letters,
                winning_bid, coin_description
            FROM auction_lots 
            WHERE auction_number = $1
            ORDER BY lot_number
            LIMIT 50;
        `, [auctionNumber]);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${lots.rows.length} –ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è`);
        
        const predictions = [];
        
        for (const lot of lots.rows) {
            const prediction = this.predictPrice(lot);
            
            predictions.push({
                lotId: lot.id,
                lotNumber: lot.lot_number,
                condition: lot.condition,
                metal: lot.metal,
                weight: lot.weight,
                year: lot.year,
                predictedPrice: prediction.predictedPrice,
                metalValue: prediction.metalValue,
                numismaticPremium: prediction.numismaticPremium,
                confidence: prediction.confidence,
                actualPrice: lot.winning_bid,
                description: lot.coin_description
            });
            
            console.log(`üìã –õ–æ—Ç ${lot.lot_number}: ${lot.condition} | ${lot.metal} | ${lot.weight}–≥`);
            console.log(`   –ü—Ä–æ–≥–Ω–æ–∑: ${prediction.predictedPrice.toLocaleString()}‚ÇΩ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(prediction.confidence * 100).toFixed(0)}%)`);
            console.log(`   –ú–µ—Ç–∞–ª–ª: ${prediction.metalValue.toLocaleString()}‚ÇΩ | –ù–∞—Ü–µ–Ω–∫–∞: ${prediction.numismaticPremium.toLocaleString()}‚ÇΩ`);
            if (lot.winning_bid) {
                const accuracy = Math.abs(prediction.predictedPrice - lot.winning_bid) / lot.winning_bid * 100;
                console.log(`   –§–∞–∫—Ç: ${lot.winning_bid.toLocaleString()}‚ÇΩ | –¢–æ—á–Ω–æ—Å—Ç—å: ${(100 - accuracy).toFixed(1)}%`);
            }
            console.log('');
        }
        
        return predictions;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async savePredictions(predictions) {
        console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await this.dbClient.query(`
            CREATE TABLE IF NOT EXISTS lot_price_predictions (
                id SERIAL PRIMARY KEY,
                lot_id INTEGER UNIQUE REFERENCES auction_lots(id),
                predicted_price DECIMAL(12,2),
                metal_value DECIMAL(12,2),
                numismatic_premium DECIMAL(12,2),
                confidence_score DECIMAL(3,2),
                prediction_method VARCHAR(50) DEFAULT 'basic_model',
                created_at TIMESTAMP DEFAULT NOW()
            );
        `);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
        for (const prediction of predictions) {
            await this.dbClient.query(`
                INSERT INTO lot_price_predictions 
                (lot_id, predicted_price, metal_value, numismatic_premium, confidence_score)
                VALUES ($1, $2, $3, $4, $5)
                ON CONFLICT (lot_id) DO UPDATE SET
                    predicted_price = EXCLUDED.predicted_price,
                    metal_value = EXCLUDED.metal_value,
                    numismatic_premium = EXCLUDED.numismatic_premium,
                    confidence_score = EXCLUDED.confidence_score,
                    created_at = NOW();
            `, [
                prediction.lotId,
                prediction.predictedPrice,
                prediction.metalValue,
                prediction.numismaticPremium,
                prediction.confidence
            ]);
        }
        
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${predictions.length} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤`);
    }

    async run() {
        try {
            await this.init();
            
            console.log('üîÆ –°–ò–°–¢–ï–ú–ê –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –¶–ï–ù –õ–û–¢–û–í');
            console.log('üìã –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ
            const predictions = await this.predictCurrentAuctionPrices('964');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
            await this.savePredictions(predictions);
            
            console.log('\n‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        } finally {
            await this.dbClient.end();
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
    const predictor = new PricePredictor();
    await predictor.run();
}

main();

const axios = require('axios');
const { Pool } = require('pg');
const config = require('./config');

class MetalsPriceService {
    constructor() {
        this.pool = new Pool(config.dbConfig);
        this.cache = new Map();
        this.cacheTimeout = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API –¶–ë –†–§
     */
    async getUSDRate(date) {
        try {
            const dateStr = this.formatDateForCBR(date);
            const cacheKey = `usd_${dateStr}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (this.cache.has(cacheKey)) {
                const cached = this.cache.get(cacheKey);
                if (Date.now() - cached.timestamp < this.cacheTimeout) {
                    return cached.data;
                }
            }

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –¶–ë –†–§
            const response = await axios.get(
                `https://www.cbr.ru/scripts/XML_daily.asp?date_req=${dateStr}`,
                { timeout: 10000 }
            );

            // –ü–∞—Ä—Å–∏–º XML –æ—Ç–≤–µ—Ç
            const xmlData = response.data;
            const usdMatch = xmlData.match(/<Valute ID="R01235">[\s\S]*?<Value>([\d,]+)<\/Value>/);
            
            if (usdMatch) {
                const rate = parseFloat(usdMatch[1].replace(',', '.'));
                
                // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                this.cache.set(cacheKey, {
                    data: rate,
                    timestamp: Date.now()
                });
                
                return rate;
            }
            
            throw new Error('–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –¶–ë –†–§');
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD –Ω–∞ ${date}:`, error.message);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–ª–ª—ã —Å –¶–ë –†–§
     * –ü–∞—Ä—Å–∏—Ç –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏
     */
    async getMetalsPricesFromCBR(date) {
        try {
            const dateStr = this.formatDateForCBR(date);
            const cacheKey = `metals_${dateStr}`;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (this.cache.has(cacheKey)) {
                const cached = this.cache.get(cacheKey);
                if (Date.now() - cached.timestamp < this.cacheTimeout) {
                    return cached.data;
                }
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –¶–ë –†–§
            const url = `https://cbr.ru/hd_base/metall/metall_base_new/?UniDbQuery.From=${dateStr}&UniDbQuery.To=${dateStr}&UniDbQuery.Gold=true&UniDbQuery.Silver=true&UniDbQuery.Platinum=true&UniDbQuery.Palladium=true&UniDbQuery.Posted=True&UniDbQuery.so=1`;
            
            const response = await axios.get(url, { 
                timeout: 15000,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            });

            // –ü–∞—Ä—Å–∏–º HTML –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω
            const html = response.data;
            const prices = this.parseMetalsPricesFromHTML(html);
            
            if (prices && Object.keys(prices).length > 0) {
                // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                this.cache.set(cacheKey, {
                    data: prices,
                    timestamp: Date.now()
                });
                
                return prices;
            }
            
            throw new Error('–¶–µ–Ω—ã –Ω–∞ –º–µ—Ç–∞–ª–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ –¶–ë –†–§');
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ –º–µ—Ç–∞–ª–ª—ã –Ω–∞ ${date}:`, error.message);
            return null;
        }
    }

    /**
     * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —á–µ—Ä–µ–∑ Metals-API (–µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á)
     */
    async getMetalsPricesFromAPI(date, apiKey = null) {
        if (!apiKey) return null;
        
        try {
            const dateStr = this.formatDateForAPI(date);
            const response = await axios.get(
                `https://metals-api.com/api/${dateStr}?access_key=${apiKey}&base=USD&symbols=XAU,XAG,XPT,XPD`,
                { timeout: 10000 }
            );

            if (response.data.success) {
                return {
                    gold: response.data.rates.XAU,
                    silver: response.data.rates.XAG,
                    platinum: response.data.rates.XPT,
                    palladium: response.data.rates.XPD
                };
            }
            
            throw new Error('API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω —á–µ—Ä–µ–∑ Metals-API –Ω–∞ ${date}:`, error.message);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫—É—Ä—Å USD + —Ü–µ–Ω—ã –Ω–∞ –º–µ—Ç–∞–ª–ª—ã)
     */
    async getPriceData(date) {
        try {
            const [usdRate, metalsPrices] = await Promise.all([
                this.getUSDRate(date),
                this.getMetalsPricesFromCBR(date)
            ]);

            return {
                date: date,
                usdRate: usdRate,
                metals: metalsPrices,
                timestamp: new Date().toISOString()
            };
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞ ${date}:`, error.message);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–µ—Ç)
     */
    async getHistoricalData(years = 10) {
        const endDate = new Date();
        const startDate = new Date();
        startDate.setFullYear(endDate.getFullYear() - years);
        
        const results = [];
        const currentDate = new Date(startDate);
        
        console.log(`üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å ${startDate.toLocaleDateString()} –ø–æ ${endDate.toLocaleDateString()}`);
        
        while (currentDate <= endDate) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏
            if (currentDate.getDay() !== 0 && currentDate.getDay() !== 6) {
                const data = await this.getPriceData(new Date(currentDate));
                if (data) {
                    results.push(data);
                    console.log(`‚úÖ ${currentDate.toLocaleDateString()}: USD=${data.usdRate}, Au=${data.metals?.gold || 'N/A'}`);
                } else {
                    console.log(`‚ùå ${currentDate.toLocaleDateString()}: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã`);
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            currentDate.setDate(currentDate.getDate() + 1);
        }
        
        return results;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
     */
    async saveToDatabase(priceData) {
        try {
            const insertQuery = `
                INSERT INTO metals_prices (date, usd_rate, gold_price, silver_price, platinum_price, palladium_price, created_at)
                VALUES ($1, $2, $3, $4, $5, $6, $7)
                ON CONFLICT (date) 
                DO UPDATE SET
                    usd_rate = EXCLUDED.usd_rate,
                    gold_price = EXCLUDED.gold_price,
                    silver_price = EXCLUDED.silver_price,
                    platinum_price = EXCLUDED.platinum_price,
                    palladium_price = EXCLUDED.palladium_price,
                    updated_at = $7
            `;

            await this.pool.query(insertQuery, [
                priceData.date,
                priceData.usdRate,
                priceData.metals?.gold || null,
                priceData.metals?.silver || null,
                priceData.metals?.platinum || null,
                priceData.metals?.palladium || null,
                new Date()
            ]);

            return true;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –º–µ—Ç–∞–ª–ª–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async getMetalPriceFromDB(date, metal) {
        try {
            // –ú–∞–ø–ø–∏–Ω–≥ –º–µ—Ç–∞–ª–ª–æ–≤ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –≤ –ë–î
            const metalColumns = {
                'gold': 'gold_price',
                'silver': 'silver_price', 
                'platinum': 'platinum_price',
                'palladium': 'palladium_price',
                'gold_price': 'gold_price',
                'silver_price': 'silver_price',
                'platinum_price': 'platinum_price',
                'palladium_price': 'palladium_price',
                'au': 'gold_price',
                'ag': 'silver_price',
                'pt': 'platinum_price',
                'pd': 'palladium_price',
                'au_price': 'gold_price',
                'ag_price': 'silver_price',
                'pt_price': 'platinum_price',
                'pd_price': 'palladium_price'
            };
            
            const columnName = metalColumns[metal];
            if (!columnName) {
                throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–∞–ª–ª: ${metal}`);
            }
            
            const query = `
                SELECT ${columnName} as price, usd_rate
                FROM metals_prices 
                WHERE date = $1
            `;
            
            const result = await this.pool.query(query, [date]);
            
            if (result.rows.length > 0) {
                return {
                    price: result.rows[0].price,
                    usdRate: result.rows[0].usd_rate
                };
            }
            
            return null;
            
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã ${metal} –∏–∑ –ë–î:`, error);
            return null;
        }
    }

    /**
     * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Ü–µ–Ω–∫–∏
     */
    calculateNumismaticPremium(lotPrice, metalWeight, metalPricePerGram, usdRate) {
        if (!metalWeight || !metalPricePerGram || !usdRate) {
            return null;
        }

        // –°—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ç–∞–ª–ª–∞ –≤ —Ä—É–±–ª—è—Ö
        const metalValue = metalWeight * metalPricePerGram;
        
        // –ù—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Ü–µ–Ω–∫–∞
        const premium = lotPrice - metalValue;
        const premiumPercent = (premium / metalValue) * 100;
        
        return {
            lotPrice: lotPrice,
            metalWeight: metalWeight,
            metalPricePerGram: metalPricePerGram,
            metalValue: metalValue,
            premium: premium,
            premiumPercent: premiumPercent
        };
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    formatDateForCBR(date) {
        const d = new Date(date);
        const day = String(d.getDate()).padStart(2, '0');
        const month = String(d.getMonth() + 1).padStart(2, '0');
        const year = d.getFullYear();
        return `${day}.${month}.${year}`;
    }

    formatDateForAPI(date) {
        const d = new Date(date);
        const year = d.getFullYear();
        const month = String(d.getMonth() + 1).padStart(2, '0');
        const day = String(d.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    }

    parseMetalsPricesFromHTML(html) {
        try {
            const prices = {};
            
            // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ (–≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã)
            const dataRowMatch = html.match(/<tr>\s*<td>[\d\.]+<\/td>\s*<td[^>]*>([^<]+)<\/td>\s*<td[^>]*>([^<]+)<\/td>\s*<td[^>]*>([^<]+)<\/td>\s*<td[^>]*>([^<]+)<\/td>\s*<\/tr>/);
            
            if (dataRowMatch) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã –∏–∑ —è—á–µ–µ–∫ (–ø–æ—Ä—è–¥–æ–∫: –∑–æ–ª–æ—Ç–æ, —Å–µ—Ä–µ–±—Ä–æ, –ø–ª–∞—Ç–∏–Ω–∞, –ø–∞–ª–ª–∞–¥–∏–π)
                const goldPrice = this.parsePrice(dataRowMatch[1]);
                const silverPrice = this.parsePrice(dataRowMatch[2]);
                const platinumPrice = this.parsePrice(dataRowMatch[3]);
                const palladiumPrice = this.parsePrice(dataRowMatch[4]);
                
                if (goldPrice !== null) prices.gold = goldPrice;
                if (silverPrice !== null) prices.silver = silverPrice;
                if (platinumPrice !== null) prices.platinum = platinumPrice;
                if (palladiumPrice !== null) prices.palladium = palladiumPrice;
            }
            
            return Object.keys(prices).length > 0 ? prices : null;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML:', error);
            return null;
        }
    }

    parsePrice(priceStr) {
        try {
            // –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
            const cleanPrice = priceStr.replace(/<[^>]*>/g, '').trim();
            
            // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
            const normalizedPrice = cleanPrice.replace(/\s/g, '').replace(',', '.');
            
            const price = parseFloat(normalizedPrice);
            return isNaN(price) ? null : price;
            
        } catch (error) {
            return null;
        }
    }

    async close() {
        await this.pool.end();
    }
}

module.exports = MetalsPriceService;

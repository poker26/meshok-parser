const { Pool } = require('pg');
const config = require('./config');

async function fixMintageField() {
    const pool = new Pool(config.dbConfig);
    
    try {
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–ª—è mintage —Å INTEGER –Ω–∞ BIGINT...\n');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –ø–æ–ª—è
        const checkQuery = `
            SELECT column_name, data_type, numeric_precision, numeric_scale
            FROM information_schema.columns 
            WHERE table_name = 'coin_catalog' 
            AND column_name = 'mintage'
        `;
        
        const currentType = await pool.query(checkQuery);
        console.log('üìã –¢–µ–∫—É—â–∏–π —Ç–∏–ø –ø–æ–ª—è mintage:', currentType.rows[0]);
        
        // –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –ø–æ–ª—è –Ω–∞ BIGINT
        await pool.query(`
            ALTER TABLE coin_catalog 
            ALTER COLUMN mintage TYPE BIGINT
        `);
        console.log('‚úÖ –ü–æ–ª–µ mintage –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ BIGINT');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø –ø–æ–ª—è
        const newType = await pool.query(checkQuery);
        console.log('üìã –ù–æ–≤—ã–π —Ç–∏–ø –ø–æ–ª—è mintage:', newType.rows[0]);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        const problemQuery = `
            SELECT COUNT(*) as problem_count
            FROM coin_catalog 
            WHERE mintage > 2147483647
        `;
        
        const problemCount = await pool.query(problemQuery);
        console.log(`‚ö†Ô∏è –ó–∞–ø–∏—Å–µ–π —Å —Ç–∏—Ä–∞–∂–æ–º > 2,147,483,647: ${problemCount.rows[0].problem_count}`);
        
        if (problemCount.rows[0].problem_count > 0) {
            console.log('üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–ø–∏—Å–∏. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã:');
            
            const examplesQuery = `
                SELECT id, coin_name, mintage, original_description
                FROM coin_catalog 
                WHERE mintage > 2147483647
                LIMIT 5
            `;
            
            const examples = await pool.query(examplesQuery);
            examples.rows.forEach(row => {
                console.log(`  - ID: ${row.id}, –¢–∏—Ä–∞–∂: ${row.mintage}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${row.coin_name}`);
            });
        }
        
        console.log('\nüéâ –ü–æ–ª–µ mintage —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è mintage:', error.message);
        throw error;
    } finally {
        await pool.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
fixMintageField()
    .then(() => {
        console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        process.exit(0);
    })
    .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    });

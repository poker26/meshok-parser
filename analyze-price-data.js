/**
 * –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –ª–æ—Ç–æ–≤
 * –ò–∑—É—á–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É —Ü–µ–Ω–∞–º–∏ –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏
 */

const { Client } = require('pg');
const config = require('./config');

class PriceDataAnalyzer {
    constructor() {
        this.dbConfig = config.dbConfig;
        this.dbClient = new Client(this.dbConfig);
    }

    async init() {
        await this.dbClient.connect();
        console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    async analyzePriceCorrelations() {
        console.log('\nüìä –ê–ù–ê–õ–ò–ó –ö–û–†–†–ï–õ–Ø–¶–ò–ô –¶–ï–ù –° –†–ê–ó–õ–ò–ß–ù–´–ú–ò –§–ê–ö–¢–û–†–ê–ú–ò:');
        
        // 1. –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Ü–µ–Ω —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        console.log('\n1Ô∏è‚É£ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ü–µ–Ω —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏:');
        const conditionStats = await this.dbClient.query(`
            SELECT 
                condition,
                COUNT(*) as lots_count,
                AVG(winning_bid) as avg_price,
                MIN(winning_bid) as min_price,
                MAX(winning_bid) as max_price,
                PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY winning_bid) as median_price
            FROM auction_lots 
            WHERE winning_bid IS NOT NULL 
                AND winning_bid > 0
                AND condition IS NOT NULL
            GROUP BY condition
            HAVING COUNT(*) >= 10
            ORDER BY avg_price DESC
            LIMIT 20;
        `);
        
        console.log('üìã –¢–æ–ø-20 —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω–µ:');
        conditionStats.rows.forEach((row, index) => {
            console.log(`  ${index + 1}. "${row.condition}": ${row.lots_count} –ª–æ—Ç–æ–≤, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${Math.round(row.avg_price).toLocaleString()}‚ÇΩ`);
        });
        
        // 2. –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Ü–µ–Ω —Å –º–µ—Ç–∞–ª–ª–∞–º–∏
        console.log('\n2Ô∏è‚É£ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ü–µ–Ω —Å –º–µ—Ç–∞–ª–ª–∞–º–∏:');
        const metalStats = await this.dbClient.query(`
            SELECT 
                metal,
                COUNT(*) as lots_count,
                AVG(winning_bid) as avg_price,
                AVG(weight) as avg_weight,
                AVG(winning_bid / NULLIF(weight, 0)) as avg_price_per_gram
            FROM auction_lots 
            WHERE winning_bid IS NOT NULL 
                AND winning_bid > 0
                AND metal IS NOT NULL
                AND weight IS NOT NULL
                AND weight > 0
            GROUP BY metal
            HAVING COUNT(*) >= 5
            ORDER BY avg_price DESC;
        `);
        
        console.log('üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–∞–ª–ª–∞–º:');
        metalStats.rows.forEach((row, index) => {
            console.log(`  ${index + 1}. ${row.metal}: ${row.lots_count} –ª–æ—Ç–æ–≤, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${Math.round(row.avg_price).toLocaleString()}‚ÇΩ, —Ü–µ–Ω–∞ –∑–∞ –≥—Ä–∞–º–º: ${Math.round(row.avg_price_per_gram).toLocaleString()}‚ÇΩ/–≥`);
        });
        
        // 3. –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Ü–µ–Ω —Å –≥–æ–¥–∞–º–∏
        console.log('\n3Ô∏è‚É£ –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Ü–µ–Ω —Å –≥–æ–¥–∞–º–∏:');
        const yearStats = await this.dbClient.query(`
            SELECT 
                year,
                COUNT(*) as lots_count,
                AVG(winning_bid) as avg_price
            FROM auction_lots 
            WHERE winning_bid IS NOT NULL 
                AND winning_bid > 0
                AND year IS NOT NULL
                AND year ~ '^[0-9]+$'
                AND CAST(year AS INTEGER) BETWEEN 1800 AND 2025
            GROUP BY year
            HAVING COUNT(*) >= 5
            ORDER BY CAST(year AS INTEGER) DESC
            LIMIT 15;
        `);
        
        console.log('üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15):');
        yearStats.rows.forEach((row, index) => {
            console.log(`  ${index + 1}. ${row.year}: ${row.lots_count} –ª–æ—Ç–æ–≤, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${Math.round(row.avg_price).toLocaleString()}‚ÇΩ`);
        });
        
        // 4. –ê–Ω–∞–ª–∏–∑ –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ü–µ–Ω–æ–∫
        console.log('\n4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –Ω—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ü–µ–Ω–æ–∫:');
        
        // –î–ª—è –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç
        const goldPremium = await this.dbClient.query(`
            SELECT 
                condition,
                COUNT(*) as lots_count,
                AVG(winning_bid) as avg_price,
                AVG(weight * 0.9 * 5000) as estimated_metal_value, -- –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ Au
                AVG(winning_bid / NULLIF(weight * 0.9 * 5000, 0)) as numismatic_premium
            FROM auction_lots 
            WHERE winning_bid IS NOT NULL 
                AND winning_bid > 0
                AND metal = 'Au'
                AND weight IS NOT NULL
                AND weight > 0
                AND condition IS NOT NULL
            GROUP BY condition
            HAVING COUNT(*) >= 3
            ORDER BY numismatic_premium DESC;
        `);
        
        console.log('üìã –ù—É–º–∏–∑–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ü–µ–Ω–∫–∏ –¥–ª—è –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç:');
        goldPremium.rows.forEach((row, index) => {
            const premium = Math.round(row.numismatic_premium * 100) / 100;
            console.log(`  ${index + 1}. ${row.condition}: ${row.lots_count} –ª–æ—Ç–æ–≤, –Ω–∞—Ü–µ–Ω–∫–∞: ${premium}x (${Math.round((premium - 1) * 100)}%)`);
        });
        
        // 5. –ê–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –≤–µ—Å–∞ –Ω–∞ —Ü–µ–Ω—É
        console.log('\n5Ô∏è‚É£ –í–ª–∏—è–Ω–∏–µ –≤–µ—Å–∞ –Ω–∞ —Ü–µ–Ω—É:');
        const weightStats = await this.dbClient.query(`
            SELECT 
                CASE 
                    WHEN weight <= 1 THEN '‚â§1–≥'
                    WHEN weight <= 5 THEN '1-5–≥'
                    WHEN weight <= 10 THEN '5-10–≥'
                    WHEN weight <= 20 THEN '10-20–≥'
                    ELSE '>20–≥'
                END as weight_category,
                COUNT(*) as lots_count,
                AVG(winning_bid) as avg_price,
                AVG(winning_bid / NULLIF(weight, 0)) as avg_price_per_gram
            FROM auction_lots 
            WHERE winning_bid IS NOT NULL 
                AND winning_bid > 0
                AND weight IS NOT NULL
                AND weight > 0
            GROUP BY weight_category
            ORDER BY 
                CASE 
                    WHEN weight <= 1 THEN 1
                    WHEN weight <= 5 THEN 2
                    WHEN weight <= 10 THEN 3
                    WHEN weight <= 20 THEN 4
                    ELSE 5
                END;
        `);
        
        console.log('üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–µ—Å–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
        weightStats.rows.forEach((row, index) => {
            console.log(`  ${index + 1}. ${row.weight_category}: ${row.lots_count} –ª–æ—Ç–æ–≤, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${Math.round(row.avg_price).toLocaleString()}‚ÇΩ, —Ü–µ–Ω–∞ –∑–∞ –≥—Ä–∞–º–º: ${Math.round(row.avg_price_per_gram).toLocaleString()}‚ÇΩ/–≥`);
        });
    }

    async analyzeMarketTrends() {
        console.log('\nüìà –ê–ù–ê–õ–ò–ó –†–´–ù–û–ß–ù–´–• –¢–†–ï–ù–î–û–í:');
        
        // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –∞—É–∫—Ü–∏–æ–Ω–∞–º
        const auctionTrends = await this.dbClient.query(`
            SELECT 
                auction_number,
                COUNT(*) as lots_count,
                AVG(winning_bid) as avg_price,
                MIN(auction_end_date) as start_date,
                MAX(auction_end_date) as end_date
            FROM auction_lots 
            WHERE winning_bid IS NOT NULL 
                AND winning_bid > 0
                AND auction_end_date IS NOT NULL
            GROUP BY auction_number
            ORDER BY auction_number DESC
            LIMIT 10;
        `);
        
        console.log('üìã –¢—Ä–µ–Ω–¥—ã –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 10 –∞—É–∫—Ü–∏–æ–Ω–∞–º:');
        auctionTrends.rows.forEach((row, index) => {
            const date = new Date(row.start_date).toLocaleDateString('ru-RU');
            console.log(`  ${index + 1}. –ê—É–∫—Ü–∏–æ–Ω ${row.auction_number} (${date}): ${row.lots_count} –ª–æ—Ç–æ–≤, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${Math.round(row.avg_price).toLocaleString()}‚ÇΩ`);
        });
    }

    async generateInsights() {
        console.log('\nüí° –ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´ –î–õ–Ø –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø:');
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –ª–æ—Ç—ã
        const expensiveLots = await this.dbClient.query(`
            SELECT 
                lot_number,
                auction_number,
                condition,
                metal,
                weight,
                winning_bid,
                coin_description
            FROM auction_lots 
            WHERE winning_bid IS NOT NULL 
                AND winning_bid > 0
            ORDER BY winning_bid DESC
            LIMIT 10;
        `);
        
        console.log('\nüèÜ –¢–æ–ø-10 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –ª–æ—Ç–æ–≤:');
        expensiveLots.rows.forEach((lot, index) => {
            console.log(`  ${index + 1}. –õ–æ—Ç ${lot.lot_number} (–ê—É–∫—Ü–∏–æ–Ω ${lot.auction_number}): ${Math.round(lot.winning_bid).toLocaleString()}‚ÇΩ`);
            console.log(`     ${lot.condition} | ${lot.metal} | ${lot.weight}–≥ | ${lot.coin_description?.substring(0, 50)}...`);
        });
        
        // –ê–Ω–∞–ª–∏–∑ —Ä–µ–¥–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        const rareConditions = await this.dbClient.query(`
            SELECT 
                condition,
                COUNT(*) as frequency,
                AVG(winning_bid) as avg_price
            FROM auction_lots 
            WHERE winning_bid IS NOT NULL 
                AND winning_bid > 0
                AND condition IS NOT NULL
            GROUP BY condition
            HAVING COUNT(*) <= 5
            ORDER BY avg_price DESC;
        `);
        
        console.log('\nüíé –†–µ–¥–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≤—ã—Å–æ–∫–æ–π —Ü–µ–Ω–æ–π:');
        rareConditions.rows.forEach((row, index) => {
            console.log(`  ${index + 1}. "${row.condition}": ${row.frequency} –ª–æ—Ç–æ–≤, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${Math.round(row.avg_price).toLocaleString()}‚ÇΩ`);
        });
    }

    async run() {
        try {
            await this.init();
            
            console.log('üîç –ê–ù–ê–õ–ò–ó –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –û –¶–ï–ù–ê–• –õ–û–¢–û–í');
            console.log('üìã –¶–µ–ª—å: –≤—ã—è–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω');
            
            await this.analyzePriceCorrelations();
            await this.analyzeMarketTrends();
            await this.generateInsights();
            
            console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è.');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
        } finally {
            await this.dbClient.end();
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
async function main() {
    const analyzer = new PriceDataAnalyzer();
    await analyzer.run();
}

main();

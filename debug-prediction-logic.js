const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function debugPredictionLogic() {
    try {
        console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è...\n');
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–æ—Ç–æ–≤ —Å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const query = `
            SELECT 
                al.lot_number,
                al.coin_description,
                al.condition,
                al.metal,
                al.year,
                al.letters,
                lpp.predicted_price,
                lpp.prediction_method,
                lpp.sample_size,
                lpp.confidence_score
            FROM auction_lots al
            LEFT JOIN lot_price_predictions lpp ON al.id = lpp.lot_id
            WHERE al.auction_number = '968'
                AND lpp.sample_size > 0
                AND lpp.prediction_method = 'no_similar_lots'
            ORDER BY lpp.sample_size DESC
            LIMIT 5
        `;
        
        const result = await pool.query(query);
        
        console.log('üìä –õ–æ—Ç—ã —Å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:');
        result.rows.forEach(row => {
            console.log(`\n–õ–æ—Ç ${row.lot_number}:`);
            console.log(`  –û–ø–∏—Å–∞–Ω–∏–µ: ${row.coin_description.substring(0, 60)}...`);
            console.log(`  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${row.condition}, ${row.metal}, ${row.year}, ${row.letters}`);
            const price = (row.predicted_price && typeof row.predicted_price === 'number') ? row.predicted_price.toFixed(2) + '‚ÇΩ' : '–ù–µ—Ç';
            console.log(`  –ü—Ä–æ–≥–Ω–æ–∑: ${price}`);
            console.log(`  –ú–µ—Ç–æ–¥: ${row.prediction_method}`);
            console.log(`  –†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏: ${row.sample_size}`);
            console.log(`  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${row.confidence_score ? (row.confidence_score * 100).toFixed(1) + '%' : 'N/A'}`);
        });
        
        // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –∞–ª–≥–æ—Ä–∏—Ç–º–µ –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ –¥–ª—è –ª–æ—Ç–∞ 9...');
        
        const testLotQuery = `
            SELECT id, lot_number, condition, metal, year, letters, coin_description, auction_number
            FROM auction_lots 
            WHERE auction_number = '968' AND lot_number = '9'
        `;
        
        const testLotResult = await pool.query(testLotQuery);
        if (testLotResult.rows.length === 0) {
            console.log('‚ùå –õ–æ—Ç 9 –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        const lot = testLotResult.rows[0];
        console.log(`\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ—Ç ${lot.lot_number}:`);
        console.log(`  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${lot.condition}, ${lot.metal}, ${lot.year}, ${lot.letters}`);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–∏–Ω–∞–ª
        const denominationMatch = lot.coin_description.match(/(\d+)\s*—Ä—É–±–ª–µ–π?/i);
        const currentDenomination = denominationMatch ? denominationMatch[1] : null;
        console.log(`  –ù–æ–º–∏–Ω–∞–ª: ${currentDenomination || '–ù–µ –Ω–∞–π–¥–µ–Ω'}`);
        
        // –ò—â–µ–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –ª–æ—Ç—ã
        let similarQuery = `
            SELECT 
                id, lot_number, auction_number, winning_bid, coin_description, auction_end_date
            FROM auction_lots 
            WHERE condition = $1 
                AND metal = $2 
                AND year = $3 
                AND letters = $4
                AND winning_bid IS NOT NULL 
                AND winning_bid > 0
                AND id != $5
                AND auction_number != $6
        `;
        
        const params = [lot.condition, lot.metal, lot.year, lot.letters, lot.id, lot.auction_number];
        
        if (currentDenomination) {
            similarQuery += ` AND coin_description ~ $${params.length + 1}`;
            params.push(`\\m${currentDenomination}\\s*—Ä—É–±–ª–µ–π?\\M`);
        }
        
        similarQuery += ` ORDER BY auction_end_date DESC`;
        
        console.log(`\nüîç SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤:`);
        console.log(similarQuery);
        console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: [${params.join(', ')}]`);
        
        const similarResult = await pool.query(similarQuery, params);
        const similarLots = similarResult.rows;
        
        console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ª–æ—Ç–æ–≤: ${similarLots.length}`);
        
        if (similarLots.length > 0) {
            console.log('\nüìà –ü–µ—Ä–≤—ã–µ 3 –∞–Ω–∞–ª–æ–≥–∞:');
            similarLots.slice(0, 3).forEach(sLot => {
                console.log(`  - –õ–æ—Ç ${sLot.lot_number} (–ê—É–∫—Ü–∏–æ–Ω ${sLot.auction_number}): ${sLot.winning_bid.toFixed(2)}‚ÇΩ`);
            });
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
    } finally {
        await pool.end();
    }
}

debugPredictionLogic();

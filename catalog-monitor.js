const fs = require('fs');
const path = require('path');

class CatalogMonitor {
    constructor() {
        this.progressFile = './catalog-progress.json';
        this.errorLogFile = './catalog-errors.log';
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    showProgress() {
        try {
            if (!fs.existsSync(this.progressFile)) {
                console.log('‚ùå –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–∞—Ä—Å–µ—Ä –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è.');
                return;
            }

            const progress = JSON.parse(fs.readFileSync(this.progressFile, 'utf8'));
            
            console.log('üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:');
            console.log('=====================================');
            console.log(`üïê –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã: ${new Date(progress.startTime).toLocaleString()}`);
            console.log(`üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(progress.lastUpdate).toLocaleString()}`);
            console.log(`üìà –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π ID: ${progress.lastProcessedId}`);
            console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${progress.totalProcessed}`);
            console.log(`‚ùå –û—à–∏–±–æ–∫: ${progress.totalErrors}`);
            
            if (progress.totalProcessed > 0) {
                const successRate = ((progress.totalProcessed - progress.totalErrors) / progress.totalProcessed * 100).toFixed(2);
                console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${successRate}%`);
            }

            const duration = new Date(progress.lastUpdate) - new Date(progress.startTime);
            const hours = Math.floor(duration / (1000 * 60 * 60));
            const minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));
            console.log(`‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${hours}—á ${minutes}–º`);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error.message);
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
    showRecentErrors(count = 10) {
        try {
            if (!fs.existsSync(this.errorLogFile)) {
                console.log('‚úÖ –§–∞–π–ª –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—à–∏–±–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.');
                return;
            }

            const errorLog = fs.readFileSync(this.errorLogFile, 'utf8');
            const errors = errorLog.split('\n\n').filter(error => error.trim());
            
            console.log(`üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ ${Math.min(count, errors.length)} –æ—à–∏–±–æ–∫:`);
            console.log('=====================================');
            
            const recentErrors = errors.slice(-count);
            recentErrors.forEach((error, index) => {
                console.log(`\n${index + 1}. ${error}`);
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –æ—à–∏–±–æ–∫:', error.message);
        }
    }

    // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ—à–∏–±–æ–∫
    clearFiles() {
        try {
            if (fs.existsSync(this.progressFile)) {
                fs.unlinkSync(this.progressFile);
                console.log('‚úÖ –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω');
            }
            
            if (fs.existsSync(this.errorLogFile)) {
                fs.unlinkSync(this.errorLogFile);
                console.log('‚úÖ –§–∞–π–ª –æ—à–∏–±–æ–∫ —É–¥–∞–ª–µ–Ω');
            }
            
            console.log('üßπ –í—Å–µ —Ñ–∞–π–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–∏—â–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:', error.message);
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—à–∏–±–∫–∞–º
    showErrorStats() {
        try {
            if (!fs.existsSync(this.errorLogFile)) {
                console.log('‚úÖ –§–∞–π–ª –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—à–∏–±–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.');
                return;
            }

            const errorLog = fs.readFileSync(this.errorLogFile, 'utf8');
            const errors = errorLog.split('\n\n').filter(error => error.trim());
            
            console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫:');
            console.log('=====================');
            console.log(`üìà –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${errors.length}`);
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —Ç–∏–ø–∞–º
            const errorTypes = {};
            errors.forEach(error => {
                const match = error.match(/–õ–æ—Ç \d+-\d+: (.+?)\n/);
                if (match) {
                    const errorType = match[1];
                    errorTypes[errorType] = (errorTypes[errorType] || 0) + 1;
                }
            });
            
            console.log('\nüìã –¢–∏–ø—ã –æ—à–∏–±–æ–∫:');
            Object.entries(errorTypes)
                .sort(([,a], [,b]) => b - a)
                .forEach(([type, count]) => {
                    console.log(`   ${type}: ${count} —Ä–∞–∑`);
                });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫:', error.message);
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
    showHelp() {
        console.log('üîß –ú–æ–Ω–∏—Ç–æ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–Ω–µ—Ç');
        console.log('========================');
        console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node catalog-monitor.js [–∫–æ–º–∞–Ω–¥–∞]');
        console.log('');
        console.log('–ö–æ–º–∞–Ω–¥—ã:');
        console.log('  progress, p    - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å');
        console.log('  errors, e      - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏');
        console.log('  stats, s       - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫');
        console.log('  clear, c       - –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
        console.log('  help, h        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É');
        console.log('');
        console.log('–ü—Ä–∏–º–µ—Ä—ã:');
        console.log('  node catalog-monitor.js progress');
        console.log('  node catalog-monitor.js errors 20');
        console.log('  node catalog-monitor.js stats');
    }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞
async function main() {
    const monitor = new CatalogMonitor();
    const args = process.argv.slice(2);
    const command = args[0] || 'progress';
    const param = args[1];

    switch (command.toLowerCase()) {
        case 'progress':
        case 'p':
            monitor.showProgress();
            break;
            
        case 'errors':
        case 'e':
            const count = param ? parseInt(param) : 10;
            monitor.showRecentErrors(count);
            break;
            
        case 'stats':
        case 's':
            monitor.showErrorStats();
            break;
            
        case 'clear':
        case 'c':
            monitor.clearFiles();
            break;
            
        case 'help':
        case 'h':
        default:
            monitor.showHelp();
            break;
    }
}

if (require.main === module) {
    main();
}

module.exports = CatalogMonitor;

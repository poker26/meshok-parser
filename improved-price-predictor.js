/**
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω –ª–æ—Ç–æ–≤
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
 */

const { Client } = require('pg');
const config = require('./config');

class ImprovedPricePredictor {
    constructor() {
        this.dbConfig = config.dbConfig;
        this.dbClient = new Client(this.dbConfig);
        
        // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        this.conditionMultipliers = {
            // MS —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏ (–≤—ã—Å–æ–∫–∏–µ —Ü–µ–Ω—ã)
            'MS64': 4.4, 'MS61': 3.1, 'MS62': 2.7, 'MS65': 2.4, 'MS63': 2.2, 'MS60': 1.7, 'MS66': 1.2,
            'MS': 1.0, // –ë–∞–∑–æ–≤–∞—è MS
            
            // AU —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏
            'AU55': 3.0, 'AU58': 2.7, 'AU': 0.37, 'AU/UNC': 0.43,
            
            // –î—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            'UNC': 0.30, 'XF+/AU': 0.40, 'XF': 0.25, 'VF': 0.15, 'F': 0.10, 'G': 0.05,
            'PL': 0.61, 'XX': 0.67, 'Superb': 0.50, 'Gem': 0.36, 'Ch': 0.39
        };
        
        // –¶–µ–Ω—ã –º–µ—Ç–∞–ª–ª–æ–≤ (–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ)
        this.metalPrices = {
            'Au': 5000, 'Ag': 80, 'Pt': 3000, 'Cu': 5, 'Ni': 10, 'Fe': 2
        };
        
        // –ü—Ä–æ–±—ã –º–µ—Ç–∞–ª–ª–æ–≤
        this.metalPurities = {
            'Au': 0.9, 'Ag': 0.9, 'Pt': 0.95, 'Cu': 1.0, 'Ni': 1.0, 'Fe': 1.0
        };
        
        // –ë–∞–∑–æ–≤—ã–µ –≤–µ—Å–∞ –¥–ª—è –º–µ—Ç–∞–ª–ª–æ–≤ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω)
        this.defaultWeights = {
            'Au': 4.3,   // –¢–∏–ø–∏—á–Ω—ã–π –≤–µ—Å –∑–æ–ª–æ—Ç–æ–π –º–æ–Ω–µ—Ç—ã
            'Ag': 20.0,  // –¢–∏–ø–∏—á–Ω—ã–π –≤–µ—Å —Å–µ—Ä–µ–±—Ä—è–Ω–æ–π –º–æ–Ω–µ—Ç—ã
            'Cu': 10.0,  // –¢–∏–ø–∏—á–Ω—ã–π –≤–µ—Å –º–µ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
            'Fe': 8.0,   // –¢–∏–ø–∏—á–Ω—ã–π –≤–µ—Å –∂–µ–ª–µ–∑–Ω–æ–π –º–æ–Ω–µ—Ç—ã
            'Ni': 5.0    // –¢–∏–ø–∏—á–Ω—ã–π –≤–µ—Å –Ω–∏–∫–µ–ª–µ–≤–æ–π –º–æ–Ω–µ—Ç—ã
        };
    }

    async init() {
        await this.dbClient.connect();
        console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    async getHistoricalData(condition, metal) {
        const query = `
            SELECT 
                AVG(winning_bid) as avg_price,
                COUNT(*) as sample_size,
                AVG(weight) as avg_weight
            FROM auction_lots 
            WHERE winning_bid IS NOT NULL 
                AND winning_bid > 0
                AND condition = $1
                AND metal = $2
                AND weight IS NOT NULL
                AND weight > 0
            GROUP BY condition, metal;
        `;
        
        const result = await this.dbClient.query(query, [condition, metal]);
        return result.rows[0] || null;
    }

    // –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–µ—Ç–∞–ª–ª–∞
    calculateMetalValue(metal, weight) {
        if (!metal) return 0;
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –≤–µ—Å –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        const actualWeight = weight || this.defaultWeights[metal] || 5.0;
        
        const metalPrice = this.metalPrices[metal] || 0;
        const purity = this.metalPurities[metal] || 1.0;
        
        return actualWeight * purity * metalPrice;
    }

    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    async getConditionMultiplier(condition, metal) {
        if (!condition) return 0.1;
        
        // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if (this.conditionMultipliers[condition]) {
            return this.conditionMultipliers[condition];
        }
        
        // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for (const [key, value] of Object.entries(this.conditionMultipliers)) {
            if (condition.includes(key) || key.includes(condition)) {
                return value;
            }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        const historicalData = await this.getHistoricalData(condition, metal);
        if (historicalData && historicalData.sample_size >= 3) {
            // –ö–∞–ª–∏–±—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            const baseMetalValue = this.calculateMetalValue(metal, historicalData.avg_weight);
            if (baseMetalValue > 0) {
                return historicalData.avg_price / baseMetalValue;
            }
        }
        
        // –ë–∞–∑–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ —Ç–∏–ø—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (condition.includes('MS')) return 1.0;
        if (condition.includes('AU')) return 0.4;
        if (condition.includes('UNC')) return 0.3;
        if (condition.includes('XF')) return 0.25;
        if (condition.includes('VF')) return 0.15;
        if (condition.includes('F')) return 0.1;
        
        return 0.1;
    }

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    async predictPrice(lot) {
        const { metal, weight, condition, year, letters, coin_description } = lot;
        
        // 1. –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ç–∞–ª–ª–∞
        const metalValue = this.calculateMetalValue(metal, weight);
        
        // 2. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–æ–π)
        const conditionMultiplier = await this.getConditionMultiplier(condition, metal);
        
        // 3. –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        let predictedPrice = metalValue * conditionMultiplier;
        
        // 4. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≥–æ–¥
        if (year && !isNaN(year)) {
            const yearNum = parseInt(year);
            if (yearNum < 1800) {
                predictedPrice *= 2.0; // +100% –∑–∞ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ
            } else if (yearNum < 1900) {
                predictedPrice *= 1.5; // +50% –∑–∞ –¥–æ—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ
            } else if (yearNum < 1950) {
                predictedPrice *= 1.2; // +20% –∑–∞ —Å–æ–≤–µ—Ç—Å–∫–∏–µ –¥–æ 1950
            } else if (yearNum < 1990) {
                predictedPrice *= 1.1; // +10% –∑–∞ —Å–æ–≤–µ—Ç—Å–∫–∏–µ
            }
        }
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä
        if (letters) {
            if (letters.includes('–ê–†') || letters.includes('–°–ü–ë')) {
                predictedPrice *= 1.3; // +30% –∑–∞ —Å—Ç–æ–ª–∏—á–Ω—ã–µ
            } else if (letters.includes('–ï–ú')) {
                predictedPrice *= 1.1; // +10% –∑–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥
            }
        }
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ä–µ–¥–∫–æ—Å—Ç—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        if (coin_description) {
            const desc = coin_description.toLowerCase();
            if (desc.includes('—Ä–µ–¥–∫') || desc.includes('—É–Ω–∏–∫')) {
                predictedPrice *= 2.0; // +100% –∑–∞ —Ä–µ–¥–∫–∏–µ
            } else if (desc.includes('—Ç–∏—Ä–∞–∂') && desc.includes('–º–∞–ª')) {
                predictedPrice *= 1.5; // +50% –∑–∞ –º–∞–ª—ã–π —Ç–∏—Ä–∞–∂
            }
        }
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –º–µ—Ç–∞–ª–ª (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç–∞–ª–ª—ã –∏–º–µ—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å)
        if (metal === 'Pt') {
            predictedPrice *= 1.2; // +20% –∑–∞ –ø–ª–∞—Ç–∏–Ω—É
        } else if (metal === 'Cu' && condition && condition.includes('MS')) {
            predictedPrice *= 3.0; // +200% –∑–∞ –º–µ–¥–Ω—ã–µ –≤ MS (–æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–µ)
        }
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        predictedPrice = Math.max(predictedPrice, 100);
        
        return {
            predictedPrice: Math.round(predictedPrice),
            metalValue: Math.round(metalValue),
            numismaticPremium: Math.round(predictedPrice - metalValue),
            conditionMultiplier: conditionMultiplier,
            confidence: this.calculateConfidence(lot, conditionMultiplier)
        };
    }

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    calculateConfidence(lot, conditionMultiplier) {
        let confidence = 0.5; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (lot.metal) confidence += 0.2;
        if (lot.weight) confidence += 0.2;
        if (lot.condition) confidence += 0.2;
        if (lot.year) confidence += 0.1;
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ—á–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        if (this.conditionMultipliers[lot.condition]) {
            confidence += 0.2; // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        } else if (conditionMultiplier > 0.5) {
            confidence += 0.1; // –•–æ—Ä–æ—à–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
        } else {
            confidence -= 0.1; // –ù–∏–∑–∫–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
        }
        
        // –£–º–µ–Ω—å—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–¥–∫–∏—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        if (lot.metal === 'Pt' || lot.metal === 'Ni') {
            confidence -= 0.1; // –†–µ–¥–∫–∏–µ –º–µ—Ç–∞–ª–ª—ã
        }
        
        return Math.max(0.1, Math.min(1.0, confidence));
    }

    // –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
    async predictCurrentAuctionPrices(auctionNumber) {
        console.log(`\nüîÆ –£–õ–£–ß–®–ï–ù–ù–û–ï –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}:`);
        
        // –ü–æ–ª—É—á–∞–µ–º –ª–æ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
        const lots = await this.dbClient.query(`
            SELECT 
                id, lot_number, condition, metal, weight, year, letters,
                winning_bid, coin_description
            FROM auction_lots 
            WHERE auction_number = $1
            ORDER BY lot_number
            LIMIT 20;
        `, [auctionNumber]);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${lots.rows.length} –ª–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è`);
        
        const predictions = [];
        let totalAccuracy = 0;
        let validPredictions = 0;
        
        for (const lot of lots.rows) {
            const prediction = await this.predictPrice(lot);
            
            predictions.push({
                lotId: lot.id,
                lotNumber: lot.lot_number,
                condition: lot.condition,
                metal: lot.metal,
                weight: lot.weight,
                year: lot.year,
                predictedPrice: prediction.predictedPrice,
                metalValue: prediction.metalValue,
                numismaticPremium: prediction.numismaticPremium,
                confidence: prediction.confidence,
                actualPrice: lot.winning_bid,
                description: lot.coin_description
            });
            
            console.log(`üìã –õ–æ—Ç ${lot.lot_number}: ${lot.condition} | ${lot.metal} | ${lot.weight || '–Ω–µ—Ç'}–≥`);
            console.log(`   –ü—Ä–æ–≥–Ω–æ–∑: ${prediction.predictedPrice.toLocaleString()}‚ÇΩ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(prediction.confidence * 100).toFixed(0)}%)`);
            console.log(`   –ú–µ—Ç–∞–ª–ª: ${prediction.metalValue.toLocaleString()}‚ÇΩ | –ù–∞—Ü–µ–Ω–∫–∞: ${prediction.numismaticPremium.toLocaleString()}‚ÇΩ`);
            
            if (lot.winning_bid) {
                const accuracy = Math.abs(prediction.predictedPrice - lot.winning_bid) / lot.winning_bid * 100;
                const accuracyPercent = Math.max(0, 100 - accuracy);
                console.log(`   –§–∞–∫—Ç: ${lot.winning_bid.toLocaleString()}‚ÇΩ | –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracyPercent.toFixed(1)}%`);
                totalAccuracy += accuracyPercent;
                validPredictions++;
            }
            console.log('');
        }
        
        if (validPredictions > 0) {
            const avgAccuracy = totalAccuracy / validPredictions;
            console.log(`üìä –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: ${avgAccuracy.toFixed(1)}%`);
        }
        
        return predictions;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    async savePredictions(predictions) {
        console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await this.dbClient.query(`
            CREATE TABLE IF NOT EXISTS lot_price_predictions (
                id SERIAL PRIMARY KEY,
                lot_id INTEGER UNIQUE REFERENCES auction_lots(id),
                predicted_price DECIMAL(12,2),
                metal_value DECIMAL(12,2),
                numismatic_premium DECIMAL(12,2),
                confidence_score DECIMAL(3,2),
                prediction_method VARCHAR(50) DEFAULT 'improved_model',
                created_at TIMESTAMP DEFAULT NOW()
            );
        `);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
        for (const prediction of predictions) {
            await this.dbClient.query(`
                INSERT INTO lot_price_predictions 
                (lot_id, predicted_price, metal_value, numismatic_premium, confidence_score, prediction_method)
                VALUES ($1, $2, $3, $4, $5, 'improved_model')
                ON CONFLICT (lot_id) DO UPDATE SET
                    predicted_price = EXCLUDED.predicted_price,
                    metal_value = EXCLUDED.metal_value,
                    numismatic_premium = EXCLUDED.numismatic_premium,
                    confidence_score = EXCLUDED.confidence_score,
                    prediction_method = EXCLUDED.prediction_method,
                    created_at = NOW();
            `, [
                prediction.lotId,
                prediction.predictedPrice,
                prediction.metalValue,
                prediction.numismaticPremium,
                prediction.confidence
            ]);
        }
        
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${predictions.length} —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤`);
    }

    async run() {
        try {
            await this.init();
            
            console.log('üîÆ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø –¶–ï–ù –õ–û–¢–û–í');
            console.log('üìã –ú–æ–¥–µ–ª—å —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–æ–π –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–∞–∫—Ç–æ—Ä–∞–º–∏');
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –∞—É–∫—Ü–∏–æ–Ω–µ
            const predictions = await this.predictCurrentAuctionPrices('964');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
            await this.savePredictions(predictions);
            
            console.log('\n‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        } finally {
            await this.dbClient.end();
        }
    }
}

// –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
    const predictor = new ImprovedPricePredictor();
    await predictor.run();
}

main();

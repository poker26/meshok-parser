const puppeteer = require('puppeteer-core');
const { Client } = require('pg');
const fs = require('fs');
const config = require('./config');

class NumismatAuctionParser {
    constructor(dbConfig, auctionNumber) {
        this.dbConfig = dbConfig;
        this.dbClient = null;
        this.browser = null;
        this.page = null;
        this.processed = 0;
        this.errors = 0;
        this.skipped = 0;
        this.auctionNumber = auctionNumber;
        this.sourceSite = 'numismat.ru';
        this.progressFile = `numismat_progress_${auctionNumber}.json`;
        this.retryCount = 0;
        this.maxRetries = config.parserConfig.maxRetries;
    }

    async init() {
        try {
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Numismat –ø–∞—Ä—Å–µ—Ä–∞...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await this.testDatabaseConnection();
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await this.createTable();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
            await this.initBrowser();
            
            console.log('‚úÖ Numismat –ø–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
            throw error;
        }
    }

    async testDatabaseConnection() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            const testClient = new Client(this.dbConfig);
            await testClient.connect();
            await testClient.query('SELECT 1');
            await testClient.end();
            
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
            
            this.dbClient = new Client(this.dbConfig);
            await this.dbClient.connect();
            
            this.dbClient.on('error', async (err) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î:', err.message);
                await this.handleDatabaseError(err);
            });
            
        } catch (error) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${error.message}`);
        }
    }

    async handleDatabaseError(err) {
        if (this.retryCount >= this.maxRetries) {
            console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            return;
        }

        this.retryCount++;
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.retryCount}/${this.maxRetries}...`);
        
        try {
            if (this.dbClient) {
                await this.dbClient.end();
            }
            
            await this.delay(config.parserConfig.retryDelay);
            
            this.dbClient = new Client(this.dbConfig);
            await this.dbClient.connect();
            
            this.dbClient.on('error', async (err) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î:', err.message);
                await this.handleDatabaseError(err);
            });
            
            this.retryCount = 0;
            console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
            
        } catch (reconnectError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', reconnectError.message);
        }
    }

    async initBrowser() {
        console.log('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...');
        
        try {
            this.browser = await puppeteer.launch(config.browserConfig);
            this.page = await this.browser.newPage();
            
            await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
            
            console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
            throw error;
        }
    }

    async createTable() {
        try {
            console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –¥–ª—è Numismat...');
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –∏ –µ—Å—Ç—å –ª–∏ –≤ –Ω–µ–π –ø–æ–ª–µ source_site
            const checkTableQuery = `
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'auction_lots' AND column_name = 'source_site';
            `;
            const checkResult = await this.dbClient.query(checkTableQuery);
            
            if (checkResult.rows.length === 0) {
                console.log('üîÑ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ source_site –≤ —Ç–∞–±–ª–∏—Ü—É auction_lots...');
                const addSourceSiteQuery = `
                    ALTER TABLE auction_lots 
                    ADD COLUMN IF NOT EXISTS source_site VARCHAR(50) DEFAULT 'wolmar.ru';
                `;
                await this.dbClient.query(addSourceSiteQuery);
                
                // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è starting_bid –∏ lot_type –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                const addStartingBidQuery = `
                    ALTER TABLE auction_lots 
                    ADD COLUMN IF NOT EXISTS starting_bid DECIMAL(12, 2);
                `;
                await this.dbClient.query(addStartingBidQuery);
                
                const addLotTypeQuery = `
                    ALTER TABLE auction_lots 
                    ADD COLUMN IF NOT EXISTS lot_type VARCHAR(50);
                `;
                await this.dbClient.query(addLotTypeQuery);
                
                // –ü–æ–ª—è –¥–ª—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
                console.log('‚úÖ –ü–æ–ª—è –¥–ª—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ');
                
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ...');
                try {
                    const dropOldConstraintQuery = `
                        ALTER TABLE auction_lots 
                        DROP CONSTRAINT IF EXISTS auction_lots_lot_number_auction_number_key;
                    `;
                    await this.dbClient.query(dropOldConstraintQuery);
                    
                    const addNewConstraintQuery = `
                        ALTER TABLE auction_lots 
                        ADD CONSTRAINT auction_lots_unique 
                        UNIQUE (lot_number, auction_number, source_site);
                    `;
                    await this.dbClient.query(addNewConstraintQuery);
                    console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
                } catch (constraintError) {
                    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
                }
                
                console.log('‚úÖ –ü–æ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É auction_lots');
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª–æ—Ç–æ–≤ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–ª–µ–º source_site)
            const createLotsTableQuery = `
                CREATE TABLE IF NOT EXISTS auction_lots (
                    id SERIAL PRIMARY KEY,
                    lot_number VARCHAR(50),
                    auction_number VARCHAR(50),
                    source_site VARCHAR(50) DEFAULT 'wolmar.ru',
                    coin_description TEXT,
                    avers_image_url TEXT,
                    avers_image_path TEXT,
                    revers_image_url TEXT,
                    revers_image_path TEXT,
                    winner_login VARCHAR(100),
                    winning_bid DECIMAL(12, 2),
                    starting_bid DECIMAL(12, 2),
                    auction_end_date TIMESTAMP,
                    currency VARCHAR(10) DEFAULT 'RUB',
                    parsed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    source_url TEXT,
                    bids_count INTEGER,
                    lot_status VARCHAR(20),
                    year INTEGER,
                    letters VARCHAR(10),
                    metal VARCHAR(10),
                    condition VARCHAR(20),
                    lot_type VARCHAR(50),
                    UNIQUE(lot_number, auction_number, source_site)
                );
            `;
            await this.dbClient.query(createLotsTableQuery);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Å—ã–ª–æ–∫
            const checkUrlsTableQuery = `
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'auction_lot_urls' AND column_name = 'source_site';
            `;
            const checkUrlsResult = await this.dbClient.query(checkUrlsTableQuery);
            
            if (checkUrlsResult.rows.length === 0) {
                console.log('üîÑ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ source_site –≤ —Ç–∞–±–ª–∏—Ü—É auction_lot_urls...');
                const addSourceSiteUrlsQuery = `
                    ALTER TABLE auction_lot_urls 
                    ADD COLUMN IF NOT EXISTS source_site VARCHAR(50) DEFAULT 'wolmar.ru';
                `;
                await this.dbClient.query(addSourceSiteUrlsQuery);
                console.log('‚úÖ –ü–æ–ª–µ source_site –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É auction_lot_urls');
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã
            const createUrlsTableQuery = `
                CREATE TABLE IF NOT EXISTS auction_lot_urls (
                    id SERIAL PRIMARY KEY,
                    auction_number VARCHAR(50),
                    source_site VARCHAR(50) DEFAULT 'wolmar.ru',
                    lot_url TEXT NOT NULL,
                    lot_number VARCHAR(50),
                    page_number INTEGER,
                    url_index INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(auction_number, source_site, lot_url)
                );
            `;
            await this.dbClient.query(createUrlsTableQuery);
            
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã –¥–ª—è Numismat');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error.message);
            throw error;
        }
    }

    async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async recreatePage() {
        try {
            if (this.page && !this.page.isClosed()) {
                await this.page.close();
            }
            this.page = await this.browser.newPage();
            await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
            console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
            return false;
        }
    }

    async ensurePageActive() {
        if (!this.page || this.page.isClosed()) {
            console.log('üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...');
            return await this.recreatePage();
        }
        return true;
    }

    async isDatabaseAvailable() {
        try {
            await this.dbClient.query('SELECT 1');
            return true;
        } catch (error) {
            return false;
        }
    }

    async safeQuery(query, params = []) {
        try {
            return await this.dbClient.query(query, params);
        } catch (error) {
            if (error.message.includes('Connection terminated') || 
                error.message.includes('connection') || 
                error.message.includes('not queryable')) {
                
                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
                await this.handleDatabaseError(error);
                
                return await this.dbClient.query(query, params);
            }
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ
    async getAuctionInfo(auctionUrl) {
        try {
            await this.ensurePageActive();
            await this.page.goto(auctionUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
            await this.delay(2000);

            const auctionInfo = await this.page.evaluate(() => {
                const info = {};

                // –ù–∞–∑–≤–∞–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞
                const titleElement = document.querySelector('h1');
                if (titleElement) {
                    info.title = titleElement.textContent.trim();
                }

                // –î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞
                const dateElement = document.querySelector('h1 + p, h1 + div');
                if (dateElement) {
                    const dateText = dateElement.textContent;
                    const dateMatch = dateText.match(/(\d{1,2}\s+(?:—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+\d{4}\s+–≥\.)/i);
                    if (dateMatch) {
                        info.endDate = dateMatch[1];
                    }
                }

                // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ—Ç–æ–≤ - –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                const pageText = document.body.textContent;
                const lotsMatch = pageText.match(/–≤—Å–µ–≥–æ –ª–æ—Ç–æ–≤:\s*(\d+)/i);
                if (lotsMatch) {
                    info.totalLots = parseInt(lotsMatch[1]);
                }

                // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                const paginationLinks = document.querySelectorAll('a[href*="page="]');
                let maxPage = 1;
                paginationLinks.forEach(link => {
                    const pageMatch = link.href.match(/page=(\d+)/);
                    if (pageMatch) {
                        const pageNum = parseInt(pageMatch[1]);
                        if (pageNum > maxPage) {
                            maxPage = pageNum;
                        }
                    }
                });
                info.maxPage = maxPage;

                return info;
            });

            return auctionInfo;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ:', error.message);
            return null;
        }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ—Ç–æ–≤ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async parseLotsFromPage(pageUrl, pageNumber) {
        try {
            await this.ensurePageActive();
            await this.page.goto(pageUrl, { waitUntil: 'domcontentloaded', timeout: 30000 });
            await this.delay(2000);

            const lotsData = await this.page.evaluate((auctionNumber, sourceSite, pageNumber) => {
                const lots = [];

                // –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –ª–æ—Ç–æ–≤ - –Ω–∞ numismat.ru –ª–æ—Ç—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ div —Å –∫–ª–∞—Å—Å–æ–º "lot_in"
                const lotBlocks = document.querySelectorAll('.lot_in');
                
                lotBlocks.forEach((block, index) => {
                    try {
                        const lot = {
                            auctionNumber: auctionNumber,
                            sourceSite: sourceSite,
                            pageNumber: pageNumber
                        };

                        // –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º –ª–æ—Ç–∞
                        const parentElement = block.closest('.zapis');
                        if (parentElement) {
                            const lotHeader = parentElement.querySelector('h3');
                            if (lotHeader) {
                                const lotNumberMatch = lotHeader.textContent.match(/–õ–æ—Ç\s*(\d+)/i);
                                if (lotNumberMatch) {
                                    lot.lotNumber = lotNumberMatch[1];
                                }
                            }
                        }

                        // –û–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞
                        const descriptionElement = block.querySelector('p:not(.price)');
                        if (descriptionElement) {
                            lot.coinDescription = descriptionElement.textContent.trim();
                        }

                        // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        const images = block.querySelectorAll('img');
                        if (images.length >= 1) {
                            lot.aversImageUrl = images[0].src || images[0].getAttribute('data-src');
                        }
                        if (images.length >= 2) {
                            lot.reversImageUrl = images[1].src || images[1].getAttribute('data-src');
                        }

                        // –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞
                        const priceElement = block.querySelector('.price');
                        if (priceElement) {
                            const startPriceMatch = priceElement.textContent.match(/–°—Ç–∞—Ä—Ç:\s*(\d+(?:\s?\d+)*)/);
                            if (startPriceMatch) {
                                lot.startingBid = startPriceMatch[1].replace(/\s/g, '');
                            }
                        }

                        // –ò—â–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ü–µ–Ω—ã –≤ —ç–ª–µ–º–µ–Ω—Ç–µ .shop-priceN
                        if (parentElement) {
                            const priceElement = parentElement.querySelector('.shop-priceN');
                            if (priceElement) {
                                const priceText = priceElement.textContent.trim();
                                
                                // –ü–∞—Ç—Ç–µ—Ä–Ω: –≤—Ä–µ–º—è + —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ + –∏—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞
                                // –ü—Ä–∏–º–µ—Ä: "12:04:00 08.11.20242 0009 500"
                                const timeMatch = priceText.match(/(\d{2}:\d{2}:\d{2}\s+\d{2}\.\d{2}\.\d{4})/);
                                if (timeMatch) {
                                    // –í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç PostgreSQL
                                    const timeStr = timeMatch[1]; // "12:04:00 08.11.2024"
                                    const [time, date] = timeStr.split(' ');
                                    const [day, month, year] = date.split('.');
                                    lot.auctionEndDate = `${year}-${month}-${day} ${time}`;
                                    
                                    // –ò—â–µ–º —á–∏—Å–ª–∞ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏
                                    const afterTime = priceText.substring(priceText.indexOf(timeMatch[1]) + timeMatch[1].length);
                                    
                                    // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∏—â–µ–º –¥–≤–∞ —á–∏—Å–ª–∞ –ø–æ–¥—Ä—è–¥
                                    const cleanNumbers = afterTime.replace(/\s/g, '');
                                    
                                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É –∏–∑ .price —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                                    if (lot.startingBid) {
                                        const startPriceStr = lot.startingBid;
                                        
                                        // –ò—â–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É –≤ —Å—Ç—Ä–æ–∫–µ –∏ –±–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ –Ω–µ—ë –∫–∞–∫ –∏—Ç–æ–≥–æ–≤—É—é
                                        const startPriceIndex = cleanNumbers.indexOf(startPriceStr);
                                        if (startPriceIndex !== -1) {
                                            const finalPriceStr = cleanNumbers.substring(startPriceIndex + startPriceStr.length);
                                            if (finalPriceStr && finalPriceStr !== '0' && finalPriceStr.length >= 2) {
                                                lot.winningBid = finalPriceStr;
                                            }
                                        }
                                    } else {
                                        // Fallback: –µ—Å–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
                                        const numbersMatch = cleanNumbers.match(/(\d{4})(\d+)/);
                                        if (numbersMatch) {
                                            lot.startingBid = numbersMatch[1];
                                            const finalPrice = numbersMatch[2];
                                            if (finalPrice && finalPrice !== '0' && finalPrice.length >= 2) {
                                                lot.winningBid = finalPrice;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                        const yearMatch = lot.coinDescription?.match(/(\d{4})\s*–≥/);
                        if (yearMatch) {
                            lot.year = parseInt(yearMatch[1]);
                        }

                        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–æ—Ç–∞
                        if (lot.coinDescription?.toLowerCase().includes('–º–æ–Ω–µ—Ç–∞')) {
                            lot.lotType = 'coin';
                        } else if (lot.coinDescription?.toLowerCase().includes('–±–∞–Ω–∫–Ω–æ—Ç')) {
                            lot.lotType = 'banknote';
                        } else if (lot.coinDescription?.toLowerCase().includes('–¥–æ–∫—É–º–µ–Ω—Ç')) {
                            lot.lotType = 'document';
                        } else if (lot.coinDescription?.toLowerCase().includes('–≤–µ–∫—Å–µ–ª—å')) {
                            lot.lotType = 'document';
                        } else if (lot.coinDescription?.toLowerCase().includes('–æ–±–ª–∏–≥–∞—Ü')) {
                            lot.lotType = 'document';
                        } else if (lot.coinDescription?.toLowerCase().includes('–±–∏–ª–µ—Ç')) {
                            lot.lotType = 'document';
                        } else {
                            lot.lotType = 'other';
                        }

                        // –°—Ç–∞—Ç—É—Å –ª–æ—Ç–∞ - –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
                        lot.lotStatus = 'closed';

                        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                        if (lot.lotNumber && lot.coinDescription) {
                            lots.push(lot);
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ—Ç–∞:', error);
                    }
                });

                return lots;
            }, this.auctionNumber, this.sourceSite, pageNumber);

            return lotsData;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${pageNumber}:`, error.message);
            return [];
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
    async parseEntireAuction(auctionUrl, options = {}) {
        const {
            maxLots = null,           
            skipExisting = true,      
            delayBetweenPages = 1000,  
            batchSize = 50,          
            testMode = false,
            startPage = 1
        } = options;

        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∞—É–∫—Ü–∏–æ–Ω–∞ Numismat...');
        console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏: maxLots=${maxLots}, skipExisting=${skipExisting}, delay=${delayBetweenPages}ms, testMode=${testMode}, startPage=${startPage}`);

        try {
            if (!(await this.isDatabaseAvailable())) {
                throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ
            const auctionInfo = await this.getAuctionInfo(auctionUrl);
            if (!auctionInfo) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ');
            }

            console.log(`üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É–∫—Ü–∏–æ–Ω–µ:`);
            console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${auctionInfo.title}`);
            console.log(`   –î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${auctionInfo.endDate}`);
            console.log(`   –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: ${auctionInfo.totalLots}`);
            console.log(`   –°—Ç—Ä–∞–Ω–∏—Ü: ${auctionInfo.maxPage}`);

            const pagesToProcess = testMode ? Math.min(3, auctionInfo.maxPage) : auctionInfo.maxPage;
            console.log(`üìã –†–µ–∂–∏–º: ${testMode ? '–¢–ï–°–¢' : '–ü–û–õ–ù–´–ô'} - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${pagesToProcess} —Å—Ç—Ä–∞–Ω–∏—Ü`);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
            for (let page = startPage; page <= pagesToProcess; page++) {
                console.log(`\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${page}/${pagesToProcess}...`);
                
                const pageUrl = page === 1 ? 
                    auctionUrl : 
                    `${auctionUrl}&page=${page}`;
                
                try {
                    const lotsData = await this.parseLotsFromPage(pageUrl, page);
                    
                    if (lotsData.length === 0) {
                        console.log(`‚ö†Ô∏è –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤`);
                        continue;
                    }

                    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page}: ${lotsData.length}`);

                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ª–æ—Ç–∞
                    for (const lotData of lotsData) {
                        try {
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–∞
                            if (skipExisting && lotData.lotNumber) {
                                const exists = await this.lotExists(lotData.auctionNumber, lotData.lotNumber, lotData.sourceSite);
                                if (exists) {
                                    console.log(`‚è≠Ô∏è –õ–æ—Ç ${lotData.lotNumber} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                                    this.skipped++;
                                    continue;
                                }
                            }

                            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                            const savedId = await this.saveLotToDatabase(lotData);
                            if (savedId) {
                                this.processed++;
                                console.log(`‚úÖ –õ–æ—Ç ${lotData.lotNumber}: ${lotData.coinDescription?.substring(0, 50)}...`);
                                console.log(`   üí∞ ${lotData.startingBid} ‚Üí ${lotData.winningBid} —Ä—É–±. | üìÖ ${lotData.auctionEndDate || '–¥–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
                            } else {
                                console.log(`‚ö†Ô∏è –õ–æ—Ç ${lotData.lotNumber} –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î`);
                            }

                        } catch (error) {
                            this.errors++;
                            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ—Ç–∞ ${lotData.lotNumber}:`, error.message);
                        }
                    }

                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
                    await this.delay(delayBetweenPages);

                } catch (error) {
                    this.errors++;
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}:`, error.message);
                    continue;
                }
            }

            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            console.log(`\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
            console.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
            console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.processed}`);
            console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö): ${this.skipped}`);
            console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${this.errors}`);

        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞:', error.message);
            throw error;
        }
    }

    async lotExists(auctionNumber, lotNumber, sourceSite) {
        try {
            const query = 'SELECT id FROM auction_lots WHERE auction_number = $1 AND lot_number = $2 AND source_site = $3';
            const result = await this.safeQuery(query, [auctionNumber, lotNumber, sourceSite]);
            return result.rows.length > 0;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–æ—Ç–∞:', error.message);
            return false;
        }
    }

    async saveLotToDatabase(lotData) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–æ—Ç
        const exists = await this.lotExists(lotData.auctionNumber, lotData.lotNumber, lotData.sourceSite);
        if (exists) {
            console.log(`‚è≠Ô∏è –õ–æ—Ç ${lotData.lotNumber} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            return null;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        console.log(`üì∑ –ê–≤–µ—Ä—Å URL: ${lotData.aversImageUrl || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
        console.log(`üì∑ –†–µ–≤–µ—Ä—Å URL: ${lotData.reversImageUrl || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);

        const insertQuery = `
            INSERT INTO auction_lots (
                lot_number, auction_number, source_site, coin_description, 
                winner_login, winning_bid, starting_bid, auction_end_date, 
                source_url, lot_status, year, lot_type, avers_image_url, revers_image_url
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
            RETURNING id;
        `;

        const values = [
            lotData.lotNumber || null,
            lotData.auctionNumber || null,
            lotData.sourceSite || 'numismat.ru',
            lotData.coinDescription || null,
            lotData.winnerLogin || null,
            lotData.winningBid ? parseFloat(lotData.winningBid) : null,
            lotData.startingBid ? parseFloat(lotData.startingBid) : null,
            lotData.auctionEndDate || null,
            lotData.sourceUrl || null,
            lotData.lotStatus || null,
            lotData.year ? parseInt(lotData.year) : null,
            lotData.lotType || null,
            lotData.aversImageUrl || null,
            lotData.reversImageUrl || null
        ];

        try {
            const result = await this.safeQuery(insertQuery, values);
            return result.rows[0].id;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', error.message);
            return null;
        }
    }


    async close() {
        try {
            if (this.page && !this.page.isClosed()) {
                await this.page.close();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
        }
        
        try {
            if (this.browser) {
                await this.browser.close();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
        }
        
        try {
            if (this.dbClient) {
                await this.dbClient.end();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î:', error.message);
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main(auctionNumber) {
    const parser = new NumismatAuctionParser(config.dbConfig, auctionNumber);
    
    try {
        await parser.init();
        
        const auctionUrl = `https://numismat.ru/au.shtml?au=${auctionNumber}`;
        await parser.parseEntireAuction(auctionUrl, {
            maxLots: null,
            skipExisting: true,
            delayBetweenPages: config.parserConfig.delayBetweenLots,
            batchSize: config.parserConfig.batchSize,
            testMode: false
        });
        
    } catch (error) {
        console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
        try {
            await parser.close();
        } catch (closeError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', closeError.message);
        }
    }
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function testRun(auctionNumber) {
    const parser = new NumismatAuctionParser(config.dbConfig, auctionNumber);
    
    try {
        await parser.init();
        
        const auctionUrl = `https://numismat.ru/au.shtml?au=${auctionNumber}`;
        await parser.parseEntireAuction(auctionUrl, {
            maxLots: 10,
            skipExisting: false,
            delayBetweenPages: 1000,
            batchSize: 5,
            testMode: true
        });
        
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    } finally {
        try {
            await parser.close();
        } catch (closeError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', closeError.message);
        }
    }
}

module.exports = NumismatAuctionParser;

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    (async () => {
        const args = process.argv.slice(2);
        
        if (args.length === 0) {
            console.log('üöÄ Numismat Auction Parser v1.0');
            console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
            console.log('  main <–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞>              - –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∞—É–∫—Ü–∏–æ–Ω–∞');
            console.log('  test <–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞>              - –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ (3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)');
            console.log('');
            console.log('–ü—Ä–∏–º–µ—Ä—ã:');
            console.log('  node numismat-parser.js main 1054');
            console.log('  node numismat-parser.js test 1054');
            return;
        }

        const command = args[0];
        const auctionNumber = args[1];

        if (!auctionNumber) {
            console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞');
            return;
        }

        console.log(`üöÄ Numismat Auction Parser v1.0 - –ê—É–∫—Ü–∏–æ–Ω ${auctionNumber}`);

        try {
            switch (command) {
                case 'main':
                    console.log(`üìç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
                    await main(auctionNumber);
                    break;
                    
                case 'test':
                    console.log(`üìç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
                    await testRun(auctionNumber);
                    break;
                    
                default:
                    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
                    console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: main, test');
            }
        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        }
    })();
}

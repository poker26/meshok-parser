const { Client } = require('pg');

const dbConfig = {
    user: 'postgres.xkwgspqwebfeteoblayu',        
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',   
    password: 'Gopapopa326+',    
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    }
};

async function analyzeLotsForFiltering() {
    const client = new Client(dbConfig);
    
    try {
        await client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
        
        console.log('\nüìä –ê–ù–ê–õ–ò–ó –õ–û–¢–û–í –î–õ–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò:');
        console.log('='.repeat(60));
        
        // 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const totalQuery = `
            SELECT COUNT(*) as total
            FROM auction_lots 
            WHERE source_url IS NOT NULL;
        `;
        const totalResult = await client.query(totalQuery);
        console.log(`üìä –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤ –≤ –±–∞–∑–µ: ${totalResult.rows[0].total}`);
        
        // 2. –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏ (—Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–∏—Ñ—Ä—ã)
        const withGradesQuery = `
            SELECT COUNT(*) as count
            FROM auction_lots 
            WHERE source_url IS NOT NULL 
            AND condition ~ '[0-9]';
        `;
        const withGradesResult = await client.query(withGradesQuery);
        console.log(`‚úÖ –õ–æ—Ç–æ–≤ —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏ (—Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–∏—Ñ—Ä—ã): ${withGradesResult.rows[0].count}`);
        
        // 3. –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–µ–∑ –≥—Ä–∞–¥–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)
        const withoutGradesQuery = `
            SELECT COUNT(*) as count
            FROM auction_lots 
            WHERE source_url IS NOT NULL 
            AND condition !~ '[0-9]'
            AND condition IS NOT NULL
            AND condition != '';
        `;
        const withoutGradesResult = await client.query(withoutGradesQuery);
        console.log(`‚ö†Ô∏è –õ–æ—Ç–æ–≤ –±–µ–∑ –≥—Ä–∞–¥–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã): ${withoutGradesResult.rows[0].count}`);
        
        // 4. –ê–Ω–∞–ª–∏–∑ –ø—É—Å—Ç—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        const emptyQuery = `
            SELECT COUNT(*) as count
            FROM auction_lots 
            WHERE source_url IS NOT NULL 
            AND (condition IS NULL OR condition = '');
        `;
        const emptyResult = await client.query(emptyQuery);
        console.log(`‚ùå –õ–æ—Ç–æ–≤ —Å –ø—É—Å—Ç—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏: ${emptyResult.rows[0].count}`);
        
        // 5. –¢–æ–ø-20 —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–µ–∑ –≥—Ä–∞–¥–∞—Ü–∏–π (–∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
        const topWithoutGradesQuery = `
            SELECT condition, COUNT(*) as count
            FROM auction_lots 
            WHERE source_url IS NOT NULL 
            AND condition !~ '[0-9]'
            AND condition IS NOT NULL
            AND condition != ''
            GROUP BY condition
            ORDER BY count DESC
            LIMIT 20;
        `;
        const topWithoutGradesResult = await client.query(topWithoutGradesQuery);
        
        console.log('\nüìã –¢–û–ü-20 —Å–æ—Å—Ç–æ—è–Ω–∏–π –ë–ï–ó –≥—Ä–∞–¥–∞—Ü–∏–π (–∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ):');
        topWithoutGradesResult.rows.forEach((row, index) => {
            console.log(`${index + 1}. "${row.condition}": ${row.count} –ª–æ—Ç–æ–≤`);
        });
        
        // 6. –¢–æ–ø-20 —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏ (—É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ)
        const topWithGradesQuery = `
            SELECT condition, COUNT(*) as count
            FROM auction_lots 
            WHERE source_url IS NOT NULL 
            AND condition ~ '[0-9]'
            GROUP BY condition
            ORDER BY count DESC
            LIMIT 20;
        `;
        const topWithGradesResult = await client.query(topWithGradesQuery);
        
        console.log('\n‚úÖ –¢–û–ü-20 —Å–æ—Å—Ç–æ—è–Ω–∏–π –° –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏ (—É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ):');
        topWithGradesResult.rows.forEach((row, index) => {
            console.log(`${index + 1}. "${row.condition}": ${row.count} –ª–æ—Ç–æ–≤`);
        });
        
        // 7. –ê–Ω–∞–ª–∏–∑ –ø–æ –∞—É–∫—Ü–∏–æ–Ω–∞–º
        const byAuctionQuery = `
            SELECT 
                auction_number,
                COUNT(*) as total_lots,
                COUNT(CASE WHEN condition ~ '[0-9]' THEN 1 END) as with_grades,
                COUNT(CASE WHEN condition !~ '[0-9]' AND condition IS NOT NULL AND condition != '' THEN 1 END) as without_grades,
                COUNT(CASE WHEN condition IS NULL OR condition = '' THEN 1 END) as empty
            FROM auction_lots 
            WHERE source_url IS NOT NULL
            GROUP BY auction_number
            ORDER BY auction_number DESC
            LIMIT 10;
        `;
        const byAuctionResult = await client.query(byAuctionQuery);
        
        console.log('\nüìä –ê–ù–ê–õ–ò–ó –ü–û –ê–£–ö–¶–ò–û–ù–ê–ú (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):');
        console.log('–ê—É–∫—Ü–∏–æ–Ω | –í—Å–µ–≥–æ | –° –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏ | –ë–µ–∑ –≥—Ä–∞–¥–∞—Ü–∏–π | –ü—É—Å—Ç—ã–µ');
        console.log('-'.repeat(60));
        byAuctionResult.rows.forEach(row => {
            const withGrades = row.with_grades || 0;
            const withoutGrades = row.without_grades || 0;
            const empty = row.empty || 0;
            const total = row.total_lots;
            
            console.log(`${row.auction_number.padEnd(8)} | ${total.toString().padEnd(5)} | ${withGrades.toString().padEnd(12)} | ${withoutGrades.toString().padEnd(13)} | ${empty}`);
        });
        
        // 8. –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏
        const needUpdate = withoutGradesResult.rows[0].count + emptyResult.rows[0].count;
        const total = totalResult.rows[0].total;
        const alreadyCorrect = withGradesResult.rows[0].count;
        
        console.log('\nüéØ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–ê–Ø –≠–ö–û–ù–û–ú–ò–Ø:');
        console.log('='.repeat(40));
        console.log(`üìä –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: ${total}`);
        console.log(`‚úÖ –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ: ${alreadyCorrect} (${(alreadyCorrect/total*100).toFixed(1)}%)`);
        console.log(`‚ö†Ô∏è –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å: ${needUpdate} (${(needUpdate/total*100).toFixed(1)}%)`);
        console.log(`üöÄ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: ${(alreadyCorrect/total*100).toFixed(1)}%`);
        
        // 9. –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const lotsToUpdateQuery = `
            SELECT id, lot_number, auction_number, condition, source_url
            FROM auction_lots 
            WHERE source_url IS NOT NULL 
            AND (condition !~ '[0-9]' OR condition IS NULL OR condition = '')
            AND condition NOT IN ('AU/UNC', 'XF+/AU', 'VF/XF', 'UNC', 'AU', 'XF', 'VF', 'VF+', 'XF+', 'XF-', 'VF-')
            ORDER BY auction_number DESC, lot_number
            LIMIT 100;
        `;
        const lotsToUpdateResult = await client.query(lotsToUpdateQuery);
        
        console.log('\nüìã –ü–†–ò–ú–ï–†–´ –õ–û–¢–û–í –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø (–ø–µ—Ä–≤—ã–µ 20):');
        lotsToUpdateResult.rows.slice(0, 20).forEach((row, index) => {
            console.log(`${index + 1}. –ê—É–∫—Ü–∏–æ–Ω ${row.auction_number}, –õ–æ—Ç ${row.lot_number}: "${row.condition || 'NULL'}"`);
        });
        
        // 10. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        const analysisResults = {
            total: total,
            withGrades: alreadyCorrect,
            withoutGrades: withoutGradesResult.rows[0].count,
            empty: emptyResult.rows[0].count,
            needUpdate: needUpdate,
            savingsPercent: (alreadyCorrect/total*100).toFixed(1),
            topWithoutGrades: topWithoutGradesResult.rows,
            topWithGrades: topWithGradesResult.rows,
            byAuction: byAuctionResult.rows,
            lotsToUpdate: lotsToUpdateResult.rows
        };
        
        const fs = require('fs');
        fs.writeFileSync('filtering_analysis.json', JSON.stringify(analysisResults, null, 2));
        console.log('\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: filtering_analysis.json');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await client.end();
    }
}

analyzeLotsForFiltering();

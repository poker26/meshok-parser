#!/bin/bash

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥—É–ª–µ–º path
# path - —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å Node.js, –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ node_modules

echo "üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ú–û–î–£–õ–ï–ú PATH..."
echo "====================================="

cd /var/www/catalog-interface

echo "üìä –≠–¢–ê–ü 1: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞..."
echo "=============================="

pm2 stop catalog-interface 2>/dev/null || true
pm2 delete catalog-interface 2>/dev/null || true

echo "‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

echo ""
echo "üìä –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ server.js..."
echo "======================================="

if [ -f "server.js" ]; then
    echo "üìã –°—Ç—Ä–æ–∫–∞ 48:"
    sed -n '48p' server.js
    echo ""
    echo "üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç—Ä–æ–∫–∏ 48 (—Å—Ç—Ä–æ–∫–∏ 45-50):"
    sed -n '45,50p' server.js
else
    echo "‚ùå server.js –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

echo ""
echo "üìä –≠–¢–ê–ü 3: –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ server.js..."
echo "==========================================="

# –°–æ–∑–¥–∞–µ–º server.js –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
cat > server.js << 'EOF'
const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbConfig = {
    user: 'postgres.xkwgspqwebfeteoblayu',
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',
    password: 'Gopapopa326+',
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    }
};

const app = express();
const PORT = 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool(dbConfig);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
pool.on('connect', () => {
    console.log('üóÑÔ∏è –ö–ê–¢–ê–õ–û–ì: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

pool.on('error', (err) => {
    console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
});

// –¢–µ—Å—Ç–æ–≤—ã–π API
app.get('/api/test', (req, res) => {
    console.log('üß™ –ö–ê–¢–ê–õ–û–ì: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
    res.json({ 
        message: '–ö–∞—Ç–∞–ª–æ–≥ –º–æ–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
        timestamp: new Date().toISOString(),
        port: PORT,
        status: 'ok'
    });
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤
app.get('/api/auctions', async (req, res) => {
    try {
        console.log('üìä –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤');
        const query = `
            SELECT 
                auction_number,
                COUNT(*) as lots_count,
                MIN(auction_end_date) as start_date,
                MAX(auction_end_date) as end_date,
                SUM(winning_bid) as total_value,
                AVG(winning_bid) as avg_bid,
                MAX(winning_bid) as max_bid,
                MIN(winning_bid) as min_bid
            FROM auction_lots 
            WHERE auction_number IS NOT NULL
            GROUP BY auction_number
            ORDER BY auction_number DESC
        `;
        
        const result = await pool.query(query);
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –∞—É–∫—Ü–∏–æ–Ω–æ–≤`);
        res.json(result.rows);
    } catch (error) {
        console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—É–∫—Ü–∏–æ–Ω–∞—Ö' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞
app.get('/api/auctions/:auctionNumber/lots', async (req, res) => {
    try {
        const { auctionNumber } = req.params;
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å –ª–æ—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        
        const query = `
            SELECT 
                id, lot_number, coin_description, avers_image_url, revers_image_url,
                winner_login, winning_bid, auction_end_date, bids_count,
                metal, condition, year
            FROM auction_lots 
            WHERE auction_number = $1
            ORDER BY lot_number::int
        `;
        
        const result = await pool.query(query, [auctionNumber]);
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ª–æ—Ç–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        res.json(result.rows);
    } catch (error) {
        console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–∞—Ö' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞
app.get('/api/lots/:id', async (req, res) => {
    try {
        const { id } = req.params;
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞ ${id}`);
        
        const query = `
            SELECT 
                id, lot_number, auction_number, coin_description,
                avers_image_url, revers_image_url, winner_login,
                winning_bid, auction_end_date, bids_count,
                metal, condition, year
            FROM auction_lots 
            WHERE id = $1
        `;
        
        const result = await pool.query(query, [id]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(result.rows[0]);
    } catch (error) {
        console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–µ' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞
app.get('/api/auctions/:auctionNumber/stats', async (req, res) => {
    try {
        const { auctionNumber } = req.params;
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        
        const query = `
            SELECT 
                COUNT(*) as total_lots,
                SUM(winning_bid) as total_value,
                AVG(winning_bid) as avg_bid,
                MAX(winning_bid) as max_bid,
                MIN(winning_bid) as min_bid,
                COUNT(DISTINCT winner_login) as unique_winners,
                COUNT(DISTINCT metal) as unique_metals,
                COUNT(DISTINCT condition) as unique_conditions
            FROM auction_lots 
            WHERE auction_number = $1
        `;
        
        const result = await pool.query(query, [auctionNumber]);
        res.json(result.rows[0]);
    } catch (error) {
        console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞' });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
app.get('/api/filters', async (req, res) => {
    try {
        const { auctionNumber } = req.query;
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber || '–≤—Å–µ—Ö'}`);
        
        let whereClause = '';
        const queryParams = [];
        
        if (auctionNumber) {
            whereClause = 'WHERE auction_number = $1';
            queryParams.push(auctionNumber);
        }
        
        const query = `
            SELECT 
                metal,
                condition,
                year
            FROM auction_lots 
            ${whereClause}
            GROUP BY metal, condition, year
            ORDER BY metal, condition, year
        `;
        
        const result = await pool.query(query, queryParams);
        
        const filters = {
            metals: [...new Set(result.rows.map(row => row.metal).filter(Boolean))],
            conditions: [...new Set(result.rows.map(row => row.condition).filter(Boolean))],
            years: [...new Set(result.rows.map(row => row.year).filter(Boolean))].sort()
        };
        
        res.json(filters);
    } catch (error) {
        console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤' });
    }
});

// Catch-all handler –¥–ª—è SPA
app.get('*', (req, res) => {
    console.log(`üåê –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${req.path}`);
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log(`üöÄ –ö–ê–¢–ê–õ–û–ì –ú–û–ù–ï–¢ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä API –∫–∞—Ç–∞–ª–æ–≥–∞: http://localhost:${PORT}/api`);
    console.log(`üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞—Ç–∞–ª–æ–≥–∞: http://localhost:${PORT}`);
    console.log(`üîó –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø: http://46.173.19.68:${PORT}`);
    console.log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π API: http://localhost:${PORT}/api/test`);
});
EOF

echo "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π server.js —Å–æ–∑–¥–∞–Ω"

echo ""
echo "üìä –≠–¢–ê–ü 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞..."
echo "==============================="

echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ server.js:"
node -c server.js 2>&1

if [ $? -eq 0 ]; then
    echo "‚úÖ server.js —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ server.js"
    exit 1
fi

echo ""
echo "üìä –≠–¢–ê–ü 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π Node.js..."
echo "=============================================="

echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π:"
node -e "console.log('path:', require('path')); console.log('fs:', require('fs')); console.log('os:', require('os'));"

echo ""
echo "üìä –≠–¢–ê–ü 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
echo "================================="

echo "üìã –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ server.js (5 —Å–µ–∫—É–Ω–¥):"
timeout 5 node server.js 2>&1 || echo "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π"

echo ""
echo "üìä –≠–¢–ê–ü 7: –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ PM2..."
echo "============================="

pm2 start server.js --name "catalog-interface"

if [ $? -eq 0 ]; then
    echo "‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ PM2"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ PM2"
    exit 1
fi

echo ""
echo "‚è≥ –≠–¢–ê–ü 8: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
echo "============================="

sleep 5

echo ""
echo "üìä –≠–¢–ê–ü 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∫–∞—Ç–∞–ª–æ–≥–∞..."
echo "==================================="

echo "üîç –°—Ç–∞—Ç—É—Å PM2:"
pm2 status

echo ""
echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ API:"
curl -s http://localhost:3000/api/test
if [ $? -eq 0 ]; then
    echo "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå –¢–µ—Å—Ç–æ–≤—ã–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
fi

echo ""
echo "üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞—É–∫—Ü–∏–æ–Ω–æ–≤:"
curl -s http://localhost:3000/api/auctions > /dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ API –∞—É–∫—Ü–∏–æ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå API –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
fi

echo ""
echo "üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞:"
curl -s http://46.173.19.68:3000/api/test
if [ $? -eq 0 ]; then
    echo "‚úÖ –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "üåê –ö–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–µ–Ω: http://46.173.19.68:3000"
else
    echo "‚ùå –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
fi

echo ""
echo "üìã –õ–æ–≥–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:"
pm2 logs catalog-interface --lines 10

echo ""
echo "‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ú–û–î–£–õ–ï–ú PATH –ó–ê–í–ï–†–®–ï–ù–û!"
echo "=============================================="
echo "üåê –ö–∞—Ç–∞–ª–æ–≥ –º–æ–Ω–µ—Ç: http://46.173.19.68:3000"
echo "üß™ –¢–µ—Å—Ç–æ–≤—ã–π API: http://46.173.19.68:3000/api/test"
echo "üìä API –∞—É–∫—Ü–∏–æ–Ω–æ–≤: http://46.173.19.68:3000/api/auctions"
echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: pm2 status"
echo "üìã –õ–æ–≥–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: pm2 logs catalog-interface"

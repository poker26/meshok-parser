const axios = require('axios');

async function debugCBRParsing() {
    try {
        console.log('üîç –û—Ç–ª–∞–∂–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –¶–ë –†–§...');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
        const testDate = '17.09.2025';
        const url = `https://cbr.ru/hd_base/metall/metall_base_new/?UniDbQuery.From=${testDate}&UniDbQuery.To=${testDate}&UniDbQuery.Gold=true&UniDbQuery.Silver=true&UniDbQuery.Platinum=true&UniDbQuery.Palladium=true&UniDbQuery.Posted=True&UniDbQuery.so=1`;
        
        console.log(`üìÖ –¢–µ—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞: ${testDate}`);
        console.log(`üîó URL: ${url}`);
        
        const response = await axios.get(url, { 
            timeout: 15000,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
        });

        console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
        console.log(`üìè –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${response.data.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const fs = require('fs');
        fs.writeFileSync('cbr-response.html', response.data);
        console.log('üíæ HTML –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª cbr-response.html');
        
        // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ HTML
        const html = response.data;
        
        // –ò—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        const tableMatches = html.match(/<table[^>]*>[\s\S]*?<\/table>/g);
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tableMatches ? tableMatches.length : 0}`);
        
        if (tableMatches) {
            tableMatches.forEach((table, index) => {
                console.log(`\nüìä –¢–∞–±–ª–∏—Ü–∞ ${index + 1}:`);
                console.log(`   –†–∞–∑–º–µ—Ä: ${table.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                
                // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
                const rowMatches = table.match(/<tr[^>]*>[\s\S]*?<\/tr>/g);
                console.log(`   –°—Ç—Ä–æ–∫: ${rowMatches ? rowMatches.length : 0}`);
                
                if (rowMatches && rowMatches.length > 0) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
                    const sampleRows = rowMatches.slice(0, 3);
                    sampleRows.forEach((row, rowIndex) => {
                        console.log(`   –°—Ç—Ä–æ–∫–∞ ${rowIndex + 1}: ${row.substring(0, 200)}...`);
                    });
                }
            });
        }
        
        // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–µ—Ç–∞–ª–ª–æ–≤
        const metals = ['–∑–æ–ª–æ—Ç', '—Å–µ—Ä–µ–±—Ä', '–ø–ª–∞—Ç–∏–Ω', '–ø–∞–ª–ª–∞–¥–∏'];
        metals.forEach(metal => {
            const matches = html.match(new RegExp(metal, 'gi'));
            console.log(`üîç –£–ø–æ–º–∏–Ω–∞–Ω–∏–π "${metal}": ${matches ? matches.length : 0}`);
        });
        
        // –ò—â–µ–º —Ü–µ–Ω—ã (—á–∏—Å–ª–∞ —Å –∑–∞–ø—è—Ç—ã–º–∏)
        const priceMatches = html.match(/\d+,\d+/g);
        console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω (—Ñ–æ—Ä–º–∞—Ç X,XX): ${priceMatches ? priceMatches.length : 0}`);
        if (priceMatches && priceMatches.length > 0) {
            console.log(`   –ü—Ä–∏–º–µ—Ä—ã: ${priceMatches.slice(0, 10).join(', ')}`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error.message);
    }
}

debugCBRParsing();

#!/bin/bash

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–Ω–µ—Ç –≤ –∏–∑–æ–ª—è—Ü–∏–∏
# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∞–π—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞—Ç–∞–ª–æ–≥

echo "üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ê–õ–û–ì–ê –í –ò–ó–û–õ–Ø–¶–ò–ò..."
echo "===================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
if [ ! -f "/var/www/wolmar-parser/server.js" ]; then
    echo "‚ùå –û—à–∏–±–∫–∞: –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤ /var/www/wolmar-parser"
    exit 1
fi

cd /var/www/wolmar-parser

echo "üìä –≠–¢–ê–ü 1: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞..."
echo "===================================="

echo "üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –í–°–ï–• –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ PM2..."
pm2 stop all 2>/dev/null || true
pm2 delete all 2>/dev/null || true

echo ""
echo "üîÑ –£–±–∏–π—Å—Ç–≤–æ –≤—Å–µ—Ö Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
pkill -f "node.*server.js" || true
pkill -f "node.*3000" || true
pkill -f "node.*3001" || true
pkill -f "node.*3002" || true

echo ""
echo "üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤..."
sleep 3

echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã:"
netstat -tlnp | grep -E ":(3000|3001|3002)" || echo "–ü–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã"

echo ""
echo "üìä –≠–¢–ê–ü 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞..."
echo "=============================="

echo "üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ç–∫—É web-interface..."
git checkout web-interface --force

echo ""
echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞..."
rm -rf /var/www/catalog-interface
mkdir -p /var/www/catalog-interface
cd /var/www/catalog-interface

echo ""
echo "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞..."
cp -r /var/www/wolmar-parser/public/ ./
cp /var/www/wolmar-parser/package.json ./
cp /var/www/wolmar-parser/package-lock.json ./
cp /var/www/wolmar-parser/config.example.js ./

echo ""
echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ server.js –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞..."
# –°–æ–∑–¥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–π server.js –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
cat > server.js << 'EOF'
const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');
const path = require('path');
const config = require('./config');

const app = express();
const PORT = 3000; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 3000

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// Database connection
const pool = new Pool(config.dbConfig);

// Test database connection
pool.on('connect', () => {
    console.log('üóÑÔ∏è –ö–ê–¢–ê–õ–û–ì: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
});

pool.on('error', (err) => {
    console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
});

// –ü—Ä–æ—Å—Ç–æ–π API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
app.get('/api/test', (req, res) => {
    console.log('üß™ –ö–ê–¢–ê–õ–û–ì: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
    res.json({ 
        message: '–ö–∞—Ç–∞–ª–æ–≥ –º–æ–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
        timestamp: new Date().toISOString(),
        port: PORT
    });
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤
app.get('/api/auctions', async (req, res) => {
    try {
        console.log('üìä –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤');
        const query = `
            SELECT 
                auction_number,
                COUNT(*) as lots_count,
                MIN(auction_end_date) as start_date,
                MAX(auction_end_date) as end_date,
                SUM(winning_bid) as total_value,
                AVG(winning_bid) as avg_bid,
                MAX(winning_bid) as max_bid,
                MIN(winning_bid) as min_bid
            FROM auction_lots 
            WHERE auction_number IS NOT NULL
            GROUP BY auction_number
            ORDER BY auction_number DESC
        `;
        
        const result = await pool.query(query);
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –∞—É–∫—Ü–∏–æ–Ω–æ–≤`);
        res.json(result.rows);
    } catch (error) {
        console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—É–∫—Ü–∏–æ–Ω–∞—Ö' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –ª–æ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞
app.get('/api/auctions/:auctionNumber/lots', async (req, res) => {
    try {
        const { auctionNumber } = req.params;
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å –ª–æ—Ç–æ–≤ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        const { page = 1, limit = 20, search, metal, condition, year, minPrice, maxPrice } = req.query;
        
        const offset = (page - 1) * limit;
        let whereClause = 'WHERE auction_number = $1';
        const queryParams = [auctionNumber];
        let paramCount = 1;
        
        if (search) {
            paramCount++;
            whereClause += ` AND coin_description ILIKE $${paramCount}`;
            queryParams.push(`%${search}%`);
        }
        
        if (metal) {
            paramCount++;
            whereClause += ` AND metal = $${paramCount}`;
            queryParams.push(metal);
        }
        
        if (condition) {
            paramCount++;
            whereClause += ` AND condition = $${paramCount}`;
            queryParams.push(condition);
        }
        
        if (year) {
            paramCount++;
            whereClause += ` AND year = $${paramCount}`;
            queryParams.push(year);
        }
        
        if (minPrice) {
            paramCount++;
            whereClause += ` AND winning_bid >= $${paramCount}`;
            queryParams.push(parseFloat(minPrice));
        }
        
        if (maxPrice) {
            paramCount++;
            whereClause += ` AND winning_bid <= $${paramCount}`;
            queryParams.push(parseFloat(maxPrice));
        }
        
        const query = `
            SELECT 
                id, lot_number, coin_description, avers_image_url, revers_image_url,
                winner_login, winning_bid, auction_end_date, bids_count,
                metal, condition, year
            FROM auction_lots 
            ${whereClause}
            ORDER BY lot_number::int
            LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}
        `;
        
        queryParams.push(parseInt(limit), offset);
        
        const result = await pool.query(query, queryParams);
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –ª–æ—Ç–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        res.json(result.rows);
    } catch (error) {
        console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–∞—Ö' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ
app.get('/api/lots/:id', async (req, res) => {
    try {
        const { id } = req.params;
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞ ${id}`);
        const query = `
            SELECT 
                id, lot_number, auction_number, coin_description,
                avers_image_url, revers_image_url, winner_login,
                winning_bid, auction_end_date, bids_count,
                metal, condition, year
            FROM auction_lots 
            WHERE id = $1
        `;
        
        const result = await pool.query(query, [id]);
        
        if (result.rows.length === 0) {
            return res.status(404).json({ error: '–õ–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }
        
        res.json(result.rows[0]);
    } catch (error) {
        console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ—Ç–µ' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—É–∫—Ü–∏–æ–Ω–∞
app.get('/api/auctions/:auctionNumber/stats', async (req, res) => {
    try {
        const { auctionNumber } = req.params;
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}`);
        const query = `
            SELECT 
                COUNT(*) as total_lots,
                SUM(winning_bid) as total_value,
                AVG(winning_bid) as avg_bid,
                MAX(winning_bid) as max_bid,
                MIN(winning_bid) as min_bid,
                COUNT(DISTINCT winner_login) as unique_winners,
                COUNT(DISTINCT metal) as unique_metals,
                COUNT(DISTINCT condition) as unique_conditions
            FROM auction_lots 
            WHERE auction_number = $1
        `;
        
        const result = await pool.query(query, [auctionNumber]);
        res.json(result.rows[0]);
    } catch (error) {
        console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É–∫—Ü–∏–æ–Ω–∞' });
    }
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
app.get('/api/filters', async (req, res) => {
    try {
        const { auctionNumber } = req.query;
        console.log(`üìä –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber || '–≤—Å–µ—Ö'}`);
        let whereClause = '';
        const queryParams = [];
        
        if (auctionNumber) {
            whereClause = 'WHERE auction_number = $1';
            queryParams.push(auctionNumber);
        }
        
        const query = `
            SELECT 
                metal,
                condition,
                year
            FROM auction_lots 
            ${whereClause}
            GROUP BY metal, condition, year
            ORDER BY metal, condition, year
        `;
        
        const result = await pool.query(query, queryParams);
        
        const filters = {
            metals: [...new Set(result.rows.map(row => row.metal).filter(Boolean))],
            conditions: [...new Set(result.rows.map(row => row.condition).filter(Boolean))],
            years: [...new Set(result.rows.map(row => row.year).filter(Boolean))].sort()
        };
        
        res.json(filters);
    } catch (error) {
        console.error('‚ùå –ö–ê–¢–ê–õ–û–ì: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤' });
    }
});

// Catch-all handler –¥–ª—è SPA –∫–∞—Ç–∞–ª–æ–≥–∞
app.get('*', (req, res) => {
    console.log(`üåê –ö–ê–¢–ê–õ–û–ì: –ó–∞–ø—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${req.path}`);
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Start server
app.listen(PORT, () => {
    console.log(`üöÄ –ö–ê–¢–ê–õ–û–ì –ú–û–ù–ï–¢ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä API –∫–∞—Ç–∞–ª–æ–≥–∞: http://localhost:${PORT}/api`);
    console.log(`üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞—Ç–∞–ª–æ–≥–∞: http://localhost:${PORT}`);
    console.log(`üîó –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø: http://46.173.19.68:${PORT}`);
    console.log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π API: http://localhost:${PORT}/api/test`);
});
EOF

echo "‚úÖ –ü—Ä–æ—Å—Ç–æ–π server.js —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞"

echo ""
echo "‚öôÔ∏è –≠–¢–ê–ü 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
cp config.example.js config.js

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–î
if ! grep -q "postgres.xkwgspqwebfeteoblayu" config.js; then
    echo "‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º..."
    cat > config.js << 'EOF'
module.exports = {
    dbConfig: {
        user: 'postgres.xkwgspqwebfeteoblayu',
        host: 'aws-0-eu-north-1.pooler.supabase.com',
        database: 'postgres',
        password: 'Gopapopa326+',
        port: 6543,
        ssl: {
            rejectUnauthorized: false
        }
    }
};
EOF
    echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î —Å–æ–∑–¥–∞–Ω–∞"
else
    echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î –Ω–∞–π–¥–µ–Ω–∞"
fi

echo ""
echo "üì¶ –≠–¢–ê–ü 4: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
npm install

if [ $? -eq 0 ]; then
    echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    exit 1
fi

echo ""
echo "üß™ –≠–¢–ê–ü 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ server.js..."
node -c server.js
if [ $? -eq 0 ]; then
    echo "‚úÖ server.js —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ server.js"
    exit 1
fi

echo ""
echo "üöÄ –≠–¢–ê–ü 6: –ó–∞–ø—É—Å–∫ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–Ω–µ—Ç..."
pm2 start server.js --name "catalog-interface"

if [ $? -eq 0 ]; then
    echo "‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –º–æ–Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ PM2"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–æ–Ω–µ—Ç"
    exit 1
fi

echo ""
echo "‚è≥ –≠–¢–ê–ü 7: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞..."
sleep 5

echo ""
echo "üìä –≠–¢–ê–ü 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞..."
echo "================================="

echo "üîç –°—Ç–∞—Ç—É—Å PM2:"
pm2 status

echo ""
echo "üîç –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç–∞—Ö:"
netstat -tlnp | grep -E ":(3000|3001|3002)"

echo ""
echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ API:"
curl -s http://localhost:3000/api/test
if [ $? -eq 0 ]; then
    echo "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå –¢–µ—Å—Ç–æ–≤—ã–π API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
fi

echo ""
echo "üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞—É–∫—Ü–∏–æ–Ω–æ–≤:"
curl -s http://localhost:3000/api/auctions > /dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ API –∞—É–∫—Ü–∏–æ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "‚ùå API –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
fi

echo ""
echo "üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:"
curl -s http://localhost:3000/ | grep -o '<title>.*</title>' || echo "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"

echo ""
echo "üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞:"
curl -s http://46.173.19.68:3000/api/test
if [ $? -eq 0 ]; then
    echo "‚úÖ –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ä–∞–±–æ—Ç–∞–µ—Ç"
    echo "üåê –ö–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–µ–Ω: http://46.173.19.68:3000"
else
    echo "‚ùå –í–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
fi

echo ""
echo "üìã –õ–æ–≥–∏ –∫–∞—Ç–∞–ª–æ–≥–∞:"
pm2 logs catalog-interface --lines 10

echo ""
echo "‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–ê–¢–ê–õ–û–ì–ê –ó–ê–í–ï–†–®–ï–ù–û!"
echo "============================================="
echo "üåê –ö–∞—Ç–∞–ª–æ–≥ –º–æ–Ω–µ—Ç: http://46.173.19.68:3000"
echo "üß™ –¢–µ—Å—Ç–æ–≤—ã–π API: http://46.173.19.68:3000/api/test"
echo "üìä API –∞—É–∫—Ü–∏–æ–Ω–æ–≤: http://46.173.19.68:3000/api/auctions"
echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: pm2 status"
echo "üìã –õ–æ–≥–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: pm2 logs catalog-interface"

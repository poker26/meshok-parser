const puppeteer = require('puppeteer');

async function testMeshokLongWait() {
    try {
        console.log('üîç –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Chrome —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º...');
        
        const browser = await puppeteer.connect({
            browserURL: 'http://localhost:9222'
        });

        const page = await browser.newPage();
        
        // –í–∫–ª—é—á–∞–µ–º JavaScript –∏ cookies
        await page.setJavaScriptEnabled(true);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º user agent
        await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36');
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Meshok
        console.log('ü™ô –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ Meshok...');
        await page.goto('https://meshok.net/good/252', {
            waitUntil: 'networkidle2',
            timeout: 60000
        });
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ JavaScript - –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –í–†–ï–ú–Ø
        console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ JavaScript (30 —Å–µ–∫—É–Ω–¥)...');
        await new Promise(resolve => setTimeout(resolve, 30000));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        const status = await page.evaluate(() => {
            const challenge = document.querySelector('#challenge-error-text');
            const body = document.body ? document.body.textContent : '';
            
            return {
                hasChallenge: !!challenge,
                challengeText: challenge ? challenge.textContent : null,
                bodyLength: body.length,
                hasMeshokContent: body.toLowerCase().includes('–º–æ–Ω–µ—Ç—ã') || body.toLowerCase().includes('—Ç–æ–≤–∞—Ä'),
                title: document.title,
                url: window.location.href
            };
        });
        
        console.log('üìä –°–¢–ê–¢–£–° –ü–û–°–õ–ï 30 –°–ï–ö–£–ù–î:');
        console.log('Challenge –∞–∫—Ç–∏–≤–µ–Ω:', status.hasChallenge);
        console.log('Challenge —Ç–µ–∫—Å—Ç:', status.challengeText);
        console.log('–î–ª–∏–Ω–∞ body:', status.bodyLength);
        console.log('–ï—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç Meshok:', status.hasMeshokContent);
        console.log('–ó–∞–≥–æ–ª–æ–≤–æ–∫:', status.title);
        console.log('URL:', status.url);
        
        const content = await page.content();
        console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –¥–ª–∏–Ω–∞:', content.length);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (status.hasChallenge) {
            console.log('‚ùå Challenge –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ 30 —Å–µ–∫—É–Ω–¥');
        } else if (status.hasMeshokContent && content.length > 50000) {
            console.log('‚úÖ –£–°–ü–ï–•! –ü–æ–ª—É—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç Meshok');
            console.log('–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:', content.substring(0, 500));
        } else {
            console.log('‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
            console.log('–ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:', content.substring(0, 500));
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
}

testMeshokLongWait();

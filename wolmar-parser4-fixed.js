const puppeteer = require('puppeteer-core');
const { Client, Pool } = require('pg');
const fs = require('fs');
const https = require('https');
const config = require('./config');

class WolmarAuctionParser {
    constructor(dbConfig, auctionNumber) {
        this.dbConfig = dbConfig;
        this.dbClient = null;
        this.dbPool = null;
        this.browser = null;
        this.page = null;
        this.processed = 0;
        this.errors = 0;
        this.skipped = 0;
        this.auctionNumber = auctionNumber;
        this.progressFile = `parser_progress_${auctionNumber}.json`;
        this.retryCount = 0;
        this.maxRetries = config.parserConfig.maxRetries;
    }

    async init() {
        try {
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await this.testDatabaseConnection();
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            await this.createTable();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
            await this.initBrowser();
            
            console.log('‚úÖ –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
            throw error;
        }
    }

    async testDatabaseConnection() {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
            const testClient = new Client(this.dbConfig);
            await testClient.connect();
            
            // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            await testClient.query('SELECT 1');
            await testClient.end();
            
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
            
            // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç
            this.dbClient = new Client(this.dbConfig);
            await this.dbClient.connect();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            this.dbClient.on('error', async (err) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î:', err.message);
                await this.handleDatabaseError(err);
            });
            
        } catch (error) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
            
            if (error.code === 'ECONNREFUSED') {
                console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞');
            } else if (error.code === 'ENOTFOUND') {
                console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
            } else if (error.code === 'ECONNRESET') {
                console.log('üí° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ë–î');
            }
            
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${error.message}`);
        }
    }

    async handleDatabaseError(err) {
        if (this.retryCount >= this.maxRetries) {
            console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            return;
        }

        this.retryCount++;
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.retryCount}/${this.maxRetries}...`);
        
        try {
            if (this.dbClient) {
                await this.dbClient.end();
            }
            
            await this.delay(config.parserConfig.retryDelay);
            
            this.dbClient = new Client(this.dbConfig);
            await this.dbClient.connect();
            
            this.dbClient.on('error', async (err) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î:', err.message);
                await this.handleDatabaseError(err);
            });
            
            this.retryCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            console.log('‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
            
        } catch (reconnectError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', reconnectError.message);
        }
    }

    async initBrowser() {
        console.log('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...');
        
        try {
            this.browser = await puppeteer.launch(config.browserConfig);
            this.page = await this.browser.newPage();
            
            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ user-agent
            await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
            
            console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
            
            if (error.message.includes('Could not find browser')) {
                console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Chrome —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –ø—É—Ç–∏:', config.browserConfig.executablePath);
            }
            
            throw error;
        }
    }

    async createTable() {
        try {
            console.log('üìã –°–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...');
            
            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª–æ—Ç–æ–≤
            const createLotsTableQuery = `
                CREATE TABLE IF NOT EXISTS auction_lots (
                    id SERIAL PRIMARY KEY,
                    lot_number VARCHAR(50),
                    auction_number VARCHAR(50),
                    coin_description TEXT,
                    avers_image_url TEXT,
                    avers_image_path TEXT,
                    revers_image_url TEXT,
                    revers_image_path TEXT,
                    winner_login VARCHAR(100),
                    winning_bid DECIMAL(12, 2),
                    auction_end_date TIMESTAMP,
                    currency VARCHAR(10) DEFAULT 'RUB',
                    parsed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    source_url TEXT,
                    bids_count INTEGER,
                    lot_status VARCHAR(20),
                    year INTEGER,
                    letters VARCHAR(10),
                    metal VARCHAR(10),
                    condition VARCHAR(20),
                    UNIQUE(lot_number, auction_number)
                );
            `;
            await this.dbClient.query(createLotsTableQuery);
            
            // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã
            const createUrlsTableQuery = `
                CREATE TABLE IF NOT EXISTS auction_lot_urls (
                    id SERIAL PRIMARY KEY,
                    auction_number VARCHAR(50),
                    lot_url TEXT NOT NULL,
                    lot_number VARCHAR(50),
                    page_number INTEGER,
                    url_index INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(auction_number, lot_url)
                );
            `;
            await this.dbClient.query(createUrlsTableQuery);
            
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã/—Å–æ–∑–¥–∞–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error.message);
            throw error;
        }
    }

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
    async delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async recreatePage() {
        try {
            if (this.page && !this.page.isClosed()) {
                await this.page.close();
            }
            this.page = await this.browser.newPage();
            await this.page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
            console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞');
            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
            return false;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    async ensurePageActive() {
        if (!this.page || this.page.isClosed()) {
            console.log('üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...');
            return await this.recreatePage();
        }
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async isDatabaseAvailable() {
        try {
            await this.dbClient.query('SELECT 1');
            return true;
        } catch (error) {
            return false;
        }
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    async safeQuery(query, params = []) {
        try {
            return await this.dbClient.query(query, params);
        } catch (error) {
            if (error.message.includes('Connection terminated') || 
                error.message.includes('connection') || 
                error.message.includes('not queryable')) {
                
                console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
                await this.handleDatabaseError(error);
                
                // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                return await this.dbClient.query(query, params);
            }
            throw error;
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    async parseEntireAuction(auctionUrl, options = {}) {
        const {
            maxLots = null,           
            skipExisting = true,      
            delayBetweenLots = 800,  
            batchSize = 50,          
            testMode = false,
            startIndex = 0
        } = options;

        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ–≥–æ –∞—É–∫—Ü–∏–æ–Ω–∞...');
        console.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏: maxLots=${maxLots}, skipExisting=${skipExisting}, delay=${delayBetweenLots}ms, testMode=${testMode}, startIndex=${startIndex}`);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
            if (!(await this.isDatabaseAvailable())) {
                throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∑–∞–∫—Ä—ã—Ç–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞
            const auctionEndDate = await this.getAuctionEndDate(auctionUrl);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ—Ç—ã
            const lotUrls = await this.getAllLotUrls(auctionUrl, testMode);
            
            if (lotUrls.length === 0) {
                console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã');
                return;
            }

            const totalLots = maxLots ? Math.min(maxLots, lotUrls.length) : lotUrls.length;
            console.log(`üìä –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ—Ç–æ–≤: ${totalLots} (–Ω–∞—á–∏–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–∞ ${startIndex})`);

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ—Ç–æ–≤
            for (let i = startIndex; i < totalLots; i++) {
                const url = lotUrls[i];
                const progress = `${i + 1}/${totalLots}`;
                
                try {
                    console.log(`\n[${progress}] –ü–∞—Ä—Å–∏–Ω–≥: ${url}`);
                    
                    const lotData = await this.parseLotPage(url, auctionEndDate);
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–∞
                    if (skipExisting && lotData.auctionNumber && lotData.lotNumber) {
                        const exists = await this.lotExists(lotData.auctionNumber, lotData.lotNumber);
                        if (exists) {
                            console.log(`‚è≠Ô∏è –õ–æ—Ç ${lotData.lotNumber} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                            this.skipped++;
                            continue;
                        }
                    }

                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                    const savedId = await this.saveLotToDatabase(lotData);
                    if (savedId) {
                        this.processed++;
                        console.log(`‚úÖ [${progress}] –õ–æ—Ç ${lotData.lotNumber}: ${lotData.coinDescription?.substring(0, 50)}...`);
                        console.log(`   üí∞ ${lotData.winningBid} —Ä—É–±. | üë§ ${lotData.winnerLogin} | üìÖ ${lotData.auctionEndDate || '–¥–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}`);
                    } else {
                        console.log(`‚ö†Ô∏è [${progress}] –õ–æ—Ç ${lotData.lotNumber} –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î`);
                    }

                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ª–æ—Ç–∞–º–∏
                    await this.delay(delayBetweenLots);

                } catch (error) {
                    this.errors++;
                    console.error(`‚ùå [${progress}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${url}:`, error.message);
                    
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                    if (error.message.includes('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')) {
                        console.log('üõë –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
                        break;
                    }
                    
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º –ª–æ—Ç–æ–º
                    continue;
                }
            }

            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            console.log(`\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
            console.log(`üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
            console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${this.processed}`);
            console.log(`   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö): ${this.skipped}`);
            console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${this.errors}`);
            console.log(`   üìÖ –î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞: ${auctionEndDate}`);

        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞:', error.message);
            throw error;
        }
    }

    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
    async getAuctionEndDate(auctionUrl) {
        // –ó–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
        return new Date().toISOString();
    }

    async getAllLotUrls(auctionUrl, testMode = false) {
        // –ó–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
        console.log('‚ö†Ô∏è –ú–µ—Ç–æ–¥ getAllLotUrls –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏');
        return [];
    }

    async parseLotPage(url, auctionEndDate = null) {
        // –ó–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
        console.log('‚ö†Ô∏è –ú–µ—Ç–æ–¥ parseLotPage –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏');
        return {
            lotNumber: '1',
            auctionNumber: this.auctionNumber,
            coinDescription: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
            winningBid: '1000',
            winnerLogin: 'test_user',
            auctionEndDate: auctionEndDate
        };
    }

    async lotExists(auctionNumber, lotNumber) {
        try {
            const query = 'SELECT id FROM auction_lots WHERE auction_number = $1 AND lot_number = $2';
            const result = await this.safeQuery(query, [auctionNumber, lotNumber]);
            return result.rows.length > 0;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ª–æ—Ç–∞:', error.message);
            return false;
        }
    }

    async saveLotToDatabase(lotData) {
        const insertQuery = `
            INSERT INTO auction_lots (
                lot_number, auction_number, coin_description, 
                avers_image_url, revers_image_url,
                winner_login, winning_bid, auction_end_date, source_url,
                bids_count, lot_status, year, letters, metal, condition
            ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
            ON CONFLICT (lot_number, auction_number) 
            DO UPDATE SET
                coin_description = EXCLUDED.coin_description,
                winner_login = EXCLUDED.winner_login,
                winning_bid = EXCLUDED.winning_bid,
                auction_end_date = EXCLUDED.auction_end_date,
                bids_count = EXCLUDED.bids_count,
                lot_status = EXCLUDED.lot_status,
                year = EXCLUDED.year,
                letters = EXCLUDED.letters,
                metal = EXCLUDED.metal,
                condition = EXCLUDED.condition,
                parsed_at = CURRENT_TIMESTAMP
            RETURNING id;
        `;

        const values = [
            lotData.lotNumber || null,
            lotData.auctionNumber || null,
            lotData.coinDescription || null,
            lotData.images?.[0] || null,
            lotData.images?.[1] || null,
            lotData.winnerLogin || null,
            lotData.winningBid ? parseFloat(lotData.winningBid) : null,
            lotData.auctionEndDate || null,
            lotData.sourceUrl || null,
            lotData.bidsCount ? parseInt(lotData.bidsCount) : null,
            lotData.lotStatus || null,
            lotData.year ? parseInt(lotData.year) : null,
            lotData.letters || null,
            lotData.metal || null,
            lotData.condition || null
        ];

        try {
            const result = await this.safeQuery(insertQuery, values);
            return result.rows[0].id;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', error.message);
            return null;
        }
    }

    async close() {
        try {
            if (this.page && !this.page.isClosed()) {
                await this.page.close();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
        }
        
        try {
            if (this.browser) {
                await this.browser.close();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
        }
        
        try {
            if (this.dbClient) {
                await this.dbClient.end();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î:', error.message);
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main(auctionNumber) {
    const parser = new WolmarAuctionParser(config.dbConfig, auctionNumber);
    
    try {
        await parser.init();
        
        const auctionUrl = `https://www.wolmar.ru/auction/${auctionNumber}`;
        await parser.parseEntireAuction(auctionUrl, {
            maxLots: null,
            skipExisting: true,
            delayBetweenLots: config.parserConfig.delayBetweenLots,
            batchSize: config.parserConfig.batchSize,
            testMode: false
        });
        
    } catch (error) {
        console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
    } finally {
        try {
            await parser.close();
        } catch (closeError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', closeError.message);
        }
    }
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function testRun(auctionNumber) {
    const parser = new WolmarAuctionParser(config.dbConfig, auctionNumber);
    
    try {
        await parser.init();
        
        const auctionUrl = `https://www.wolmar.ru/auction/${auctionNumber}`;
        await parser.parseEntireAuction(auctionUrl, {
            maxLots: 3,
            skipExisting: false,
            delayBetweenLots: 1000,
            batchSize: 3,
            testMode: true
        });
        
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
    } finally {
        try {
            await parser.close();
        } catch (closeError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞:', closeError.message);
        }
    }
}

module.exports = WolmarAuctionParser;

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    (async () => {
        const args = process.argv.slice(2);
        
        if (args.length === 0) {
            console.log('üöÄ Wolmar Auction Parser v4.0 (Fixed)');
            console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
            console.log('  main <–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞>              - –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∞—É–∫—Ü–∏–æ–Ω–∞');
            console.log('  test <–Ω–æ–º–µ—Ä_–∞—É–∫—Ü–∏–æ–Ω–∞>              - –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ (3 –ª–æ—Ç–∞)');
            console.log('');
            console.log('–ü—Ä–∏–º–µ—Ä—ã:');
            console.log('  node wolmar-parser4-fixed.js main 2122');
            console.log('  node wolmar-parser4-fixed.js test 2122');
            return;
        }

        const command = args[0];
        const auctionNumber = args[1];

        if (!auctionNumber) {
            console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞');
            return;
        }

        console.log(`üöÄ Wolmar Auction Parser v4.0 (Fixed) - –ê—É–∫—Ü–∏–æ–Ω ${auctionNumber}`);

        try {
            switch (command) {
                case 'main':
                    console.log(`üìç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
                    await main(auctionNumber);
                    break;
                    
                case 'test':
                    console.log(`üìç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –∞—É–∫—Ü–∏–æ–Ω–∞ ${auctionNumber}...`);
                    await testRun(auctionNumber);
                    break;
                    
                default:
                    console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
                    console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: main, test');
            }
        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        }
    })();
}

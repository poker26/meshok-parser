const { Client } = require('pg');

const dbConfig = {
    user: 'postgres.xkwgspqwebfeteoblayu',        
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',   
    password: 'Gopapopa326+',    
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –≥—Ä–∞–¥–∞—Ü–∏–µ–π
function extractConditionWithGrade(conditionText) {
    if (!conditionText) return null;
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    const cleanText = conditionText.trim();
    
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≥—Ä–∞–¥–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "MS61", "XF45" - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (/^[A-Z]{2,3}[0-9]{2,3}$/.test(cleanText)) {
        return cleanText;
    }
    
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "MS 61", "XF 45" –∏ —Ç.–¥.
    const spaceMatch = cleanText.match(/^([A-Z]{2,3})\s+([0-9]{2,3})$/);
    if (spaceMatch) {
        return spaceMatch[1] + spaceMatch[2]; // "MS 61" -> "MS61"
    }
    
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ "MS61RB", "MS64BN"
    const complexMatch = cleanText.match(/^([A-Z]{2,3})([0-9]{2,3})([A-Z]*)$/);
    if (complexMatch) {
        return complexMatch[1] + complexMatch[2] + complexMatch[3]; // "MS61RB" -> "MS61RB"
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≥—Ä–∞–¥–∞—Ü–∏—è –±–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è "61", "65" - –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (/^[0-9]{2,3}$/.test(cleanText)) {
        return cleanText;
    }
    
    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (UNC, PF, XF, MS, AU, VF –∏ —Ç.–¥.) - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return cleanText;
}

async function updateConditionWithGrades() {
    const client = new Client(dbConfig);
    
    try {
        await client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å condition
        console.log('\nüìä –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');
        const selectQuery = `
            SELECT id, condition 
            FROM auction_lots 
            WHERE condition IS NOT NULL 
            ORDER BY id;
        `;
        const result = await client.query(selectQuery);
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
        
        let updated = 0;
        let unchanged = 0;
        let errors = 0;
        
        console.log('\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
        
        for (const row of result.rows) {
            try {
                const originalCondition = row.condition;
                const newCondition = extractConditionWithGrade(originalCondition);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if (newCondition !== originalCondition) {
                    const updateQuery = `
                        UPDATE auction_lots 
                        SET condition = $1 
                        WHERE id = $2;
                    `;
                    await client.query(updateQuery, [newCondition, row.id]);
                    updated++;
                    
                    if (updated % 1000 === 0) {
                        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updated} –∑–∞–ø–∏—Å–µ–π...`);
                    }
                } else {
                    unchanged++;
                }
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ ${row.id}:`, error.message);
                errors++;
            }
        }
        
        console.log('\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
        console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updated}`);
        console.log(`‚è≠Ô∏è  –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${unchanged}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${errors}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
        const checkQuery = `
            SELECT condition, COUNT(*) as count
            FROM auction_lots 
            WHERE condition ~ '[0-9]{2,3}' 
            GROUP BY condition 
            ORDER BY count DESC
            LIMIT 10;
        `;
        const checkResult = await client.query(checkQuery);
        console.log('üìä –¢–æ–ø-10 –∑–∞–ø–∏—Å–µ–π —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');
        console.table(checkResult.rows);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    } finally {
        await client.end();
        console.log('\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø–∏—Å–µ–π
async function testUpdate() {
    const client = new Client(dbConfig);
    
    try {
        await client.connect();
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ 10 –∑–∞–ø–∏—Å—è—Ö...');
        
        const testQuery = `
            SELECT id, condition 
            FROM auction_lots 
            WHERE condition IS NOT NULL 
            ORDER BY RANDOM() 
            LIMIT 10;
        `;
        const result = await client.query(testQuery);
        
        console.log('\nüìã –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏:');
        for (const row of result.rows) {
            const newCondition = extractConditionWithGrade(row.condition);
            console.log(`ID: ${row.id}, –ë—ã–ª–æ: "${row.condition}" -> –°—Ç–∞–Ω–µ—Ç: "${newCondition}"`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    } finally {
        await client.end();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏–ª–∏ –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
const args = process.argv.slice(2);
if (args.includes('--test')) {
    testUpdate();
} else {
    updateConditionWithGrades();
}

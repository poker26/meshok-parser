const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function findTestLot() {
    try {
        console.log('üîç –ò—â–µ–º –ª–æ—Ç —Å –≤–µ—Å–æ–º –∏ —Ü–µ–Ω–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        const query = `
            SELECT id, lot_number, auction_number, coin_description, 
                   winning_bid, auction_end_date, metal, weight
            FROM auction_lots 
            WHERE weight IS NOT NULL 
              AND winning_bid IS NOT NULL 
              AND winning_bid > 0
              AND metal IS NOT NULL
              AND auction_end_date IS NOT NULL
            ORDER BY winning_bid DESC
            LIMIT 5
        `;
        
        const result = await pool.query(query);
        
        console.log('üìã –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', result.rows.length);
        
        result.rows.forEach((lot, index) => {
            console.log(`\n${index + 1}. –õ–æ—Ç ID: ${lot.id}`);
            console.log(`   –ù–æ–º–µ—Ä –ª–æ—Ç–∞: ${lot.lot_number}`);
            console.log(`   –ê—É–∫—Ü–∏–æ–Ω: ${lot.auction_number}`);
            console.log(`   –ú–µ—Ç–∞–ª–ª: ${lot.metal}`);
            console.log(`   –í–µ—Å: ${lot.weight} –≥`);
            console.log(`   –¶–µ–Ω–∞: ${lot.winning_bid} ‚ÇΩ`);
            console.log(`   –î–∞—Ç–∞ –∞—É–∫—Ü–∏–æ–Ω–∞: ${lot.auction_end_date}`);
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${lot.coin_description.substring(0, 100)}...`);
        });
        
        if (result.rows.length > 0) {
            const testLot = result.rows[0];
            console.log(`\nüß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ—Ç ID: ${testLot.id}`);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await pool.end();
    }
}

findTestLot();

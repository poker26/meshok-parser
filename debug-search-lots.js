const { Pool } = require('pg');
const config = require('./config');

const pool = new Pool(config.dbConfig);

async function debugSearchLots() {
    try {
        console.log('üîç –ò—â–µ–º –ª–æ—Ç—ã —Å –∑–æ–ª–æ—Ç–æ–º –∏ —Å–ª–æ–≤–æ–º "–∫–æ–º–ø–ª–µ–∫—Å"...');
        
        const query = `
            SELECT id, lot_number, auction_number, coin_description, 
                   winning_bid, auction_end_date, metal, weight
            FROM auction_lots 
            WHERE metal = 'Au' 
              AND coin_description ILIKE '%–∫–æ–º–ø–ª–µ–∫—Å%'
              AND weight IS NOT NULL
            ORDER BY winning_bid DESC
            LIMIT 10
        `;
        
        const result = await pool.query(query);
        
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –ª–æ—Ç–æ–≤: ${result.rows.length}`);
        
        result.rows.forEach((lot, index) => {
            console.log(`\n${index + 1}. –õ–æ—Ç ID: ${lot.id}`);
            console.log(`   –ù–æ–º–µ—Ä –ª–æ—Ç–∞: ${lot.lot_number}`);
            console.log(`   –ê—É–∫—Ü–∏–æ–Ω: ${lot.auction_number}`);
            console.log(`   –ú–µ—Ç–∞–ª–ª: ${lot.metal}`);
            console.log(`   –í–µ—Å: ${lot.weight} –≥`);
            console.log(`   –¶–µ–Ω–∞: ${lot.winning_bid} ‚ÇΩ`);
            console.log(`   –î–∞—Ç–∞ –∞—É–∫—Ü–∏–æ–Ω–∞: ${lot.auction_end_date}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
            const hasAllData = lot.winning_bid && lot.metal && lot.weight && lot.auction_end_date;
            console.log(`   ‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞: ${hasAllData ? '–î–ê' : '–ù–ï–¢'}`);
            
            if (!hasAllData) {
                console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:`);
                if (!lot.winning_bid) console.log(`      - winning_bid`);
                if (!lot.metal) console.log(`      - metal`);
                if (!lot.weight) console.log(`      - weight`);
                if (!lot.auction_end_date) console.log(`      - auction_end_date`);
            }
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await pool.end();
    }
}

debugSearchLots();

const fs = require('fs');

// –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è API endpoints –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ server.js
// –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ endpoints, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –º–æ–Ω–µ—Ç

console.log('üßπ –£–¥–∞–ª–µ–Ω–∏–µ API endpoints –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑ server.js...');

// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
const serverContent = fs.readFileSync('server.js', 'utf8');

// –°–ø–∏—Å–æ–∫ endpoints –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
const catalogEndpoints = [
    '/api/auctions',
    '/api/auctions/:auctionNumber/lots', 
    '/api/auctions/:auctionNumber/stats',
    '/api/lots/:id',
    '/api/filters'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ endpoint
function removeEndpoint(content, endpoint) {
    const lines = content.split('\n');
    const result = [];
    let skip = false;
    let braceCount = 0;
    
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        
        // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ endpoint
        if (line.includes(`app.get('${endpoint}'`) || line.includes(`app.get("${endpoint}"`)) {
            skip = true;
            braceCount = 0;
            continue;
        }
        
        if (skip) {
            // –°—á–∏—Ç–∞–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–µ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∫–æ–±–∫–∏
            const openBraces = (line.match(/\{/g) || []).length;
            const closeBraces = (line.match(/\}/g) || []).length;
            braceCount += openBraces - closeBraces;
            
            // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –±–ª–æ–∫–∞
            if (braceCount <= 0 && line.trim() === '});') {
                skip = false;
                continue;
            }
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞
            continue;
        }
        
        result.push(line);
    }
    
    return result.join('\n');
}

// –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π endpoint
let cleanedContent = serverContent;
for (const endpoint of catalogEndpoints) {
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º endpoint: ${endpoint}`);
    cleanedContent = removeEndpoint(cleanedContent, endpoint);
}

// –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
fs.writeFileSync('server.js.backup', serverContent);
console.log('üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: server.js.backup');

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
fs.writeFileSync('server.js', cleanedContent);
console.log('‚úÖ API endpoints –∫–∞—Ç–∞–ª–æ–≥–∞ —É–¥–∞–ª–µ–Ω—ã –∏–∑ server.js');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
const finalContent = fs.readFileSync('server.js', 'utf8');
const remainingEndpoints = catalogEndpoints.filter(endpoint => 
    finalContent.includes(endpoint)
);

if (remainingEndpoints.length === 0) {
    console.log('‚úÖ –í—Å–µ endpoints –∫–∞—Ç–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã');
} else {
    console.log('‚ö†Ô∏è –û—Å—Ç–∞–ª–∏—Å—å endpoints:', remainingEndpoints);
}

console.log('üéØ API endpoints –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–µ–ø–µ—Ä—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –≤ –≤–µ—Ç–∫–µ web-interface');

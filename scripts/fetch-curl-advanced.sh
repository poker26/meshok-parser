#!/bin/bash

echo "üåê Using advanced curl approach for Cloudflare bypass..."

CATEGORY_ID=${1:-252}
FINISHED=${2:-true}
OPT=${FINISHED:-true}

if [ "$OPT" = "true" ]; then
    OPT="2"
else
    OPT="1"
fi

URL="https://meshok.net/good/${CATEGORY_ID}?opt=${OPT}"
echo "üìÑ Fetching: ${URL}"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
mkdir -p data

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª cookies
COOKIE_FILE="data/cookies.txt"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent
get_random_user_agent() {
    local user_agents=(
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/121.0"
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/121.0"
        "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/121.0"
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.1 Safari/605.1.15"
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0"
    )
    
    local index=$((RANDOM % ${#user_agents[@]}))
    echo "${user_agents[$index]}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ IP
get_random_ip() {
    local ips=(
        "192.168.1.100"
        "192.168.1.101"
        "192.168.1.102"
        "10.0.0.100"
        "10.0.0.101"
        "172.16.0.100"
        "172.16.0.101"
    )
    
    local index=$((RANDOM % ${#ips[@]}))
    echo "${ips[$index]}"
}

# –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
USER_AGENT=$(get_random_user_agent)
CLIENT_IP=$(get_random_ip)

echo "üîç Using User-Agent: ${USER_AGENT:0:50}..."
echo "üîç Using Client-IP: ${CLIENT_IP}"

# –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è cookies
echo "‚è≥ Getting main page for session..."
curl -s -c "${COOKIE_FILE}" -b "${COOKIE_FILE}" \
  -H "User-Agent: ${USER_AGENT}" \
  -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8" \
  -H "Accept-Language: en-US,en;q=0.9,ru;q=0.8" \
  -H "Accept-Encoding: gzip, deflate, br" \
  -H "Cache-Control: no-cache" \
  -H "Pragma: no-cache" \
  -H "Sec-Fetch-Dest: document" \
  -H "Sec-Fetch-Mode: navigate" \
  -H "Sec-Fetch-Site: none" \
  -H "Sec-Fetch-User: ?1" \
  -H "Upgrade-Insecure-Requests: 1" \
  -H "DNT: 1" \
  -H "Client-IP: ${CLIENT_IP}" \
  -H "X-Forwarded-For: ${CLIENT_IP}" \
  -H "X-Real-IP: ${CLIENT_IP}" \
  --connect-timeout 30 \
  --max-time 60 \
  "https://meshok.net/" > /dev/null

echo "‚úÖ Main page loaded, cookies saved"

# –ñ–¥–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è)
WAIT_TIME=$((RANDOM % 3 + 1))
echo "‚è≥ Waiting ${WAIT_TIME} seconds (human behavior simulation)..."
sleep $WAIT_TIME

# –¢–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ü–µ–ª–µ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å cookies
echo "‚è≥ Making request to target page with session..."

TIMESTAMP=$(date +"%Y-%m-%dT%H-%M-%S-%3N")
FILENAME="curl_advanced_good${CATEGORY_ID}_opt${OPT}_${TIMESTAMP}.html"
FILEPATH="data/${FILENAME}"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã
curl -s -c "${COOKIE_FILE}" -b "${COOKIE_FILE}" \
  -H "User-Agent: ${USER_AGENT}" \
  -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8" \
  -H "Accept-Language: en-US,en;q=0.9,ru;q=0.8" \
  -H "Accept-Encoding: gzip, deflate, br" \
  -H "Cache-Control: no-cache" \
  -H "Pragma: no-cache" \
  -H "Sec-Fetch-Dest: document" \
  -H "Sec-Fetch-Mode: navigate" \
  -H "Sec-Fetch-Site: same-origin" \
  -H "Sec-Fetch-User: ?1" \
  -H "Upgrade-Insecure-Requests: 1" \
  -H "DNT: 1" \
  -H "Referer: https://meshok.net/" \
  -H "Client-IP: ${CLIENT_IP}" \
  -H "X-Forwarded-For: ${CLIENT_IP}" \
  -H "X-Real-IP: ${CLIENT_IP}" \
  -H "X-Forwarded-Proto: https" \
  -H "X-Forwarded-Host: meshok.net" \
  -H "X-Forwarded-Port: 443" \
  -H "X-Forwarded-Ssl: on" \
  -H "X-Forwarded-For: ${CLIENT_IP}" \
  -H "X-Real-IP: ${CLIENT_IP}" \
  -H "X-Forwarded-For: ${CLIENT_IP}" \
  -H "X-Forwarded-Proto: https" \
  -H "X-Forwarded-Host: meshok.net" \
  -H "X-Forwarded-Port: 443" \
  -H "X-Forwarded-Ssl: on" \
  --connect-timeout 30 \
  --max-time 60 \
  --retry 3 \
  --retry-delay 2 \
  --retry-max-time 30 \
  --compressed \
  "${URL}" > "${FILEPATH}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if [ -f "${FILEPATH}" ]; then
    SIZE=$(wc -c < "${FILEPATH}")
    SIZE_KB=$((SIZE / 1024))
    echo "‚úÖ Saved to: ${FILENAME}"
    echo "üìä Size: ${SIZE_KB} KB"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Cloudflare
    if grep -q "Just a moment\|–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç\|Cloudflare\|challenge" "${FILEPATH}"; then
        echo "‚ö†Ô∏è  Cloudflare challenge detected"
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–æ–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        echo "üîÑ Attempting to bypass Cloudflare..."
        
        # –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ
        sleep 5
        
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        curl -s -c "${COOKIE_FILE}" -b "${COOKIE_FILE}" \
          -H "User-Agent: ${USER_AGENT}" \
          -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8" \
          -H "Accept-Language: en-US,en;q=0.9,ru;q=0.8" \
          -H "Accept-Encoding: gzip, deflate, br" \
          -H "Cache-Control: no-cache" \
          -H "Pragma: no-cache" \
          -H "Sec-Fetch-Dest: document" \
          -H "Sec-Fetch-Mode: navigate" \
          -H "Sec-Fetch-Site: same-origin" \
          -H "Sec-Fetch-User: ?1" \
          -H "Upgrade-Insecure-Requests: 1" \
          -H "DNT: 1" \
          -H "Referer: https://meshok.net/" \
          -H "Client-IP: ${CLIENT_IP}" \
          -H "X-Forwarded-For: ${CLIENT_IP}" \
          -H "X-Real-IP: ${CLIENT_IP}" \
          -H "X-Forwarded-Proto: https" \
          -H "X-Forwarded-Host: meshok.net" \
          -H "X-Forwarded-Port: 443" \
          -H "X-Forwarded-Ssl: on" \
          --connect-timeout 30 \
          --max-time 60 \
          --retry 3 \
          --retry-delay 2 \
          --retry-max-time 30 \
          --compressed \
          "${URL}" > "${FILEPATH}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        if grep -q "Just a moment\|–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç\|Cloudflare\|challenge" "${FILEPATH}"; then
            echo "‚ùå Cloudflare challenge still present"
        else
            echo "‚úÖ Cloudflare challenge bypassed!"
        fi
    else
        echo "‚úÖ No Cloudflare challenge detected"
    fi
    
    # –ü–æ–∏—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    TITLE=$(grep -o '<title>[^<]*</title>' "${FILEPATH}" | sed 's/<[^>]*>//g')
    if [ -n "$TITLE" ]; then
        echo "üìã Page title: ${TITLE}"
    fi
    
    # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã
    ITEM_LINKS=$(grep -o 'href="/item/[^"]*"' "${FILEPATH}" | wc -l)
    echo "üîó Item links found: ${ITEM_LINKS}"
    
    if [ "$ITEM_LINKS" -gt 0 ]; then
        echo "üéâ Successfully obtained auction data with advanced curl!"
        echo "üìã First 5 item links:"
        grep -o 'href="/item/[^"]*"' "${FILEPATH}" | head -5 | nl -nln
    else
        echo "‚ö†Ô∏è  No auction links found"
    fi
    
    # –ü–æ–∏—Å–∫ —Ü–µ–Ω
    PRICE_COUNT=$(grep -o '[0-9,]*[ ]*‚ÇΩ\|[0-9,]*[ ]*—Ä—É–±' "${FILEPATH}" | wc -l)
    if [ "$PRICE_COUNT" -gt 0 ]; then
        echo "üí∞ Prices found: ${PRICE_COUNT}"
        echo "üìã Sample prices:"
        grep -o '[0-9,]*[ ]*‚ÇΩ\|[0-9,]*[ ]*—Ä—É–±' "${FILEPATH}" | head -3 | nl -nln
    fi
    
    # –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü
    TABLE_COUNT=$(grep -o '<table' "${FILEPATH}" | wc -l)
    echo "üìä Tables found: ${TABLE_COUNT}"
    
    # –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º
    FORM_COUNT=$(grep -o '<form' "${FILEPATH}" | wc -l)
    echo "üìù Forms found: ${FORM_COUNT}"
    
    # –ü–æ–∏—Å–∫ JSON –¥–∞–Ω–Ω—ã—Ö
    JSON_COUNT=$(grep -o '{[^{}]*"[^"]*"[^{}]*}' "${FILEPATH}" | wc -l)
    if [ "$JSON_COUNT" -gt 0 ]; then
        echo "üìú JSON data found: ${JSON_COUNT} matches"
        echo "üìã Sample JSON:"
        grep -o '{[^{}]*"[^"]*"[^{}]*}' "${FILEPATH}" | head -2 | nl -nln
    else
        echo "üìú No JSON data found"
    fi
    
else
    echo "‚ùå Failed to save file"
fi

# –û—á–∏—â–∞–µ–º cookies
rm -f "${COOKIE_FILE}"

const fs = require('fs-extra');
const path = require('path');

async function quickAnalyze() {
  console.log('üîç Quick analysis of saved HTML files...');
  
  const dataDir = path.join(__dirname, '../data');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö HTML —Ñ–∞–π–ª–æ–≤
    const files = await fs.readdir(dataDir);
    const htmlFiles = files.filter(file => file.endsWith('.html'));
    
    if (htmlFiles.length === 0) {
      console.log('‚ùå No HTML files found in data directory');
      return;
    }
    
    console.log(`üìÅ Found ${htmlFiles.length} HTML files:`);
    htmlFiles.forEach((file, index) => {
      console.log(`   ${index + 1}. ${file}`);
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for (const file of htmlFiles) {
      console.log(`\nüìÑ Analyzing: ${file}`);
      
      const filePath = path.join(dataDir, file);
      const content = await fs.readFile(filePath, 'utf-8');
      
      console.log(`üìä Size: ${(content.length / 1024).toFixed(2)} KB`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const titleMatch = content.match(/<title>(.*?)<\/title>/);
      const title = titleMatch ? titleMatch[1] : 'No title found';
      console.log(`üìã Title: ${title}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Cloudflare
      if (content.includes('Just a moment') || content.includes('–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç')) {
        console.log('‚ö†Ô∏è  Cloudflare challenge detected');
      } else {
        console.log('‚úÖ No Cloudflare challenge detected');
      }
      
      // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã
      const itemLinks = (content.match(/href="\/item\/[^"]*"/g) || []).length;
      console.log(`üîó Item links found: ${itemLinks}`);
      
      if (itemLinks > 0) {
        console.log('üìã First 5 item links:');
        const linkMatches = content.match(/href="(\/item\/[^"]*)"/g) || [];
        linkMatches.slice(0, 5).forEach((link, index) => {
          const cleanLink = link.replace('href="', '').replace('"', '');
          console.log(`   ${index + 1}. https://meshok.net${cleanLink}`);
        });
      }
      
      // –ü–æ–∏—Å–∫ —Ü–µ–Ω
      const priceMatches = content.match(/[0-9,]+[ ]*‚ÇΩ|[0-9,]+[ ]*—Ä—É–±/g) || [];
      if (priceMatches.length > 0) {
        console.log(`üí∞ Prices found: ${priceMatches.length}`);
        console.log('üìã Sample prices:');
        priceMatches.slice(0, 3).forEach((price, index) => {
          console.log(`   ${index + 1}. ${price}`);
        });
      }
      
      // –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü
      const tableMatches = content.match(/<table/g) || [];
      console.log(`üìä Tables found: ${tableMatches.length}`);
      
      // –ü–æ–∏—Å–∫ div —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const divMatches = content.match(/<div/g) || [];
      console.log(`üì¶ Divs found: ${divMatches.length}`);
      
      // –ü–æ–∏—Å–∫ script —Ç–µ–≥–æ–≤
      const scriptMatches = content.match(/<script/g) || [];
      console.log(`üìú Scripts found: ${scriptMatches.length}`);
      
      // –ü–æ–∏—Å–∫ JSON –¥–∞–Ω–Ω—ã—Ö –≤ script —Ç–µ–≥–∞—Ö
      const jsonMatches = content.match(/\{[^{}]*"[^"]*"[^{}]*\}/g) || [];
      if (jsonMatches.length > 0) {
        console.log(`üìú JSON data found: ${jsonMatches.length} matches`);
        console.log('üìã Sample JSON:');
        jsonMatches.slice(0, 2).forEach((json, index) => {
          console.log(`   ${index + 1}. ${json.substring(0, 100)}...`);
        });
      }
      
      // –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º
      const formMatches = content.match(/<form/g) || [];
      console.log(`üìù Forms found: ${formMatches.length}`);
      
      // –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imgMatches = content.match(/<img/g) || [];
      console.log(`üñºÔ∏è  Images found: ${imgMatches.length}`);
      
      // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categoryLinks = (content.match(/href="\/good\/[^"]*"/g) || []).length;
      console.log(`üìÇ Category links found: ${categoryLinks}`);
      
      if (categoryLinks > 0) {
        console.log('üìã Category link patterns:');
        const categoryMatches = content.match(/href="(\/good\/[^"]*)"/g) || [];
        const patterns = new Set();
        categoryMatches.forEach(match => {
          const pattern = match.replace(/\d+/g, '{id}');
          patterns.add(pattern);
        });
        Array.from(patterns).slice(0, 3).forEach((pattern, index) => {
          console.log(`   ${index + 1}. ${pattern}`);
        });
      }
      
      // –ü–æ–∏—Å–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      const paginationMatches = content.match(/page|pagination|pager/gi) || [];
      console.log(`üìÑ Pagination references: ${paginationMatches.length}`);
      
      // –ü–æ–∏—Å–∫ AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
      const ajaxMatches = content.match(/ajax|fetch|XMLHttpRequest/gi) || [];
      console.log(`üì° AJAX references: ${ajaxMatches.length}`);
      
      console.log('‚îÄ'.repeat(80));
    }
    
  } catch (error) {
    console.error('‚ùå Error analyzing files:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫
quickAnalyze();

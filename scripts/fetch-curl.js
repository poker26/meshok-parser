const { exec } = require('child_process');
const fs = require('fs-extra');
const path = require('path');
const { promisify } = require('util');

const execAsync = promisify(exec);

async function fetchWithCurl(categoryId = '252', finished = true) {
  console.log('üåê Trying curl approach...');
  
  const opt = finished ? '2' : '1';
  const url = `https://meshok.net/good/${categoryId}${finished ? '?opt=2' : ''}`;
  
  console.log(`üìÑ Fetching: ${url}`);
  
  try {
    // –ö–æ–º–∞–Ω–¥–∞ curl —Å –æ–±—Ö–æ–¥–æ–º Cloudflare
    const curlCommand = `curl -L -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
      -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" \
      -H "Accept-Language: ru-RU,ru;q=0.9,en;q=0.8" \
      -H "Cache-Control: no-cache" \
      -H "Pragma: no-cache" \
      --connect-timeout 30 \
      --max-time 60 \
      "${url}"`;
    
    console.log('‚è≥ Executing curl command...');
    const { stdout, stderr } = await execAsync(curlCommand);
    
    if (stderr) {
      console.log('‚ö†Ô∏è  Curl warnings:', stderr);
    }
    
    const content = stdout;
    console.log(`üìä Received ${(content.length / 1024).toFixed(2)} KB of data`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Cloudflare
    if (content.includes('Just a moment') || content.includes('Checking your browser')) {
      console.log('‚ö†Ô∏è  Cloudflare protection detected in curl response');
      console.log('üí° Curl approach also blocked by Cloudflare');
    } else {
      console.log('‚úÖ No Cloudflare challenge detected in curl response');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `curl_listing_good${categoryId}_opt${opt}_${timestamp}.html`;
    const filepath = path.join(__dirname, '../data', filename);
    
    await fs.ensureDir(path.join(__dirname, '../data'));
    await fs.writeFile(filepath, content, 'utf-8');
    
    console.log(`‚úÖ Saved to: ${filename}`);
    
    // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    if (content.includes('<title>')) {
      const titleMatch = content.match(/<title>(.*?)<\/title>/);
      if (titleMatch) {
        console.log(`üìã Page title: ${titleMatch[1]}`);
      }
    }
    
    // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã
    const lotLinks = (content.match(/href="\/item\/[^"]*"/g) || []).length;
    console.log(`üîó Found ${lotLinks} item links`);
    
    if (lotLinks > 0) {
      console.log('üéâ Successfully obtained auction data via curl!');
    } else {
      console.log('‚ö†Ô∏è  No auction links found');
    }
    
  } catch (error) {
    console.error('‚ùå Curl error:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫
const categoryId = process.argv[2] || '252';
fetchWithCurl(categoryId);

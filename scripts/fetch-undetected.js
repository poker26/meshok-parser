const { exec } = require('child_process');
const fs = require('fs-extra');
const path = require('path');
const { promisify } = require('util');

const execAsync = promisify(exec);

async function fetchUndetected(categoryId = '252', finished = true) {
  console.log('ü•∑ Using undetected approach...');
  
  const url = `https://meshok.net/good/${categoryId}${finished ? '?opt=2' : ''}`;
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const filename = `undetected_good${categoryId}_opt${finished ? '2' : '1'}_${timestamp}.html`;
  const filepath = path.join(__dirname, '../data', filename);
  
  console.log(`üìÑ Fetching: ${url}`);
  
  try {
    await fs.ensureDir(path.join(__dirname, '../data'));
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã
    const approaches = [
      // –ü–æ–¥—Ö–æ–¥ 1: –û–±—ã—á–Ω—ã–π curl —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
      `curl -L -A "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36" "${url}" > "${filepath}"`,
      
      // –ü–æ–¥—Ö–æ–¥ 2: Curl —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
      `curl -L -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
        -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" \
        -H "Accept-Language: en-US,en;q=0.9" \
        -H "Cache-Control: no-cache" \
        -H "Pragma: no-cache" \
        "${url}" > "${filepath}"`,
      
      // –ü–æ–¥—Ö–æ–¥ 3: Wget —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
      `wget --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
        --header="Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" \
        --header="Accept-Language: en-US,en;q=0.9" \
        --header="Cache-Control: no-cache" \
        -O "${filepath}" "${url}"`
    ];
    
    for (let i = 0; i < approaches.length; i++) {
      console.log(`\nüß™ Attempt ${i + 1}/${approaches.length}`);
      
      try {
        const { stdout, stderr } = await execAsync(approaches[i]);
        
        if (stderr) {
          console.log('‚ö†Ô∏è  Warnings:', stderr);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
        const stats = await fs.stat(filepath);
        console.log(`‚úÖ Saved to: ${filename}`);
        console.log(`üìä Size: ${(stats.size / 1024).toFixed(2)} KB`);
        
        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const content = await fs.readFile(filepath, 'utf-8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Cloudflare
        if (content.includes('Just a moment') || content.includes('–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç')) {
          console.log('‚ö†Ô∏è  Cloudflare protection detected');
          continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥—Ö–æ–¥
        } else {
          console.log('‚úÖ No Cloudflare challenge detected');
        }
        
        // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if (content.includes('<title>')) {
          const titleMatch = content.match(/<title>(.*?)<\/title>/);
          if (titleMatch) {
            console.log(`üìã Page title: ${titleMatch[1]}`);
          }
        }
        
        // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã
        const lotLinks = (content.match(/href="\/item\/[^"]*"/g) || []).length;
        console.log(`üîó Found ${lotLinks} item links`);
        
        if (lotLinks > 0) {
          console.log('üéâ Successfully obtained auction data!');
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫
          const linkMatches = content.match(/href="(\/item\/[^"]*)"/g) || [];
          console.log('üìã First 5 item links:');
          linkMatches.slice(0, 5).forEach((link, index) => {
            const cleanLink = link.replace('href="', '').replace('"', '');
            console.log(`   ${index + 1}. https://meshok.net${cleanLink}`);
          });
          
          // –ü–æ–∏—Å–∫ —Ü–µ–Ω
          const priceMatches = content.match(/[0-9,]+[ ]*‚ÇΩ|[0-9,]+[ ]*—Ä—É–±/g) || [];
          if (priceMatches.length > 0) {
            console.log('üí∞ Sample prices found:');
            priceMatches.slice(0, 3).forEach((price, index) => {
              console.log(`   ${index + 1}. ${price}`);
            });
          }
          
          return; // –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏
        } else {
          console.log('‚ö†Ô∏è  No auction links found');
        }
        
      } catch (error) {
        console.error(`‚ùå Error with approach ${i + 1}:`, error.message);
      }
    }
    
    console.log('\n‚ùå All approaches failed');
    
  } catch (error) {
    console.error('‚ùå Error:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫
const categoryId = process.argv[2] || '252';
const finished = process.argv[3] !== 'false';
fetchUndetected(categoryId, finished);

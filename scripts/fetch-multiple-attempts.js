const puppeteer = require('puppeteer');
const fs = require('fs-extra');
const path = require('path');

async function fetchMultipleAttempts(categoryId = '252', finished = true) {
  console.log('üîÑ Trying multiple approaches to bypass Cloudflare...');
  
  const approaches = [
    {
      name: 'Mobile Chrome',
      userAgent: 'Mozilla/5.0 (Linux; Android 10; SM-G973F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36',
      viewport: { width: 375, height: 812 }
    },
    {
      name: 'Windows Chrome',
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      viewport: { width: 1920, height: 1080 }
    },
    {
      name: 'Mac Chrome',
      userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      viewport: { width: 1440, height: 900 }
    },
    {
      name: 'Firefox',
      userAgent: 'Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/121.0',
      viewport: { width: 1920, height: 1080 }
    }
  ];
  
  const url = `https://meshok.net/good/${categoryId}${finished ? '?opt=2' : ''}`;
  
  for (let i = 0; i < approaches.length; i++) {
    const approach = approaches[i];
    console.log(`\nüß™ Attempt ${i + 1}/${approaches.length}: ${approach.name}`);
    
    try {
      const browser = await puppeteer.launch({
        headless: true,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-gpu',
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          '--disable-blink-features=AutomationControlled',
          '--disable-extensions',
          '--disable-plugins',
          '--disable-background-timer-throttling',
          '--disable-backgrounding-occluded-windows',
          '--disable-renderer-backgrounding',
          '--disable-ipc-flooding-protection',
          '--disable-hang-monitor',
          '--disable-prompt-on-repost',
          '--disable-sync',
          '--disable-translate',
          '--disable-logging',
          '--disable-permissions-api',
          '--disable-presentation-api',
          '--disable-print-preview',
          '--disable-speech-api',
          '--disable-file-system',
          '--disable-notifications',
          '--disable-geolocation',
          '--disable-media-session-api',
          '--disable-background-networking',
          '--disable-default-apps',
          '--disable-sync-preferences',
          '--disable-component-extensions-with-background-pages',
          '--disable-client-side-phishing-detection',
          '--disable-component-update',
          '--disable-domain-reliability',
          '--disable-features=TranslateUI',
          '--disable-features=BlinkGenPropertyTrees',
          '--disable-features=VizDisplayCompositor',
          '--disable-features=WebRtcHideLocalIpsWithMdns',
          '--disable-features=WebRtcUseMinMaxVEADimensions',
          `--user-agent=${approach.userAgent}`
        ]
      });
      
      const page = await browser.newPage();
      
      // –°–∫—Ä—ã—Ç–∏–µ webdriver —Å–≤–æ–π—Å—Ç–≤
      await page.evaluateOnNewDocument(() => {
        Object.defineProperty(navigator, 'webdriver', {
          get: () => undefined,
        });
        
        // –£–¥–∞–ª–µ–Ω–∏–µ automation —Ñ–ª–∞–≥–æ–≤
        delete window.cdc_adoQpoasnfa76pfcZLmcfl_Array;
        delete window.cdc_adoQpoasnfa76pfcZLmcfl_Promise;
        delete window.cdc_adoQpoasnfa76pfcZLmcfl_Symbol;
      });
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ viewport
      await page.setViewport(approach.viewport);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
      await page.setExtraHTTPHeaders({
        'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Sec-Fetch-User': '?1',
        'Upgrade-Insecure-Requests': '1'
      });
      
      console.log(`üìÑ Opening: ${url}`);
      console.log(`üîß Using: ${approach.userAgent}`);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await page.goto(url, {
        waitUntil: 'domcontentloaded',
        timeout: 60000
      });
      
      console.log('‚è≥ Waiting for Cloudflare challenge...');
      
      // –ñ–¥–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Cloudflare
      let attempts = 0;
      let content = '';
      let title = '';
      
      while (attempts < 30) {
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        try {
          content = await page.content();
          title = await page.title();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∏ –ª–∏ –º—ã Cloudflare
          if (!content.includes('Just a moment') && 
              !content.includes('Checking your browser') &&
              !content.includes('–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç') &&
              title !== 'Just a moment...') {
            console.log('‚úÖ Cloudflare challenge passed!');
            break;
          }
          
          attempts++;
          if (attempts % 5 === 0) {
            console.log(`‚è≥ Attempt ${attempts}/30 - Still waiting for Cloudflare...`);
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        }
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      content = await page.content();
      title = await page.title();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (content.includes('Just a moment') || content.includes('–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç')) {
        console.log('‚ö†Ô∏è  Cloudflare challenge still active');
        await browser.close();
        continue; // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥—Ö–æ–¥
      }
      
      // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã
      const lotLinks = await page.$$eval('a[href*="/item/"]', links => links.length);
      
      if (lotLinks > 0) {
        console.log(`üéâ Success with ${approach.name}! Found ${lotLinks} item links`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const filename = `multiple_${approach.name.toLowerCase().replace(' ', '_')}_good${categoryId}_opt${finished ? '2' : '1'}_${timestamp}.html`;
        const filepath = path.join(__dirname, '../data', filename);
        
        await fs.ensureDir(path.join(__dirname, '../data'));
        await fs.writeFile(filepath, content, 'utf-8');
        
        console.log(`‚úÖ Saved to: ${filename}`);
        console.log(`üìä Size: ${(content.length / 1024).toFixed(2)} KB`);
        console.log(`üìã Page title: ${title}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫
        const firstLinks = await page.$$eval('a[href*="/item/"]', links => 
          links.slice(0, 3).map(link => ({
            href: link.href,
            text: link.textContent.trim().substring(0, 30)
          }))
        );
        console.log('üìã First 3 item links:');
        firstLinks.forEach((link, index) => {
          console.log(`   ${index + 1}. ${link.text}... -> ${link.href}`);
        });
        
        await browser.close();
        return; // –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏
      } else {
        console.log('‚ö†Ô∏è  No auction links found with this approach');
        await browser.close();
      }
      
    } catch (error) {
      console.error(`‚ùå Error with ${approach.name}:`, error.message);
    }
  }
  
  console.log('\n‚ùå All approaches failed to bypass Cloudflare');
  console.log('üí° This site may have very strong protection');
}

// –ó–∞–ø—É—Å–∫
const categoryId = process.argv[2] || '252';
const finished = process.argv[3] !== 'false';
fetchMultipleAttempts(categoryId, finished);

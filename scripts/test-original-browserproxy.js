#!/usr/bin/env node

const http = require('http');

async function testOriginalBrowserProxy() {
    console.log('üß™ Testing Original BrowserProxy API...');
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    console.log('üìä Testing status endpoint...');
    await testStatus();
    
    // –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ URL
    console.log('üìÑ Testing load endpoint...');
    await testLoadUrl();
    
    // –¢–µ—Å—Ç 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
    console.log('üîß Testing execute endpoint...');
    await testExecuteScript();
}

async function testStatus() {
    return new Promise((resolve, reject) => {
        const options = {
            hostname: 'localhost',
            port: 80,
            path: '/api/proxy/status',
            method: 'GET'
        };
        
        const req = http.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(data);
                    console.log('‚úÖ Status check passed');
                    console.log(`üìä Status: ${result.status}`);
                    if (result.chrome) {
                        console.log(`üåê Chrome: ${result.chrome.Browser}`);
                    }
                    resolve(result);
                } catch (error) {
                    console.error('‚ùå Status check failed:', error.message);
                    reject(error);
                }
            });
        });
        
        req.on('error', (error) => {
            console.error('‚ùå Status check error:', error.message);
            reject(error);
        });
        
        req.end();
    });
}

async function testLoadUrl() {
    return new Promise((resolve, reject) => {
        const url = 'https://meshok.net/good/252?opt=2';
        const options = {
            hostname: 'localhost',
            port: 80,
            path: `/api/proxy/load?url=${encodeURIComponent(url)}`,
            method: 'GET'
        };
        
        const req = http.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(data);
                    console.log('‚úÖ Load URL test completed');
                    console.log(`üìä Success: ${result.success}`);
                    console.log(`üìä URL: ${result.url}`);
                    console.log(`üìä HTML size: ${result.html ? result.html.length / 1024 : 0:.2f} KB`);
                    
                    if (result.success) {
                        // –ê–Ω–∞–ª–∏–∑ HTML
                        const html = result.html || '';
                        const itemLinks = (html.match(/href="\/item\/[^"]*"/g) || []).length;
                        const prices = (html.match(/[0-9,]+[ ]*‚ÇΩ|[0-9,]+[ ]*—Ä—É–±/g) || []).length;
                        
                        console.log(`üîó Item links found: ${itemLinks}`);
                        console.log(`üí∞ Prices found: ${prices}`);
                        
                        if (itemLinks > 0) {
                            console.log('üéâ Successfully obtained auction data!');
                        } else {
                            console.log('‚ö†Ô∏è  No auction links found');
                        }
                    } else {
                        console.log(`‚ùå Load failed: ${result.message}`);
                    }
                    
                    resolve(result);
                } catch (error) {
                    console.error('‚ùå Load URL test failed:', error.message);
                    reject(error);
                }
            });
        });
        
        req.on('error', (error) => {
            console.error('‚ùå Load URL test error:', error.message);
            reject(error);
        });
        
        req.setTimeout(30000, () => {
            console.error('‚ùå Load URL test timeout');
            req.destroy();
            reject(new Error('Timeout'));
        });
        
        req.end();
    });
}

async function testExecuteScript() {
    return new Promise((resolve, reject) => {
        const script = 'document.title';
        const postData = JSON.stringify({ script: script });
        
        const options = {
            hostname: 'localhost',
            port: 80,
            path: '/api/proxy/execute',
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        };
        
        const req = http.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const result = JSON.parse(data);
                    console.log('‚úÖ Execute script test completed');
                    console.log(`üìä Success: ${result.success}`);
                    console.log(`üìä Result: ${result.result}`);
                    resolve(result);
                } catch (error) {
                    console.error('‚ùå Execute script test failed:', error.message);
                    reject(error);
                }
            });
        });
        
        req.on('error', (error) => {
            console.error('‚ùå Execute script test error:', error.message);
            reject(error);
        });
        
        req.write(postData);
        req.end();
    });
}

async function testMeshokSpecific() {
    console.log('üéØ Testing Meshok-specific functionality...');
    
    const testUrls = [
        'https://meshok.net/good/252?opt=2',  // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–∏ –º–æ–Ω–µ—Ç
        'https://meshok.net/good/1106?opt=2', // –°–°–°–† 1917-1991
        'https://meshok.net/item/343735645'   // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–æ—Ç
    ];
    
    for (const url of testUrls) {
        console.log(`\nüìÑ Testing: ${url}`);
        
        try {
            const result = await new Promise((resolve, reject) => {
                const options = {
                    hostname: 'localhost',
                    port: 80,
                    path: `/api/proxy/load?url=${encodeURIComponent(url)}`,
                    method: 'GET'
                };
                
                const req = http.request(options, (res) => {
                    let data = '';
                    
                    res.on('data', (chunk) => {
                        data += chunk;
                    });
                    
                    res.on('end', () => {
                        try {
                            const result = JSON.parse(data);
                            resolve(result);
                        } catch (error) {
                            reject(error);
                        }
                    });
                });
                
                req.on('error', reject);
                req.setTimeout(30000, () => {
                    req.destroy();
                    reject(new Error('Timeout'));
                });
                
                req.end();
            });
            
            if (result.success) {
                const html = result.html || '';
                const itemLinks = (html.match(/href="\/item\/[^"]*"/g) || []).length;
                const prices = (html.match(/[0-9,]+[ ]*‚ÇΩ|[0-9,]+[ ]*—Ä—É–±/g) || []).length;
                
                console.log(`‚úÖ Success: ${itemLinks} items, ${prices} prices`);
            } else {
                console.log(`‚ùå Failed: ${result.message}`);
            }
            
        } catch (error) {
            console.log(`‚ùå Error: ${error.message}`);
        }
    }
}

async function runTests() {
    try {
        console.log('üöÄ Starting Original BrowserProxy tests...\n');
        
        await testOriginalBrowserProxy();
        console.log('');
        
        await testMeshokSpecific();
        console.log('');
        
        console.log('üéâ All tests completed successfully!');
        console.log('üí° Original BrowserProxy is working correctly');
        console.log('üí° Chrome extension is bypassing protection');
        console.log('üí° C# server is processing requests');
        
    } catch (error) {
        console.error('‚ùå Test failed:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests();

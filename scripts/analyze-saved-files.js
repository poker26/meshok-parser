const fs = require('fs-extra');
const path = require('path');
const cheerio = require('cheerio');

async function analyzeSavedFiles() {
  console.log('üîç Analyzing saved HTML files...');
  
  const dataDir = path.join(__dirname, '../data');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö HTML —Ñ–∞–π–ª–æ–≤
    const files = await fs.readdir(dataDir);
    const htmlFiles = files.filter(file => file.endsWith('.html'));
    
    if (htmlFiles.length === 0) {
      console.log('‚ùå No HTML files found in data directory');
      return;
    }
    
    console.log(`üìÅ Found ${htmlFiles.length} HTML files:`);
    htmlFiles.forEach((file, index) => {
      console.log(`   ${index + 1}. ${file}`);
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for (const file of htmlFiles) {
      console.log(`\nüìÑ Analyzing: ${file}`);
      
      const filePath = path.join(dataDir, file);
      const content = await fs.readFile(filePath, 'utf-8');
      
      console.log(`üìä Size: ${(content.length / 1024).toFixed(2)} KB`);
      
      // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
      const $ = cheerio.load(content);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const title = $('title').text();
      console.log(`üìã Title: ${title}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ Cloudflare
      if (content.includes('Just a moment') || content.includes('–û–¥–∏–Ω –º–æ–º–µ–Ω—Ç')) {
        console.log('‚ö†Ô∏è  Cloudflare challenge detected');
      } else {
        console.log('‚úÖ No Cloudflare challenge detected');
      }
      
      // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ª–æ—Ç—ã
      const itemLinks = $('a[href*="/item/"]');
      console.log(`üîó Item links found: ${itemLinks.length}`);
      
      if (itemLinks.length > 0) {
        console.log('üìã First 5 item links:');
        itemLinks.slice(0, 5).each((index, element) => {
          const href = $(element).attr('href');
          const text = $(element).text().trim().substring(0, 50);
          console.log(`   ${index + 1}. ${text}... -> ${href}`);
        });
      }
      
      // –ü–æ–∏—Å–∫ —Ü–µ–Ω
      const priceMatches = content.match(/[0-9,]+[ ]*‚ÇΩ|[0-9,]+[ ]*—Ä—É–±/g) || [];
      if (priceMatches.length > 0) {
        console.log(`üí∞ Prices found: ${priceMatches.length}`);
        console.log('üìã Sample prices:');
        priceMatches.slice(0, 3).forEach((price, index) => {
          console.log(`   ${index + 1}. ${price}`);
        });
      }
      
      // –ü–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const tables = $('table');
      console.log(`üìä Tables found: ${tables.length}`);
      
      const divs = $('div');
      console.log(`üì¶ Divs found: ${divs.length}`);
      
      const spans = $('span');
      console.log(`üìù Spans found: ${spans.length}`);
      
      // –ü–æ–∏—Å–∫ JSON –¥–∞–Ω–Ω—ã—Ö –≤ script —Ç–µ–≥–∞—Ö
      const scripts = $('script');
      console.log(`üìú Scripts found: ${scripts.length}`);
      
      let jsonDataFound = false;
      scripts.each((index, element) => {
        const scriptContent = $(element).html();
        if (scriptContent && (scriptContent.includes('{') && scriptContent.includes('}'))) {
          console.log(`üìú Script ${index + 1} contains JSON-like data`);
          jsonDataFound = true;
          
          // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON
          try {
            const jsonMatch = scriptContent.match(/\{.*\}/s);
            if (jsonMatch) {
              console.log(`üìú Found JSON data in script ${index + 1}:`);
              console.log(`   ${jsonMatch[0].substring(0, 200)}...`);
            }
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
          }
        }
      });
      
      if (!jsonDataFound) {
        console.log('üìú No JSON data found in scripts');
      }
      
      // –ü–æ–∏—Å–∫ —Ñ–æ—Ä–º
      const forms = $('form');
      console.log(`üìù Forms found: ${forms.length}`);
      
      // –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const images = $('img');
      console.log(`üñºÔ∏è  Images found: ${images.length}`);
      
      // –ü–æ–∏—Å–∫ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤
      const metaTags = $('meta');
      console.log(`üè∑Ô∏è  Meta tags found: ${metaTags.length}`);
      
      // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categoryLinks = $('a[href*="/good/"]');
      console.log(`üìÇ Category links found: ${categoryLinks.length}`);
      
      if (categoryLinks.length > 0) {
        console.log('üìã First 3 category links:');
        categoryLinks.slice(0, 3).each((index, element) => {
          const href = $(element).attr('href');
          const text = $(element).text().trim().substring(0, 30);
          console.log(`   ${index + 1}. ${text}... -> ${href}`);
        });
      }
      
      // –ü–æ–∏—Å–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
      const pagination = $('a[href*="page"], .pagination, .pager');
      console.log(`üìÑ Pagination found: ${pagination.length}`);
      
      // –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏
      const dataTables = $('table tr');
      console.log(`üìä Table rows found: ${dataTables.length}`);
      
      if (dataTables.length > 0) {
        console.log('üìã First 3 table rows:');
        dataTables.slice(0, 3).each((index, element) => {
          const text = $(element).text().trim().substring(0, 100);
          console.log(`   ${index + 1}. ${text}...`);
        });
      }
      
      console.log('‚îÄ'.repeat(80));
    }
    
  } catch (error) {
    console.error('‚ùå Error analyzing files:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫
analyzeSavedFiles();

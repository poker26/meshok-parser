const { Client } = require('pg');

const dbConfig = {
    user: 'postgres.xkwgspqwebfeteoblayu',        
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',   
    password: 'Gopapopa326+',    
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    }
};

async function fixAnalysisAndFilter() {
    const client = new Client(dbConfig);
    
    try {
        await client.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
        
        console.log('\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê –ò –°–û–ó–î–ê–ù–ò–ï –¢–û–ß–ù–û–ô –§–ò–õ–¨–¢–†–ê–¶–ò–ò:');
        console.log('='.repeat(60));
        
        // 1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const totalQuery = `
            SELECT COUNT(*) as total
            FROM auction_lots 
            WHERE source_url IS NOT NULL;
        `;
        const totalResult = await client.query(totalQuery);
        console.log(`üìä –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤ –≤ –±–∞–∑–µ: ${totalResult.rows[0].total}`);
        
        // 2. –õ–æ—Ç—ã —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏ (—Å–æ–¥–µ—Ä–∂–∞—Ç —Ü–∏—Ñ—Ä—ã)
        const withGradesQuery = `
            SELECT COUNT(*) as count
            FROM auction_lots 
            WHERE source_url IS NOT NULL 
            AND condition ~ '[0-9]';
        `;
        const withGradesResult = await client.query(withGradesQuery);
        console.log(`‚úÖ –õ–æ—Ç–æ–≤ —Å –≥—Ä–∞–¥–∞—Ü–∏—è–º–∏: ${withGradesResult.rows[0].count}`);
        
        // 3. –õ–æ—Ç—ã –±–µ–∑ –≥—Ä–∞–¥–∞—Ü–∏–π (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –Ω–æ –Ω–µ –ø—É—Å—Ç—ã–µ)
        const withoutGradesQuery = `
            SELECT COUNT(*) as count
            FROM auction_lots 
            WHERE source_url IS NOT NULL 
            AND condition !~ '[0-9]'
            AND condition IS NOT NULL
            AND condition != '';
        `;
        const withoutGradesResult = await client.query(withoutGradesQuery);
        console.log(`‚ö†Ô∏è –õ–æ—Ç–æ–≤ –±–µ–∑ –≥—Ä–∞–¥–∞—Ü–∏–π: ${withoutGradesResult.rows[0].count}`);
        
        // 4. –ü—É—Å—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const emptyQuery = `
            SELECT COUNT(*) as count
            FROM auction_lots 
            WHERE source_url IS NOT NULL 
            AND (condition IS NULL OR condition = '');
        `;
        const emptyResult = await client.query(emptyQuery);
        console.log(`‚ùå –õ–æ—Ç–æ–≤ —Å –ø—É—Å—Ç—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏: ${emptyResult.rows[0].count}`);
        
        // 5. –°–æ–∑–¥–∞–µ–º —Ç–æ—á–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ—Ç—ã —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Ç–∏–ø–∞ "MS", "AU", "XF", "VF", "PF"
        const simpleStatesQuery = `
            SELECT COUNT(*) as count
            FROM auction_lots 
            WHERE source_url IS NOT NULL 
            AND condition IN ('MS', 'AU', 'XF', 'VF', 'PF', 'UNC', 'PL', 'PR', 'F', 'Proof', 'Gem', 'XX');
        `;
        const simpleStatesResult = await client.query(simpleStatesQuery);
        console.log(`üéØ –õ–æ—Ç–æ–≤ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ (–∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ): ${simpleStatesResult.rows[0].count}`);
        
        // 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–æ—Å—Ç—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        const examplesQuery = `
            SELECT condition, COUNT(*) as count
            FROM auction_lots 
            WHERE source_url IS NOT NULL 
            AND condition IN ('MS', 'AU', 'XF', 'VF', 'PF', 'UNC', 'PL', 'PR', 'F', 'Proof', 'Gem', 'XX')
            GROUP BY condition
            ORDER BY count DESC;
        `;
        const examplesResult = await client.query(examplesQuery);
        
        console.log('\nüìã –ü–†–û–°–¢–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø:');
        examplesResult.rows.forEach((row, index) => {
            console.log(`${index + 1}. "${row.condition}": ${row.count} –ª–æ—Ç–æ–≤`);
        });
        
        // 7. –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const optimizedQuery = `
            SELECT id, lot_number, auction_number, condition, source_url
            FROM auction_lots 
            WHERE source_url IS NOT NULL 
            AND condition IN ('MS', 'AU', 'XF', 'VF', 'PF', 'UNC', 'PL', 'PR', 'F', 'Proof', 'Gem', 'XX')
            ORDER BY auction_number DESC, lot_number
            LIMIT 1000;
        `;
        const optimizedResult = await client.query(optimizedQuery);
        
        console.log(`\nüìä –ü–†–ò–ú–ï–†–´ –õ–û–¢–û–í –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø (–ø–µ—Ä–≤—ã–µ 20):`);
        optimizedResult.rows.slice(0, 20).forEach((row, index) => {
            console.log(`${index + 1}. –ê—É–∫—Ü–∏–æ–Ω ${row.auction_number}, –õ–æ—Ç ${row.lot_number}: "${row.condition}"`);
        });
        
        // 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const correctedAnalysis = {
            total: totalResult.rows[0].total,
            withGrades: withGradesResult.rows[0].count,
            withoutGrades: withoutGradesResult.rows[0].count,
            empty: emptyResult.rows[0].count,
            simpleStates: simpleStatesResult.rows[0].count,
            needUpdate: simpleStatesResult.rows[0].count,
            savingsPercent: ((totalResult.rows[0].total - simpleStatesResult.rows[0].count) / totalResult.rows[0].total * 100).toFixed(1),
            examples: examplesResult.rows,
            lotsToUpdate: optimizedResult.rows
        };
        
        const fs = require('fs');
        fs.writeFileSync('corrected_analysis.json', JSON.stringify(correctedAnalysis, null, 2));
        console.log('\nüíæ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: corrected_analysis.json');
        
        console.log('\nüéØ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:');
        console.log('='.repeat(40));
        console.log(`üìä –í—Å–µ–≥–æ –ª–æ—Ç–æ–≤: ${correctedAnalysis.total}`);
        console.log(`‚úÖ –£–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ: ${correctedAnalysis.withGrades + correctedAnalysis.withoutGrades - correctedAnalysis.simpleStates}`);
        console.log(`üéØ –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å: ${correctedAnalysis.needUpdate}`);
        console.log(`üöÄ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏: ${correctedAnalysis.savingsPercent}%`);
        
        // 9. –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const optimizedSQL = `
            -- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            SELECT id, lot_number, auction_number, condition, source_url
            FROM auction_lots 
            WHERE source_url IS NOT NULL 
            AND condition IN ('MS', 'AU', 'XF', 'VF', 'PF', 'UNC', 'PL', 'PR', 'F', 'Proof', 'Gem', 'XX')
            ORDER BY auction_number DESC, lot_number;
        `;
        
        fs.writeFileSync('optimized_query.sql', optimizedSQL);
        console.log('üíæ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: optimized_query.sql');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await client.end();
    }
}

fixAnalysisAndFilter();

const { Pool } = require('pg');

const pool = new Pool({
    user: 'postgres.xkwgspqwebfeteoblayu',        
    host: 'aws-0-eu-north-1.pooler.supabase.com',
    database: 'postgres',   
    password: 'Gopapopa326+',    
    port: 6543,
    ssl: {
        rejectUnauthorized: false
    },
    connectionTimeoutMillis: 10000,
    idleTimeoutMillis: 30000,
    max: 10,
    allowExitOnIdle: true
});

async function check2020CoinsCondition() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–µ—Ç—ã 2020 –≥–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ò—â–µ–º –≤—Å–µ –º–æ–Ω–µ—Ç—ã 2020 –≥–æ–¥–∞
        const result = await pool.query(`
            SELECT 
                lot_number,
                auction_number,
                coin_description,
                year,
                letters,
                metal,
                condition,
                winning_bid
            FROM auction_lots 
            WHERE year = 2020 
            AND winning_bid IS NOT NULL 
            AND winning_bid > 0
            ORDER BY winning_bid DESC
            LIMIT 20
        `);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} –º–æ–Ω–µ—Ç 2020 –≥–æ–¥–∞:`);
        console.log('');
        
        result.rows.forEach((row, index) => {
            console.log(`${index + 1}. –õ–æ—Ç ${row.lot_number}, –ê—É–∫—Ü–∏–æ–Ω ${row.auction_number}`);
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${row.coin_description}`);
            console.log(`   –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${row.condition}`);
            console.log(`   –ú–µ—Ç–∞–ª–ª: ${row.metal}`);
            console.log(`   –¶–µ–Ω–∞: ${row.winning_bid}‚ÇΩ`);
            console.log('');
        });
        
        // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –º–æ–Ω–µ—Ç—ã "50 —Ä—É–±–ª–µ–π. –ö–æ–º–ø–ª–µ–∫—Å –•—Ä–∞–º–∞ –í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏—è –•—Ä–∏—Å—Ç–æ–≤–∞" 2020 –≥–æ–¥–∞
        console.log('üîç –ò—â–µ–º –º–æ–Ω–µ—Ç—ã "50 —Ä—É–±–ª–µ–π. –ö–æ–º–ø–ª–µ–∫—Å –•—Ä–∞–º–∞ –í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏—è –•—Ä–∏—Å—Ç–æ–≤–∞" 2020 –≥–æ–¥–∞...');
        const templeCoinsResult = await pool.query(`
            SELECT 
                lot_number,
                auction_number,
                coin_description,
                condition,
                metal,
                winning_bid
            FROM auction_lots 
            WHERE year = 2020 
            AND coin_description ILIKE '%—Ö—Ä–∞–º%–≤–æ—Å–∫—Ä–µ—Å–µ–Ω–∏—è%'
            AND winning_bid IS NOT NULL 
            AND winning_bid > 0
            ORDER BY winning_bid DESC
        `);
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${templeCoinsResult.rows.length} –º–æ–Ω–µ—Ç "50 —Ä—É–±–ª–µ–π. –ö–æ–º–ø–ª–µ–∫—Å –•—Ä–∞–º–∞ –í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏—è –•—Ä–∏—Å—Ç–æ–≤–∞" 2020 –≥–æ–¥–∞:`);
        console.log('');
        
        templeCoinsResult.rows.forEach((row, index) => {
            console.log(`${index + 1}. –õ–æ—Ç ${row.lot_number}, –ê—É–∫—Ü–∏–æ–Ω ${row.auction_number}`);
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${row.coin_description}`);
            console.log(`   –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${row.condition}`);
            console.log(`   –ú–µ—Ç–∞–ª–ª: ${row.metal}`);
            console.log(`   –¶–µ–Ω–∞: ${row.winning_bid}‚ÇΩ`);
            console.log('');
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    } finally {
        await pool.end();
    }
}

check2020CoinsCondition();
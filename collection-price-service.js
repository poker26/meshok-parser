/**
 * –°–µ—Ä–≤–∏—Å –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞
 */

const { Pool } = require('pg');
const config = require('./config');
class CollectionPriceService {
    constructor() {
        this.pool = new Pool(config.dbConfig);
        this.predictor = null;
        this.metalsService = null;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
     */
    async init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Ü–µ–Ω –Ω–∞ –º–µ—Ç–∞–ª–ª—ã
        const MetalsPriceService = require('./metals-price-service');
        this.metalsService = new MetalsPriceService();
        
        // –ö–∞–ª–∏–±—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        await this.calibrateModel();
        
        console.log('üîó CollectionPriceService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–∑ FinalPricePredictor)
     */
    async calibrateModel() {
        console.log('üîß –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º –∏ –º–µ—Ç–∞–ª–ª–∞–º
        const calibrationData = await this.pool.query(`
            SELECT 
                condition,
                metal,
                COUNT(*) as sample_size,
                AVG(winning_bid) as avg_price,
                AVG(weight) as avg_weight,
                MIN(winning_bid) as min_price,
                MAX(winning_bid) as max_price,
                PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY winning_bid) as median_price
            FROM auction_lots 
            WHERE winning_bid IS NOT NULL 
                AND winning_bid > 0
                AND condition IS NOT NULL
                AND metal IS NOT NULL
            GROUP BY condition, metal
            HAVING COUNT(*) >= 5
            ORDER BY avg_price DESC;
        `);
        
        console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${calibrationData.rows.length} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏`);
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        this.calibrationTable = {};
        
        for (const row of calibrationData.rows) {
            const key = `${row.condition}_${row.metal}`;
            this.calibrationTable[key] = {
                avgPrice: row.avg_price,
                medianPrice: row.median_price,
                sampleSize: row.sample_size,
                avgWeight: row.avg_weight,
                minPrice: row.min_price,
                maxPrice: row.max_price
            };
        }
        
        console.log('‚úÖ –ú–æ–¥–µ–ª—å –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–∞');
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–∑ FinalPricePredictor)
     */
    async predictPrice(lot) {
        const { metal, weight, condition, year, letters, coin_description } = lot;
        
        // 1. –ò—â–µ–º —Ç–æ—á–Ω—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
        const calibrationKey = `${condition}_${metal}`;
        const calibration = this.calibrationTable[calibrationKey];
        
        if (calibration && calibration.sampleSize >= 5) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            let predictedPrice = calibration.medianPrice; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞–Ω—É –∫–∞–∫ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—É—é
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–µ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (weight && calibration.avgWeight && calibration.avgWeight > 0) {
                const weightRatio = weight / calibration.avgWeight;
                predictedPrice *= weightRatio;
            }
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≥–æ–¥
            if (year && !isNaN(year)) {
                const yearNum = parseInt(year);
                if (yearNum < 1800) {
                    predictedPrice *= 1.3; // +30% –∑–∞ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ
                } else if (yearNum < 1900) {
                    predictedPrice *= 1.2; // +20% –∑–∞ –¥–æ—Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ
                } else if (yearNum < 1950) {
                    predictedPrice *= 1.1; // +10% –∑–∞ —Å–æ–≤–µ—Ç—Å–∫–∏–µ –¥–æ 1950
                }
            }
            
            // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ä–µ–¥–∫–æ—Å—Ç—å
            if (coin_description) {
                const desc = coin_description.toLowerCase();
                if (desc.includes('—Ä–µ–¥–∫') || desc.includes('—É–Ω–∏–∫')) {
                    predictedPrice *= 1.5; // +50% –∑–∞ —Ä–µ–¥–∫–∏–µ
                }
            }
            
            return {
                predictedPrice: Math.round(predictedPrice),
                metalValue: 0, // –ù–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                numismaticPremium: Math.round(predictedPrice),
                conditionMultiplier: 1.0,
                confidence: Math.min(0.9, 0.5 + (calibration.sampleSize / 100)), // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤—ã–±–æ—Ä–∫–∏
                method: 'calibrated'
            };
        }
        
        // 2. –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        return this.simplePrediction(lot);
    }

    /**
     * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
     */
    simplePrediction(lot) {
        const { metal, weight, condition } = lot;
        
        // –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –ø–æ –º–µ—Ç–∞–ª–ª–∞–º (–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
        const basePrices = {
            'Au': 50000,  // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–æ–ª–æ—Ç–æ–π –º–æ–Ω–µ—Ç—ã
            'Ag': 5000,   // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ —Å–µ—Ä–µ–±—Ä—è–Ω–æ–π –º–æ–Ω–µ—Ç—ã
            'Cu': 2000,   // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –º–µ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
            'Fe': 1000,   // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∂–µ–ª–µ–∑–Ω–æ–π –º–æ–Ω–µ—Ç—ã
            'Ni': 1500    // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–∏–∫–µ–ª–µ–≤–æ–π –º–æ–Ω–µ—Ç—ã
        };
        
        // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
        const conditionMultipliers = {
            'MS64': 2.0, 'MS61': 1.8, 'MS62': 1.6, 'MS65': 1.4, 'MS63': 1.2, 'MS60': 1.0, 'MS66': 0.8,
            'MS': 1.0, 'AU55': 1.5, 'AU58': 1.3, 'AU': 0.6, 'AU/UNC': 0.7,
            'UNC': 0.5, 'XF+/AU': 0.6, 'XF': 0.4, 'VF': 0.3, 'F': 0.2, 'G': 0.1,
            'PL': 0.8, 'XX': 0.9, 'Superb': 0.7, 'Gem': 0.6, 'Ch': 0.7
        };
        
        const basePrice = basePrices[metal] || 1000;
        const conditionMultiplier = conditionMultipliers[condition] || 0.3;
        
        let predictedPrice = basePrice * conditionMultiplier;
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–µ—Å
        if (weight && weight > 0) {
            predictedPrice *= (weight / 5.0); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 5–≥
        }
        
        return {
            predictedPrice: Math.round(predictedPrice),
            metalValue: Math.round(basePrice * 0.1), // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–µ—Ç–∞–ª–ª–∞
            numismaticPremium: Math.round(predictedPrice * 0.9),
            conditionMultiplier: conditionMultiplier,
            confidence: 0.3, // –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            method: 'simple'
        };
    }

    /**
     * –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É, –æ–∂–∏–¥–∞–µ–º–æ–º—É —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    adaptCoinDataForPrediction(coin) {
        return {
            metal: coin.metal,
            weight: coin.coin_weight || coin.pure_metal_weight,
            condition: coin.condition,
            year: coin.year,
            letters: coin.mint, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–Ω–µ—Ç–Ω—ã–π –¥–≤–æ—Ä –∫–∞–∫ letters
            coin_description: coin.original_description || coin.coin_name
        };
    }

    /**
     * –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
     */
    async calculatePredictedPrice(coinId) {
        try {
            console.log(`üîÆ –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –º–æ–Ω–µ—Ç—ã ID: ${coinId}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
            const coinResult = await this.pool.query(`
                SELECT 
                    id, coin_name, denomination, year, metal, condition, 
                    coin_weight, pure_metal_weight, mintage, rarity, mint,
                    original_description
                FROM coin_catalog 
                WHERE id = $1
            `, [coinId]);
            
            if (coinResult.rows.length === 0) {
                throw new Error(`–ú–æ–Ω–µ—Ç–∞ —Å ID ${coinId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ`);
            }
            
            const coin = coinResult.rows[0];
            console.log(`üìã –ú–æ–Ω–µ—Ç–∞: ${coin.coin_name} (${coin.denomination}) - ${coin.metal} ${coin.condition}`);
            
            // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
            const adaptedData = this.adaptCoinDataForPrediction(coin);
            
            // –ö–∞–ª–∏–±—Ä—É–µ–º –º–æ–¥–µ–ª—å (–µ—Å–ª–∏ –µ—â–µ –Ω–µ –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–∞)
            if (!this.calibrationTable) {
                await this.calibrateModel();
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
            const prediction = await this.predictPrice(adaptedData);
            
            console.log(`üí∞ –ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è —Ü–µ–Ω–∞: ${prediction.predictedPrice.toLocaleString()}‚ÇΩ (${prediction.method}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(prediction.confidence * 100).toFixed(0)}%)`);
            
            return {
                predictedPrice: prediction.predictedPrice,
                confidenceScore: prediction.confidence,
                predictionMethod: prediction.method,
                metalValue: prediction.metalValue,
                numismaticPremium: prediction.numismaticPremium,
                calculationDate: new Date()
            };
            
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –º–æ–Ω–µ—Ç—ã ${coinId}:`, error.message);
            throw error;
        }
    }

    /**
     * –ü–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async recalculateUserCollectionPrices(userId) {
        try {
            console.log(`üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}`);
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–Ω–µ—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const collectionResult = await this.pool.query(`
                SELECT 
                    uc.id as collection_id,
                    uc.coin_id,
                    cc.coin_name,
                    cc.denomination,
                    cc.metal,
                    cc.condition,
                    cc.year
                FROM user_collections uc
                JOIN coin_catalog cc ON uc.coin_id = cc.id
                WHERE uc.user_id = $1
                ORDER BY uc.id
            `, [userId]);
            
            if (collectionResult.rows.length === 0) {
                console.log('üì≠ –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–∞');
                return { updated: 0, errors: 0 };
            }
            
            console.log(`üìö –ù–∞–π–¥–µ–Ω–æ ${collectionResult.rows.length} –º–æ–Ω–µ—Ç –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏`);
            
            let updated = 0;
            let errors = 0;
            
            // –ö–∞–ª–∏–±—Ä—É–µ–º –º–æ–¥–µ–ª—å –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
            if (!this.calibrationTable) {
                await this.calibrateModel();
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –º–æ–Ω–µ—Ç—É
            for (const item of collectionResult.rows) {
                try {
                    const prediction = await this.calculatePredictedPrice(item.coin_id);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                    await this.pool.query(`
                        UPDATE user_collections 
                        SET 
                            predicted_price = $1,
                            confidence_score = $2,
                            prediction_method = $3,
                            price_calculation_date = $4
                        WHERE id = $5
                    `, [
                        prediction.predictedPrice,
                        prediction.confidenceScore,
                        prediction.predictionMethod,
                        prediction.calculationDate,
                        item.collection_id
                    ]);
                    
                    updated++;
                    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–Ω–∞—è —Ü–µ–Ω–∞ –¥–ª—è ${item.coin_name}: ${prediction.predictedPrice.toLocaleString()}‚ÇΩ`);
                    
                } catch (error) {
                    errors++;
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${item.coin_name}:`, error.message);
                }
            }
            
            console.log(`üìä –ü–µ—Ä–µ—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${updated}, –æ—à–∏–±–æ–∫ ${errors}`);
            return { updated, errors };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö —Ü–µ–Ω:', error.message);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–Ω–æ–π –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getCollectionTotalValue(userId) {
        try {
            console.log(`üí∞ –†–∞—Å—á–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: ${userId}`);
            
            const result = await this.pool.query(`
                SELECT 
                    COUNT(*) as total_coins,
                    SUM(predicted_price) as total_predicted_value,
                    AVG(predicted_price) as avg_predicted_price,
                    MIN(predicted_price) as min_predicted_price,
                    MAX(predicted_price) as max_predicted_price,
                    AVG(confidence_score) as avg_confidence,
                    COUNT(CASE WHEN predicted_price IS NOT NULL THEN 1 END) as coins_with_predictions,
                    MAX(price_calculation_date) as last_calculation_date
                FROM user_collections 
                WHERE user_id = $1
            `, [userId]);
            
            const stats = result.rows[0];
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–±–∏–≤–∫—É –ø–æ –º–µ—Ç–∞–ª–ª–∞–º
            const metalStats = await this.pool.query(`
                SELECT 
                    cc.metal,
                    COUNT(*) as count,
                    SUM(uc.predicted_price) as total_value,
                    AVG(uc.predicted_price) as avg_price
                FROM user_collections uc
                JOIN coin_catalog cc ON uc.coin_id = cc.id
                WHERE uc.user_id = $1 AND uc.predicted_price IS NOT NULL
                GROUP BY cc.metal
                ORDER BY total_value DESC
            `, [userId]);
            
            return {
                totalCoins: parseInt(stats.total_coins),
                totalPredictedValue: parseFloat(stats.total_predicted_value) || 0,
                avgPredictedPrice: parseFloat(stats.avg_predicted_price) || 0,
                minPredictedPrice: parseFloat(stats.min_predicted_price) || 0,
                maxPredictedPrice: parseFloat(stats.max_predicted_price) || 0,
                avgConfidence: parseFloat(stats.avg_confidence) || 0,
                coinsWithPredictions: parseInt(stats.coins_with_predictions),
                lastCalculationDate: stats.last_calculation_date,
                metalBreakdown: metalStats.rows.map(row => ({
                    metal: row.metal,
                    count: parseInt(row.count),
                    totalValue: parseFloat(row.total_value),
                    avgPrice: parseFloat(row.avg_price)
                }))
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º–∞—Ä–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏:', error.message);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
     */
    async getCoinPredictedPrice(userId, coinId) {
        try {
            const result = await this.pool.query(`
                SELECT 
                    predicted_price,
                    confidence_score,
                    prediction_method,
                    price_calculation_date
                FROM user_collections 
                WHERE user_id = $1 AND coin_id = $2
            `, [userId, coinId]);
            
            if (result.rows.length === 0) {
                return null;
            }
            
            const row = result.rows[0];
            return {
                predictedPrice: parseFloat(row.predicted_price),
                confidenceScore: parseFloat(row.confidence_score),
                predictionMethod: row.prediction_method,
                calculationDate: row.price_calculation_date
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π —Ü–µ–Ω—ã:', error.message);
            throw error;
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    async close() {
        await this.pool.end();
        if (this.predictor && this.predictor.dbClient) {
            await this.predictor.dbClient.end();
        }
    }
}

module.exports = CollectionPriceService;

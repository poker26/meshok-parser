# Wolmar Parser - –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –¥–µ–ø–ª–æ—è
# –ê–≤—Ç–æ—Ä: Wolmar Team
# –í–µ—Ä—Å–∏—è: 2.0.0

Write-Host "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ –¥–ª—è –¥–µ–ø–ª–æ—è Wolmar Parser..." -ForegroundColor Green

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–∞–∫–µ—Ç–∞
$timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
$packageDir = "wolmar-parser-deployment-$timestamp"
New-Item -ItemType Directory -Path $packageDir -Force | Out-Null

Write-Host "üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤..." -ForegroundColor Yellow

# –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
$filesToCopy = @(
    "package.json",
    "package-lock.json", 
    "ecosystem.config.js",
    "config.js",
    "config.production.js",
    "env.example"
)

foreach ($file in $filesToCopy) {
    if (Test-Path $file) {
        Copy-Item $file $packageDir
        Write-Host "  ‚úì $file" -ForegroundColor Green
    } else {
        Write-Host "  ‚ö† $file –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Yellow
    }
}

# –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞
$scriptsToCopy = @(
    "start-production.sh",
    "stop-production.sh", 
    "restart-production.sh",
    "deploy.sh"
)

foreach ($script in $scriptsToCopy) {
    if (Test-Path $script) {
        Copy-Item $script $packageDir
        Write-Host "  ‚úì $script" -ForegroundColor Green
    } else {
        Write-Host "  ‚ö† $script –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Yellow
    }
}

# –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã
$serverFiles = @(
    "server.js",
    "catalog-server.js",
    "admin-server.js"
)

foreach ($file in $serverFiles) {
    if (Test-Path $file) {
        Copy-Item $file $packageDir
        Write-Host "  ‚úì $file" -ForegroundColor Green
    } else {
        Write-Host "  ‚ö† $file –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Yellow
    }
}

# –ö–æ–ø–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
$services = @(
    "auth-service.js",
    "collection-service.js",
    "collection-price-service.js",
    "metals-price-service.js",
    "winner-ratings-service.js"
)

foreach ($service in $services) {
    if (Test-Path $service) {
        Copy-Item $service $packageDir
        Write-Host "  ‚úì $service" -ForegroundColor Green
    } else {
        Write-Host "  ‚ö† $service –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Yellow
    }
}

# –ö–æ–ø–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä—ã
$parsers = @(
    "catalog-parser.js",
    "numismat-parser.js",
    "improved-predictions-generator.js"
)

foreach ($parser in $parsers) {
    if (Test-Path $parser) {
        Copy-Item $parser $packageDir
        Write-Host "  ‚úì $parser" -ForegroundColor Green
    } else {
        Write-Host "  ‚ö† $parser –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Yellow
    }
}

# –ö–æ–ø–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
if (Test-Path "catalog-public") {
    Copy-Item -Recurse "catalog-public" "$packageDir/catalog-public"
    Write-Host "  ‚úì catalog-public/" -ForegroundColor Green
} else {
    Write-Host "  ‚ö† catalog-public/ –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Yellow
}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
New-Item -ItemType Directory -Path "$packageDir/logs" -Force | Out-Null
New-Item -ItemType Directory -Path "$packageDir/catalog-images" -Force | Out-Null
New-Item -ItemType Directory -Path "$packageDir/backup" -Force | Out-Null

# –ö–æ–ø–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
$docs = @(
    "DEPLOYMENT-GUIDE.md",
    "README.md",
    "README-PRODUCTION.md"
)

foreach ($doc in $docs) {
    if (Test-Path $doc) {
        Copy-Item $doc $packageDir
        Write-Host "  ‚úì $doc" -ForegroundColor Green
    } else {
        Write-Host "  ‚ö† $doc –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Yellow
    }
}

# –°–æ–∑–¥–∞–µ–º .gitignore
$gitignoreContent = @"
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Runtime data
pids/
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage
.grunt

# Bower dependency directory
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# Editor directories and files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Project specific
catalog-images/
backup/
*.tar.gz
*.zip

# PM2 logs
.pm2/

# Database
*.sqlite
*.db

# Test files
test-results/
coverage/

# Build artifacts
build/
dist/
"@

Set-Content -Path "$packageDir/.gitignore" -Value $gitignoreContent

# –°–æ–∑–¥–∞–µ–º README –¥–ª—è –¥–µ–ø–ª–æ—è
$readmeContent = @"
# üöÄ Wolmar Parser - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

## üìã –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞

### 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
```bash
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js 18+
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt-get install -y nodejs

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PM2
sudo npm install -g pm2

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Google Chrome
wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
sudo apt update
sudo apt install -y google-chrome-stable
```

### 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
```bash
# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
cp env.example .env
nano .env  # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
npm install --production
```

### 3. –ó–∞–ø—É—Å–∫
```bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫
./deploy.sh

# –ò–ª–∏ —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫
./start-production.sh
```

### 4. –ü—Ä–æ–≤–µ—Ä–∫–∞
```bash
# –°—Ç–∞—Ç—É—Å
pm2 status

# –õ–æ–≥–∏
pm2 logs

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
# –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä: http://localhost:3001
# –ö–∞—Ç–∞–ª–æ–≥: http://localhost:3000
```

## üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

```bash
# –ó–∞–ø—É—Å–∫
./start-production.sh

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞
./stop-production.sh

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
./restart-production.sh

# –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π
./deploy.sh
```

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: `pm2 logs`
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: `pm2 status`
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: `pm2 restart all`

–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: DEPLOYMENT-GUIDE.md
"@

Set-Content -Path "$packageDir/README-DEPLOY.md" -Value $readmeContent

# –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
Write-Host "üóúÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞..." -ForegroundColor Yellow
$archiveName = "$packageDir.zip"
Compress-Archive -Path $packageDir -DestinationPath $archiveName -Force

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
$archiveSize = (Get-Item $archiveName).Length
$archiveSizeMB = [math]::Round($archiveSize / 1MB, 2)

Write-Host "‚úÖ –ü–∞–∫–µ—Ç –¥–ª—è –¥–µ–ø–ª–æ—è —Å–æ–∑–¥–∞–Ω: $archiveName" -ForegroundColor Green
Write-Host "üìÅ –†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞: $archiveSizeMB MB" -ForegroundColor Cyan
Write-Host ""
Write-Host "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–∫–µ—Ç–∞:" -ForegroundColor Yellow
Get-ChildItem $packageDir | Format-Table Name, Length -AutoSize

Write-Host ""
Write-Host "üöÄ –î–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:" -ForegroundColor Green
Write-Host "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∞—Ä—Ö–∏–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä" -ForegroundColor White
Write-Host "2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ: unzip $archiveName" -ForegroundColor White
Write-Host "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: cd $packageDir" -ForegroundColor White
Write-Host "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./deploy.sh" -ForegroundColor White
Write-Host ""
Write-Host "üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: DEPLOYMENT-GUIDE.md" -ForegroundColor Cyan

# –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
Remove-Item -Recurse -Force $packageDir

Write-Host "‚úÖ –ì–æ—Ç–æ–≤–æ!" -ForegroundColor Green
